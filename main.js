/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

createCommonjsModule(function (module, exports) {
(function webpackUniversalModuleDefinition(root, factory) {
	module.exports = factory();
})(typeof self !== 'undefined' ? self : commonjsGlobal, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/icons.json":
/*!*************************!*\
  !*** ./dist/icons.json ***!
  \*************************/
/*! exports provided: activity, airplay, alert-circle, alert-octagon, alert-triangle, align-center, align-justify, align-left, align-right, anchor, aperture, archive, arrow-down-circle, arrow-down-left, arrow-down-right, arrow-down, arrow-left-circle, arrow-left, arrow-right-circle, arrow-right, arrow-up-circle, arrow-up-left, arrow-up-right, arrow-up, at-sign, award, bar-chart-2, bar-chart, battery-charging, battery, bell-off, bell, bluetooth, bold, book-open, book, bookmark, box, briefcase, calendar, camera-off, camera, cast, check-circle, check-square, check, chevron-down, chevron-left, chevron-right, chevron-up, chevrons-down, chevrons-left, chevrons-right, chevrons-up, chrome, circle, clipboard, clock, cloud-drizzle, cloud-lightning, cloud-off, cloud-rain, cloud-snow, cloud, code, codepen, codesandbox, coffee, columns, command, compass, copy, corner-down-left, corner-down-right, corner-left-down, corner-left-up, corner-right-down, corner-right-up, corner-up-left, corner-up-right, cpu, credit-card, crop, crosshair, database, delete, disc, divide-circle, divide-square, divide, dollar-sign, download-cloud, download, dribbble, droplet, edit-2, edit-3, edit, external-link, eye-off, eye, facebook, fast-forward, feather, figma, file-minus, file-plus, file-text, file, film, filter, flag, folder-minus, folder-plus, folder, framer, frown, gift, git-branch, git-commit, git-merge, git-pull-request, github, gitlab, globe, grid, hard-drive, hash, headphones, heart, help-circle, hexagon, home, image, inbox, info, instagram, italic, key, layers, layout, life-buoy, link-2, link, linkedin, list, loader, lock, log-in, log-out, mail, map-pin, map, maximize-2, maximize, meh, menu, message-circle, message-square, mic-off, mic, minimize-2, minimize, minus-circle, minus-square, minus, monitor, moon, more-horizontal, more-vertical, mouse-pointer, move, music, navigation-2, navigation, octagon, package, paperclip, pause-circle, pause, pen-tool, percent, phone-call, phone-forwarded, phone-incoming, phone-missed, phone-off, phone-outgoing, phone, pie-chart, play-circle, play, plus-circle, plus-square, plus, pocket, power, printer, radio, refresh-ccw, refresh-cw, repeat, rewind, rotate-ccw, rotate-cw, rss, save, scissors, search, send, server, settings, share-2, share, shield-off, shield, shopping-bag, shopping-cart, shuffle, sidebar, skip-back, skip-forward, slack, slash, sliders, smartphone, smile, speaker, square, star, stop-circle, sun, sunrise, sunset, tablet, tag, target, terminal, thermometer, thumbs-down, thumbs-up, toggle-left, toggle-right, tool, trash-2, trash, trello, trending-down, trending-up, triangle, truck, tv, twitch, twitter, type, umbrella, underline, unlock, upload-cloud, upload, user-check, user-minus, user-plus, user-x, user, users, video-off, video, voicemail, volume-1, volume-2, volume-x, volume, watch, wifi-off, wifi, wind, x-circle, x-octagon, x-square, x, youtube, zap-off, zap, zoom-in, zoom-out, default */
/***/ (function(module) {

module.exports = {"activity":"<polyline points=\"22 12 18 12 15 21 9 3 6 12 2 12\"></polyline>","airplay":"<path d=\"M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1\"></path><polygon points=\"12 15 17 21 7 21 12 15\"></polygon>","alert-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>","alert-octagon":"<polygon points=\"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2\"></polygon><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>","alert-triangle":"<path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>","align-center":"<line x1=\"18\" y1=\"10\" x2=\"6\" y2=\"10\"></line><line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line><line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line><line x1=\"18\" y1=\"18\" x2=\"6\" y2=\"18\"></line>","align-justify":"<line x1=\"21\" y1=\"10\" x2=\"3\" y2=\"10\"></line><line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line><line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line><line x1=\"21\" y1=\"18\" x2=\"3\" y2=\"18\"></line>","align-left":"<line x1=\"17\" y1=\"10\" x2=\"3\" y2=\"10\"></line><line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line><line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line><line x1=\"17\" y1=\"18\" x2=\"3\" y2=\"18\"></line>","align-right":"<line x1=\"21\" y1=\"10\" x2=\"7\" y2=\"10\"></line><line x1=\"21\" y1=\"6\" x2=\"3\" y2=\"6\"></line><line x1=\"21\" y1=\"14\" x2=\"3\" y2=\"14\"></line><line x1=\"21\" y1=\"18\" x2=\"7\" y2=\"18\"></line>","anchor":"<circle cx=\"12\" cy=\"5\" r=\"3\"></circle><line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"8\"></line><path d=\"M5 12H2a10 10 0 0 0 20 0h-3\"></path>","aperture":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"14.31\" y1=\"8\" x2=\"20.05\" y2=\"17.94\"></line><line x1=\"9.69\" y1=\"8\" x2=\"21.17\" y2=\"8\"></line><line x1=\"7.38\" y1=\"12\" x2=\"13.12\" y2=\"2.06\"></line><line x1=\"9.69\" y1=\"16\" x2=\"3.95\" y2=\"6.06\"></line><line x1=\"14.31\" y1=\"16\" x2=\"2.83\" y2=\"16\"></line><line x1=\"16.62\" y1=\"12\" x2=\"10.88\" y2=\"21.94\"></line>","archive":"<polyline points=\"21 8 21 21 3 21 3 8\"></polyline><rect x=\"1\" y=\"3\" width=\"22\" height=\"5\"></rect><line x1=\"10\" y1=\"12\" x2=\"14\" y2=\"12\"></line>","arrow-down-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"8 12 12 16 16 12\"></polyline><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line>","arrow-down-left":"<line x1=\"17\" y1=\"7\" x2=\"7\" y2=\"17\"></line><polyline points=\"17 17 7 17 7 7\"></polyline>","arrow-down-right":"<line x1=\"7\" y1=\"7\" x2=\"17\" y2=\"17\"></line><polyline points=\"17 7 17 17 7 17\"></polyline>","arrow-down":"<line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><polyline points=\"19 12 12 19 5 12\"></polyline>","arrow-left-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"12 8 8 12 12 16\"></polyline><line x1=\"16\" y1=\"12\" x2=\"8\" y2=\"12\"></line>","arrow-left":"<line x1=\"19\" y1=\"12\" x2=\"5\" y2=\"12\"></line><polyline points=\"12 19 5 12 12 5\"></polyline>","arrow-right-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"12 16 16 12 12 8\"></polyline><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>","arrow-right":"<line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line><polyline points=\"12 5 19 12 12 19\"></polyline>","arrow-up-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"16 12 12 8 8 12\"></polyline><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"8\"></line>","arrow-up-left":"<line x1=\"17\" y1=\"17\" x2=\"7\" y2=\"7\"></line><polyline points=\"7 17 7 7 17 7\"></polyline>","arrow-up-right":"<line x1=\"7\" y1=\"17\" x2=\"17\" y2=\"7\"></line><polyline points=\"7 7 17 7 17 17\"></polyline>","arrow-up":"<line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"5\"></line><polyline points=\"5 12 12 5 19 12\"></polyline>","at-sign":"<circle cx=\"12\" cy=\"12\" r=\"4\"></circle><path d=\"M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94\"></path>","award":"<circle cx=\"12\" cy=\"8\" r=\"7\"></circle><polyline points=\"8.21 13.89 7 23 12 20 17 23 15.79 13.88\"></polyline>","bar-chart-2":"<line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"10\"></line><line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"4\"></line><line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"14\"></line>","bar-chart":"<line x1=\"12\" y1=\"20\" x2=\"12\" y2=\"10\"></line><line x1=\"18\" y1=\"20\" x2=\"18\" y2=\"4\"></line><line x1=\"6\" y1=\"20\" x2=\"6\" y2=\"16\"></line>","battery-charging":"<path d=\"M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19\"></path><line x1=\"23\" y1=\"13\" x2=\"23\" y2=\"11\"></line><polyline points=\"11 6 7 12 13 12 9 18\"></polyline>","battery":"<rect x=\"1\" y=\"6\" width=\"18\" height=\"12\" rx=\"2\" ry=\"2\"></rect><line x1=\"23\" y1=\"13\" x2=\"23\" y2=\"11\"></line>","bell-off":"<path d=\"M13.73 21a2 2 0 0 1-3.46 0\"></path><path d=\"M18.63 13A17.89 17.89 0 0 1 18 8\"></path><path d=\"M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14\"></path><path d=\"M18 8a6 6 0 0 0-9.33-5\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>","bell":"<path d=\"M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9\"></path><path d=\"M13.73 21a2 2 0 0 1-3.46 0\"></path>","bluetooth":"<polyline points=\"6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5\"></polyline>","bold":"<path d=\"M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path><path d=\"M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z\"></path>","book-open":"<path d=\"M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z\"></path><path d=\"M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z\"></path>","book":"<path d=\"M4 19.5A2.5 2.5 0 0 1 6.5 17H20\"></path><path d=\"M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z\"></path>","bookmark":"<path d=\"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z\"></path>","box":"<path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path><polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline><line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>","briefcase":"<rect x=\"2\" y=\"7\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect><path d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"></path>","calendar":"<rect x=\"3\" y=\"4\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"16\" y1=\"2\" x2=\"16\" y2=\"6\"></line><line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"6\"></line><line x1=\"3\" y1=\"10\" x2=\"21\" y2=\"10\"></line>","camera-off":"<line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line><path d=\"M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56\"></path>","camera":"<path d=\"M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z\"></path><circle cx=\"12\" cy=\"13\" r=\"4\"></circle>","cast":"<path d=\"M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6\"></path><line x1=\"2\" y1=\"20\" x2=\"2.01\" y2=\"20\"></line>","check-circle":"<path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path><polyline points=\"22 4 12 14.01 9 11.01\"></polyline>","check-square":"<polyline points=\"9 11 12 14 22 4\"></polyline><path d=\"M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11\"></path>","check":"<polyline points=\"20 6 9 17 4 12\"></polyline>","chevron-down":"<polyline points=\"6 9 12 15 18 9\"></polyline>","chevron-left":"<polyline points=\"15 18 9 12 15 6\"></polyline>","chevron-right":"<polyline points=\"9 18 15 12 9 6\"></polyline>","chevron-up":"<polyline points=\"18 15 12 9 6 15\"></polyline>","chevrons-down":"<polyline points=\"7 13 12 18 17 13\"></polyline><polyline points=\"7 6 12 11 17 6\"></polyline>","chevrons-left":"<polyline points=\"11 17 6 12 11 7\"></polyline><polyline points=\"18 17 13 12 18 7\"></polyline>","chevrons-right":"<polyline points=\"13 17 18 12 13 7\"></polyline><polyline points=\"6 17 11 12 6 7\"></polyline>","chevrons-up":"<polyline points=\"17 11 12 6 7 11\"></polyline><polyline points=\"17 18 12 13 7 18\"></polyline>","chrome":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><circle cx=\"12\" cy=\"12\" r=\"4\"></circle><line x1=\"21.17\" y1=\"8\" x2=\"12\" y2=\"8\"></line><line x1=\"3.95\" y1=\"6.06\" x2=\"8.54\" y2=\"14\"></line><line x1=\"10.88\" y1=\"21.94\" x2=\"15.46\" y2=\"14\"></line>","circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle>","clipboard":"<path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect>","clock":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polyline points=\"12 6 12 12 16 14\"></polyline>","cloud-drizzle":"<line x1=\"8\" y1=\"19\" x2=\"8\" y2=\"21\"></line><line x1=\"8\" y1=\"13\" x2=\"8\" y2=\"15\"></line><line x1=\"16\" y1=\"19\" x2=\"16\" y2=\"21\"></line><line x1=\"16\" y1=\"13\" x2=\"16\" y2=\"15\"></line><line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"></line><line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"17\"></line><path d=\"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25\"></path>","cloud-lightning":"<path d=\"M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9\"></path><polyline points=\"13 11 9 17 15 17 11 23\"></polyline>","cloud-off":"<path d=\"M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>","cloud-rain":"<line x1=\"16\" y1=\"13\" x2=\"16\" y2=\"21\"></line><line x1=\"8\" y1=\"13\" x2=\"8\" y2=\"21\"></line><line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"23\"></line><path d=\"M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25\"></path>","cloud-snow":"<path d=\"M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25\"></path><line x1=\"8\" y1=\"16\" x2=\"8.01\" y2=\"16\"></line><line x1=\"8\" y1=\"20\" x2=\"8.01\" y2=\"20\"></line><line x1=\"12\" y1=\"18\" x2=\"12.01\" y2=\"18\"></line><line x1=\"12\" y1=\"22\" x2=\"12.01\" y2=\"22\"></line><line x1=\"16\" y1=\"16\" x2=\"16.01\" y2=\"16\"></line><line x1=\"16\" y1=\"20\" x2=\"16.01\" y2=\"20\"></line>","cloud":"<path d=\"M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z\"></path>","code":"<polyline points=\"16 18 22 12 16 6\"></polyline><polyline points=\"8 6 2 12 8 18\"></polyline>","codepen":"<polygon points=\"12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2\"></polygon><line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"15.5\"></line><polyline points=\"22 8.5 12 15.5 2 8.5\"></polyline><polyline points=\"2 15.5 12 8.5 22 15.5\"></polyline><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"8.5\"></line>","codesandbox":"<path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path><polyline points=\"7.5 4.21 12 6.81 16.5 4.21\"></polyline><polyline points=\"7.5 19.79 7.5 14.6 3 12\"></polyline><polyline points=\"21 12 16.5 14.6 16.5 19.79\"></polyline><polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline><line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>","coffee":"<path d=\"M18 8h1a4 4 0 0 1 0 8h-1\"></path><path d=\"M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z\"></path><line x1=\"6\" y1=\"1\" x2=\"6\" y2=\"4\"></line><line x1=\"10\" y1=\"1\" x2=\"10\" y2=\"4\"></line><line x1=\"14\" y1=\"1\" x2=\"14\" y2=\"4\"></line>","columns":"<path d=\"M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18\"></path>","command":"<path d=\"M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z\"></path>","compass":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polygon points=\"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\"></polygon>","copy":"<rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect><path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>","corner-down-left":"<polyline points=\"9 10 4 15 9 20\"></polyline><path d=\"M20 4v7a4 4 0 0 1-4 4H4\"></path>","corner-down-right":"<polyline points=\"15 10 20 15 15 20\"></polyline><path d=\"M4 4v7a4 4 0 0 0 4 4h12\"></path>","corner-left-down":"<polyline points=\"14 15 9 20 4 15\"></polyline><path d=\"M20 4h-7a4 4 0 0 0-4 4v12\"></path>","corner-left-up":"<polyline points=\"14 9 9 4 4 9\"></polyline><path d=\"M20 20h-7a4 4 0 0 1-4-4V4\"></path>","corner-right-down":"<polyline points=\"10 15 15 20 20 15\"></polyline><path d=\"M4 4h7a4 4 0 0 1 4 4v12\"></path>","corner-right-up":"<polyline points=\"10 9 15 4 20 9\"></polyline><path d=\"M4 20h7a4 4 0 0 0 4-4V4\"></path>","corner-up-left":"<polyline points=\"9 14 4 9 9 4\"></polyline><path d=\"M20 20v-7a4 4 0 0 0-4-4H4\"></path>","corner-up-right":"<polyline points=\"15 14 20 9 15 4\"></polyline><path d=\"M4 20v-7a4 4 0 0 1 4-4h12\"></path>","cpu":"<rect x=\"4\" y=\"4\" width=\"16\" height=\"16\" rx=\"2\" ry=\"2\"></rect><rect x=\"9\" y=\"9\" width=\"6\" height=\"6\"></rect><line x1=\"9\" y1=\"1\" x2=\"9\" y2=\"4\"></line><line x1=\"15\" y1=\"1\" x2=\"15\" y2=\"4\"></line><line x1=\"9\" y1=\"20\" x2=\"9\" y2=\"23\"></line><line x1=\"15\" y1=\"20\" x2=\"15\" y2=\"23\"></line><line x1=\"20\" y1=\"9\" x2=\"23\" y2=\"9\"></line><line x1=\"20\" y1=\"14\" x2=\"23\" y2=\"14\"></line><line x1=\"1\" y1=\"9\" x2=\"4\" y2=\"9\"></line><line x1=\"1\" y1=\"14\" x2=\"4\" y2=\"14\"></line>","credit-card":"<rect x=\"1\" y=\"4\" width=\"22\" height=\"16\" rx=\"2\" ry=\"2\"></rect><line x1=\"1\" y1=\"10\" x2=\"23\" y2=\"10\"></line>","crop":"<path d=\"M6.13 1L6 16a2 2 0 0 0 2 2h15\"></path><path d=\"M1 6.13L16 6a2 2 0 0 1 2 2v15\"></path>","crosshair":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"22\" y1=\"12\" x2=\"18\" y2=\"12\"></line><line x1=\"6\" y1=\"12\" x2=\"2\" y2=\"12\"></line><line x1=\"12\" y1=\"6\" x2=\"12\" y2=\"2\"></line><line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\"></line>","database":"<ellipse cx=\"12\" cy=\"5\" rx=\"9\" ry=\"3\"></ellipse><path d=\"M21 12c0 1.66-4 3-9 3s-9-1.34-9-3\"></path><path d=\"M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5\"></path>","delete":"<path d=\"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z\"></path><line x1=\"18\" y1=\"9\" x2=\"12\" y2=\"15\"></line><line x1=\"12\" y1=\"9\" x2=\"18\" y2=\"15\"></line>","disc":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><circle cx=\"12\" cy=\"12\" r=\"3\"></circle>","divide-circle":"<line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"16\"></line><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"8\"></line><circle cx=\"12\" cy=\"12\" r=\"10\"></circle>","divide-square":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"16\"></line><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"8\"></line>","divide":"<circle cx=\"12\" cy=\"6\" r=\"2\"></circle><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line><circle cx=\"12\" cy=\"18\" r=\"2\"></circle>","dollar-sign":"<line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"23\"></line><path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\"></path>","download-cloud":"<polyline points=\"8 17 12 21 16 17\"></polyline><line x1=\"12\" y1=\"12\" x2=\"12\" y2=\"21\"></line><path d=\"M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29\"></path>","download":"<path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path><polyline points=\"7 10 12 15 17 10\"></polyline><line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>","dribbble":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M8.56 2.75c4.37 6.03 6.02 9.42 8.03 17.72m2.54-15.38c-3.72 4.35-8.94 5.66-16.88 5.85m19.5 1.9c-3.5-.93-6.63-.82-8.94 0-2.58.92-5.01 2.86-7.44 6.32\"></path>","droplet":"<path d=\"M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z\"></path>","edit-2":"<path d=\"M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z\"></path>","edit-3":"<path d=\"M12 20h9\"></path><path d=\"M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z\"></path>","edit":"<path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path><path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>","external-link":"<path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line>","eye-off":"<path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>","eye":"<path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path><circle cx=\"12\" cy=\"12\" r=\"3\"></circle>","facebook":"<path d=\"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z\"></path>","fast-forward":"<polygon points=\"13 19 22 12 13 5 13 19\"></polygon><polygon points=\"2 19 11 12 2 5 2 19\"></polygon>","feather":"<path d=\"M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z\"></path><line x1=\"16\" y1=\"8\" x2=\"2\" y2=\"22\"></line><line x1=\"17.5\" y1=\"15\" x2=\"9\" y2=\"15\"></line>","figma":"<path d=\"M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z\"></path><path d=\"M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z\"></path><path d=\"M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z\"></path><path d=\"M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z\"></path><path d=\"M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z\"></path>","file-minus":"<path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\"></line>","file-plus":"<path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"12\"></line><line x1=\"9\" y1=\"15\" x2=\"15\" y2=\"15\"></line>","file-text":"<path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path><polyline points=\"14 2 14 8 20 8\"></polyline><line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\"></line><line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\"></line><polyline points=\"10 9 9 9 8 9\"></polyline>","file":"<path d=\"M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z\"></path><polyline points=\"13 2 13 9 20 9\"></polyline>","film":"<rect x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"2.18\" ry=\"2.18\"></rect><line x1=\"7\" y1=\"2\" x2=\"7\" y2=\"22\"></line><line x1=\"17\" y1=\"2\" x2=\"17\" y2=\"22\"></line><line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line><line x1=\"2\" y1=\"7\" x2=\"7\" y2=\"7\"></line><line x1=\"2\" y1=\"17\" x2=\"7\" y2=\"17\"></line><line x1=\"17\" y1=\"17\" x2=\"22\" y2=\"17\"></line><line x1=\"17\" y1=\"7\" x2=\"22\" y2=\"7\"></line>","filter":"<polygon points=\"22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3\"></polygon>","flag":"<path d=\"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z\"></path><line x1=\"4\" y1=\"22\" x2=\"4\" y2=\"15\"></line>","folder-minus":"<path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path><line x1=\"9\" y1=\"14\" x2=\"15\" y2=\"14\"></line>","folder-plus":"<path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path><line x1=\"12\" y1=\"11\" x2=\"12\" y2=\"17\"></line><line x1=\"9\" y1=\"14\" x2=\"15\" y2=\"14\"></line>","folder":"<path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\"></path>","framer":"<path d=\"M5 16V9h14V2H5l14 14h-7m-7 0l7 7v-7m-7 0h7\"></path>","frown":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M16 16s-1.5-2-4-2-4 2-4 2\"></path><line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line><line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>","gift":"<polyline points=\"20 12 20 22 4 22 4 12\"></polyline><rect x=\"2\" y=\"7\" width=\"20\" height=\"5\"></rect><line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"7\"></line><path d=\"M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z\"></path><path d=\"M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z\"></path>","git-branch":"<line x1=\"6\" y1=\"3\" x2=\"6\" y2=\"15\"></line><circle cx=\"18\" cy=\"6\" r=\"3\"></circle><circle cx=\"6\" cy=\"18\" r=\"3\"></circle><path d=\"M18 9a9 9 0 0 1-9 9\"></path>","git-commit":"<circle cx=\"12\" cy=\"12\" r=\"4\"></circle><line x1=\"1.05\" y1=\"12\" x2=\"7\" y2=\"12\"></line><line x1=\"17.01\" y1=\"12\" x2=\"22.96\" y2=\"12\"></line>","git-merge":"<circle cx=\"18\" cy=\"18\" r=\"3\"></circle><circle cx=\"6\" cy=\"6\" r=\"3\"></circle><path d=\"M6 21V9a9 9 0 0 0 9 9\"></path>","git-pull-request":"<circle cx=\"18\" cy=\"18\" r=\"3\"></circle><circle cx=\"6\" cy=\"6\" r=\"3\"></circle><path d=\"M13 6h3a2 2 0 0 1 2 2v7\"></path><line x1=\"6\" y1=\"9\" x2=\"6\" y2=\"21\"></line>","github":"<path d=\"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\"></path>","gitlab":"<path d=\"M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z\"></path>","globe":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line><path d=\"M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z\"></path>","grid":"<rect x=\"3\" y=\"3\" width=\"7\" height=\"7\"></rect><rect x=\"14\" y=\"3\" width=\"7\" height=\"7\"></rect><rect x=\"14\" y=\"14\" width=\"7\" height=\"7\"></rect><rect x=\"3\" y=\"14\" width=\"7\" height=\"7\"></rect>","hard-drive":"<line x1=\"22\" y1=\"12\" x2=\"2\" y2=\"12\"></line><path d=\"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z\"></path><line x1=\"6\" y1=\"16\" x2=\"6.01\" y2=\"16\"></line><line x1=\"10\" y1=\"16\" x2=\"10.01\" y2=\"16\"></line>","hash":"<line x1=\"4\" y1=\"9\" x2=\"20\" y2=\"9\"></line><line x1=\"4\" y1=\"15\" x2=\"20\" y2=\"15\"></line><line x1=\"10\" y1=\"3\" x2=\"8\" y2=\"21\"></line><line x1=\"16\" y1=\"3\" x2=\"14\" y2=\"21\"></line>","headphones":"<path d=\"M3 18v-6a9 9 0 0 1 18 0v6\"></path><path d=\"M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z\"></path>","heart":"<path d=\"M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z\"></path>","help-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line>","hexagon":"<path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path>","home":"<path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path><polyline points=\"9 22 9 12 15 12 15 22\"></polyline>","image":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><circle cx=\"8.5\" cy=\"8.5\" r=\"1.5\"></circle><polyline points=\"21 15 16 10 5 21\"></polyline>","inbox":"<polyline points=\"22 12 16 12 14 15 10 15 8 12 2 12\"></polyline><path d=\"M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z\"></path>","info":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line>","instagram":"<rect x=\"2\" y=\"2\" width=\"20\" height=\"20\" rx=\"5\" ry=\"5\"></rect><path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\"></path><line x1=\"17.5\" y1=\"6.5\" x2=\"17.51\" y2=\"6.5\"></line>","italic":"<line x1=\"19\" y1=\"4\" x2=\"10\" y2=\"4\"></line><line x1=\"14\" y1=\"20\" x2=\"5\" y2=\"20\"></line><line x1=\"15\" y1=\"4\" x2=\"9\" y2=\"20\"></line>","key":"<path d=\"M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4\"></path>","layers":"<polygon points=\"12 2 2 7 12 12 22 7 12 2\"></polygon><polyline points=\"2 17 12 22 22 17\"></polyline><polyline points=\"2 12 12 17 22 12\"></polyline>","layout":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"3\" y1=\"9\" x2=\"21\" y2=\"9\"></line><line x1=\"9\" y1=\"21\" x2=\"9\" y2=\"9\"></line>","life-buoy":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><circle cx=\"12\" cy=\"12\" r=\"4\"></circle><line x1=\"4.93\" y1=\"4.93\" x2=\"9.17\" y2=\"9.17\"></line><line x1=\"14.83\" y1=\"14.83\" x2=\"19.07\" y2=\"19.07\"></line><line x1=\"14.83\" y1=\"9.17\" x2=\"19.07\" y2=\"4.93\"></line><line x1=\"14.83\" y1=\"9.17\" x2=\"18.36\" y2=\"5.64\"></line><line x1=\"4.93\" y1=\"19.07\" x2=\"9.17\" y2=\"14.83\"></line>","link-2":"<path d=\"M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3\"></path><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>","link":"<path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path>","linkedin":"<path d=\"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z\"></path><rect x=\"2\" y=\"9\" width=\"4\" height=\"12\"></rect><circle cx=\"4\" cy=\"4\" r=\"2\"></circle>","list":"<line x1=\"8\" y1=\"6\" x2=\"21\" y2=\"6\"></line><line x1=\"8\" y1=\"12\" x2=\"21\" y2=\"12\"></line><line x1=\"8\" y1=\"18\" x2=\"21\" y2=\"18\"></line><line x1=\"3\" y1=\"6\" x2=\"3.01\" y2=\"6\"></line><line x1=\"3\" y1=\"12\" x2=\"3.01\" y2=\"12\"></line><line x1=\"3\" y1=\"18\" x2=\"3.01\" y2=\"18\"></line>","loader":"<line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"6\"></line><line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"22\"></line><line x1=\"4.93\" y1=\"4.93\" x2=\"7.76\" y2=\"7.76\"></line><line x1=\"16.24\" y1=\"16.24\" x2=\"19.07\" y2=\"19.07\"></line><line x1=\"2\" y1=\"12\" x2=\"6\" y2=\"12\"></line><line x1=\"18\" y1=\"12\" x2=\"22\" y2=\"12\"></line><line x1=\"4.93\" y1=\"19.07\" x2=\"7.76\" y2=\"16.24\"></line><line x1=\"16.24\" y1=\"7.76\" x2=\"19.07\" y2=\"4.93\"></line>","lock":"<rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect><path d=\"M7 11V7a5 5 0 0 1 10 0v4\"></path>","log-in":"<path d=\"M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4\"></path><polyline points=\"10 17 15 12 10 7\"></polyline><line x1=\"15\" y1=\"12\" x2=\"3\" y2=\"12\"></line>","log-out":"<path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path><polyline points=\"16 17 21 12 16 7\"></polyline><line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line>","mail":"<path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path><polyline points=\"22,6 12,13 2,6\"></polyline>","map-pin":"<path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\"></path><circle cx=\"12\" cy=\"10\" r=\"3\"></circle>","map":"<polygon points=\"1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6\"></polygon><line x1=\"8\" y1=\"2\" x2=\"8\" y2=\"18\"></line><line x1=\"16\" y1=\"6\" x2=\"16\" y2=\"22\"></line>","maximize-2":"<polyline points=\"15 3 21 3 21 9\"></polyline><polyline points=\"9 21 3 21 3 15\"></polyline><line x1=\"21\" y1=\"3\" x2=\"14\" y2=\"10\"></line><line x1=\"3\" y1=\"21\" x2=\"10\" y2=\"14\"></line>","maximize":"<path d=\"M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3\"></path>","meh":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"8\" y1=\"15\" x2=\"16\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line><line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>","menu":"<line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line><line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line><line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>","message-circle":"<path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\"></path>","message-square":"<path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"></path>","mic-off":"<line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line><path d=\"M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6\"></path><path d=\"M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23\"></path><line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line><line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>","mic":"<path d=\"M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z\"></path><path d=\"M19 10v2a7 7 0 0 1-14 0v-2\"></path><line x1=\"12\" y1=\"19\" x2=\"12\" y2=\"23\"></line><line x1=\"8\" y1=\"23\" x2=\"16\" y2=\"23\"></line>","minimize-2":"<polyline points=\"4 14 10 14 10 20\"></polyline><polyline points=\"20 10 14 10 14 4\"></polyline><line x1=\"14\" y1=\"10\" x2=\"21\" y2=\"3\"></line><line x1=\"3\" y1=\"21\" x2=\"10\" y2=\"14\"></line>","minimize":"<path d=\"M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3\"></path>","minus-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>","minus-square":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>","minus":"<line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>","monitor":"<rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect><line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line><line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>","moon":"<path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"></path>","more-horizontal":"<circle cx=\"12\" cy=\"12\" r=\"1\"></circle><circle cx=\"19\" cy=\"12\" r=\"1\"></circle><circle cx=\"5\" cy=\"12\" r=\"1\"></circle>","more-vertical":"<circle cx=\"12\" cy=\"12\" r=\"1\"></circle><circle cx=\"12\" cy=\"5\" r=\"1\"></circle><circle cx=\"12\" cy=\"19\" r=\"1\"></circle>","mouse-pointer":"<path d=\"M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z\"></path><path d=\"M13 13l6 6\"></path>","move":"<polyline points=\"5 9 2 12 5 15\"></polyline><polyline points=\"9 5 12 2 15 5\"></polyline><polyline points=\"15 19 12 22 9 19\"></polyline><polyline points=\"19 9 22 12 19 15\"></polyline><line x1=\"2\" y1=\"12\" x2=\"22\" y2=\"12\"></line><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"22\"></line>","music":"<path d=\"M9 18V5l12-2v13\"></path><circle cx=\"6\" cy=\"18\" r=\"3\"></circle><circle cx=\"18\" cy=\"16\" r=\"3\"></circle>","navigation-2":"<polygon points=\"12 2 19 21 12 17 5 21 12 2\"></polygon>","navigation":"<polygon points=\"3 11 22 2 13 21 11 13 3 11\"></polygon>","octagon":"<polygon points=\"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2\"></polygon>","package":"<line x1=\"16.5\" y1=\"9.4\" x2=\"7.5\" y2=\"4.21\"></line><path d=\"M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z\"></path><polyline points=\"3.27 6.96 12 12.01 20.73 6.96\"></polyline><line x1=\"12\" y1=\"22.08\" x2=\"12\" y2=\"12\"></line>","paperclip":"<path d=\"M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48\"></path>","pause-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"10\" y1=\"15\" x2=\"10\" y2=\"9\"></line><line x1=\"14\" y1=\"15\" x2=\"14\" y2=\"9\"></line>","pause":"<rect x=\"6\" y=\"4\" width=\"4\" height=\"16\"></rect><rect x=\"14\" y=\"4\" width=\"4\" height=\"16\"></rect>","pen-tool":"<path d=\"M12 19l7-7 3 3-7 7-3-3z\"></path><path d=\"M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z\"></path><path d=\"M2 2l7.586 7.586\"></path><circle cx=\"11\" cy=\"11\" r=\"2\"></circle>","percent":"<line x1=\"19\" y1=\"5\" x2=\"5\" y2=\"19\"></line><circle cx=\"6.5\" cy=\"6.5\" r=\"2.5\"></circle><circle cx=\"17.5\" cy=\"17.5\" r=\"2.5\"></circle>","phone-call":"<path d=\"M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>","phone-forwarded":"<polyline points=\"19 1 23 5 19 9\"></polyline><line x1=\"15\" y1=\"5\" x2=\"23\" y2=\"5\"></line><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>","phone-incoming":"<polyline points=\"16 2 16 8 22 8\"></polyline><line x1=\"23\" y1=\"1\" x2=\"16\" y2=\"8\"></line><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>","phone-missed":"<line x1=\"23\" y1=\"1\" x2=\"17\" y2=\"7\"></line><line x1=\"17\" y1=\"1\" x2=\"23\" y2=\"7\"></line><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>","phone-off":"<path d=\"M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91\"></path><line x1=\"23\" y1=\"1\" x2=\"1\" y2=\"23\"></line>","phone-outgoing":"<polyline points=\"23 7 23 1 17 1\"></polyline><line x1=\"16\" y1=\"8\" x2=\"23\" y2=\"1\"></line><path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>","phone":"<path d=\"M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z\"></path>","pie-chart":"<path d=\"M21.21 15.89A10 10 0 1 1 8 2.83\"></path><path d=\"M22 12A10 10 0 0 0 12 2v10z\"></path>","play-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><polygon points=\"10 8 16 12 10 16 10 8\"></polygon>","play":"<polygon points=\"5 3 19 12 5 21 5 3\"></polygon>","plus-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>","plus-square":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"></line><line x1=\"8\" y1=\"12\" x2=\"16\" y2=\"12\"></line>","plus":"<line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\"></line><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>","pocket":"<path d=\"M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z\"></path><polyline points=\"8 10 12 14 16 10\"></polyline>","power":"<path d=\"M18.36 6.64a9 9 0 1 1-12.73 0\"></path><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"12\"></line>","printer":"<polyline points=\"6 9 6 2 18 2 18 9\"></polyline><path d=\"M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2\"></path><rect x=\"6\" y=\"14\" width=\"12\" height=\"8\"></rect>","radio":"<circle cx=\"12\" cy=\"12\" r=\"2\"></circle><path d=\"M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14\"></path>","refresh-ccw":"<polyline points=\"1 4 1 10 7 10\"></polyline><polyline points=\"23 20 23 14 17 14\"></polyline><path d=\"M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15\"></path>","refresh-cw":"<polyline points=\"23 4 23 10 17 10\"></polyline><polyline points=\"1 20 1 14 7 14\"></polyline><path d=\"M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15\"></path>","repeat":"<polyline points=\"17 1 21 5 17 9\"></polyline><path d=\"M3 11V9a4 4 0 0 1 4-4h14\"></path><polyline points=\"7 23 3 19 7 15\"></polyline><path d=\"M21 13v2a4 4 0 0 1-4 4H3\"></path>","rewind":"<polygon points=\"11 19 2 12 11 5 11 19\"></polygon><polygon points=\"22 19 13 12 22 5 22 19\"></polygon>","rotate-ccw":"<polyline points=\"1 4 1 10 7 10\"></polyline><path d=\"M3.51 15a9 9 0 1 0 2.13-9.36L1 10\"></path>","rotate-cw":"<polyline points=\"23 4 23 10 17 10\"></polyline><path d=\"M20.49 15a9 9 0 1 1-2.12-9.36L23 10\"></path>","rss":"<path d=\"M4 11a9 9 0 0 1 9 9\"></path><path d=\"M4 4a16 16 0 0 1 16 16\"></path><circle cx=\"5\" cy=\"19\" r=\"1\"></circle>","save":"<path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"></path><polyline points=\"17 21 17 13 7 13 7 21\"></polyline><polyline points=\"7 3 7 8 15 8\"></polyline>","scissors":"<circle cx=\"6\" cy=\"6\" r=\"3\"></circle><circle cx=\"6\" cy=\"18\" r=\"3\"></circle><line x1=\"20\" y1=\"4\" x2=\"8.12\" y2=\"15.88\"></line><line x1=\"14.47\" y1=\"14.48\" x2=\"20\" y2=\"20\"></line><line x1=\"8.12\" y1=\"8.12\" x2=\"12\" y2=\"12\"></line>","search":"<circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>","send":"<line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"></line><polygon points=\"22 2 15 22 11 13 2 9 22 2\"></polygon>","server":"<rect x=\"2\" y=\"2\" width=\"20\" height=\"8\" rx=\"2\" ry=\"2\"></rect><rect x=\"2\" y=\"14\" width=\"20\" height=\"8\" rx=\"2\" ry=\"2\"></rect><line x1=\"6\" y1=\"6\" x2=\"6.01\" y2=\"6\"></line><line x1=\"6\" y1=\"18\" x2=\"6.01\" y2=\"18\"></line>","settings":"<circle cx=\"12\" cy=\"12\" r=\"3\"></circle><path d=\"M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z\"></path>","share-2":"<circle cx=\"18\" cy=\"5\" r=\"3\"></circle><circle cx=\"6\" cy=\"12\" r=\"3\"></circle><circle cx=\"18\" cy=\"19\" r=\"3\"></circle><line x1=\"8.59\" y1=\"13.51\" x2=\"15.42\" y2=\"17.49\"></line><line x1=\"15.41\" y1=\"6.51\" x2=\"8.59\" y2=\"10.49\"></line>","share":"<path d=\"M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8\"></path><polyline points=\"16 6 12 2 8 6\"></polyline><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"15\"></line>","shield-off":"<path d=\"M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18\"></path><path d=\"M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>","shield":"<path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\"></path>","shopping-bag":"<path d=\"M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z\"></path><line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line><path d=\"M16 10a4 4 0 0 1-8 0\"></path>","shopping-cart":"<circle cx=\"9\" cy=\"21\" r=\"1\"></circle><circle cx=\"20\" cy=\"21\" r=\"1\"></circle><path d=\"M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6\"></path>","shuffle":"<polyline points=\"16 3 21 3 21 8\"></polyline><line x1=\"4\" y1=\"20\" x2=\"21\" y2=\"3\"></line><polyline points=\"21 16 21 21 16 21\"></polyline><line x1=\"15\" y1=\"15\" x2=\"21\" y2=\"21\"></line><line x1=\"4\" y1=\"4\" x2=\"9\" y2=\"9\"></line>","sidebar":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"9\" y1=\"3\" x2=\"9\" y2=\"21\"></line>","skip-back":"<polygon points=\"19 20 9 12 19 4 19 20\"></polygon><line x1=\"5\" y1=\"19\" x2=\"5\" y2=\"5\"></line>","skip-forward":"<polygon points=\"5 4 15 12 5 20 5 4\"></polygon><line x1=\"19\" y1=\"5\" x2=\"19\" y2=\"19\"></line>","slack":"<path d=\"M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z\"></path><path d=\"M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"></path><path d=\"M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z\"></path><path d=\"M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z\"></path><path d=\"M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z\"></path><path d=\"M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\"></path><path d=\"M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z\"></path><path d=\"M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z\"></path>","slash":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"4.93\" y1=\"4.93\" x2=\"19.07\" y2=\"19.07\"></line>","sliders":"<line x1=\"4\" y1=\"21\" x2=\"4\" y2=\"14\"></line><line x1=\"4\" y1=\"10\" x2=\"4\" y2=\"3\"></line><line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"3\"></line><line x1=\"20\" y1=\"21\" x2=\"20\" y2=\"16\"></line><line x1=\"20\" y1=\"12\" x2=\"20\" y2=\"3\"></line><line x1=\"1\" y1=\"14\" x2=\"7\" y2=\"14\"></line><line x1=\"9\" y1=\"8\" x2=\"15\" y2=\"8\"></line><line x1=\"17\" y1=\"16\" x2=\"23\" y2=\"16\"></line>","smartphone":"<rect x=\"5\" y=\"2\" width=\"14\" height=\"20\" rx=\"2\" ry=\"2\"></rect><line x1=\"12\" y1=\"18\" x2=\"12.01\" y2=\"18\"></line>","smile":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M8 14s1.5 2 4 2 4-2 4-2\"></path><line x1=\"9\" y1=\"9\" x2=\"9.01\" y2=\"9\"></line><line x1=\"15\" y1=\"9\" x2=\"15.01\" y2=\"9\"></line>","speaker":"<rect x=\"4\" y=\"2\" width=\"16\" height=\"20\" rx=\"2\" ry=\"2\"></rect><circle cx=\"12\" cy=\"14\" r=\"4\"></circle><line x1=\"12\" y1=\"6\" x2=\"12.01\" y2=\"6\"></line>","square":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect>","star":"<polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>","stop-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><rect x=\"9\" y=\"9\" width=\"6\" height=\"6\"></rect>","sun":"<circle cx=\"12\" cy=\"12\" r=\"5\"></circle><line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\"></line><line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"></line><line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\"></line><line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\"></line><line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\"></line><line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\"></line><line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\"></line><line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\"></line>","sunrise":"<path d=\"M17 18a5 5 0 0 0-10 0\"></path><line x1=\"12\" y1=\"2\" x2=\"12\" y2=\"9\"></line><line x1=\"4.22\" y1=\"10.22\" x2=\"5.64\" y2=\"11.64\"></line><line x1=\"1\" y1=\"18\" x2=\"3\" y2=\"18\"></line><line x1=\"21\" y1=\"18\" x2=\"23\" y2=\"18\"></line><line x1=\"18.36\" y1=\"11.64\" x2=\"19.78\" y2=\"10.22\"></line><line x1=\"23\" y1=\"22\" x2=\"1\" y2=\"22\"></line><polyline points=\"8 6 12 2 16 6\"></polyline>","sunset":"<path d=\"M17 18a5 5 0 0 0-10 0\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"2\"></line><line x1=\"4.22\" y1=\"10.22\" x2=\"5.64\" y2=\"11.64\"></line><line x1=\"1\" y1=\"18\" x2=\"3\" y2=\"18\"></line><line x1=\"21\" y1=\"18\" x2=\"23\" y2=\"18\"></line><line x1=\"18.36\" y1=\"11.64\" x2=\"19.78\" y2=\"10.22\"></line><line x1=\"23\" y1=\"22\" x2=\"1\" y2=\"22\"></line><polyline points=\"16 5 12 9 8 5\"></polyline>","tablet":"<rect x=\"4\" y=\"2\" width=\"16\" height=\"20\" rx=\"2\" ry=\"2\"></rect><line x1=\"12\" y1=\"18\" x2=\"12.01\" y2=\"18\"></line>","tag":"<path d=\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\"></path><line x1=\"7\" y1=\"7\" x2=\"7.01\" y2=\"7\"></line>","target":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><circle cx=\"12\" cy=\"12\" r=\"6\"></circle><circle cx=\"12\" cy=\"12\" r=\"2\"></circle>","terminal":"<polyline points=\"4 17 10 11 4 5\"></polyline><line x1=\"12\" y1=\"19\" x2=\"20\" y2=\"19\"></line>","thermometer":"<path d=\"M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z\"></path>","thumbs-down":"<path d=\"M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17\"></path>","thumbs-up":"<path d=\"M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3\"></path>","toggle-left":"<rect x=\"1\" y=\"5\" width=\"22\" height=\"14\" rx=\"7\" ry=\"7\"></rect><circle cx=\"8\" cy=\"12\" r=\"3\"></circle>","toggle-right":"<rect x=\"1\" y=\"5\" width=\"22\" height=\"14\" rx=\"7\" ry=\"7\"></rect><circle cx=\"16\" cy=\"12\" r=\"3\"></circle>","tool":"<path d=\"M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z\"></path>","trash-2":"<polyline points=\"3 6 5 6 21 6\"></polyline><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>","trash":"<polyline points=\"3 6 5 6 21 6\"></polyline><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>","trello":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><rect x=\"7\" y=\"7\" width=\"3\" height=\"9\"></rect><rect x=\"14\" y=\"7\" width=\"3\" height=\"5\"></rect>","trending-down":"<polyline points=\"23 18 13.5 8.5 8.5 13.5 1 6\"></polyline><polyline points=\"17 18 23 18 23 12\"></polyline>","trending-up":"<polyline points=\"23 6 13.5 15.5 8.5 10.5 1 18\"></polyline><polyline points=\"17 6 23 6 23 12\"></polyline>","triangle":"<path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path>","truck":"<rect x=\"1\" y=\"3\" width=\"15\" height=\"13\"></rect><polygon points=\"16 8 20 8 23 11 23 16 16 16 16 8\"></polygon><circle cx=\"5.5\" cy=\"18.5\" r=\"2.5\"></circle><circle cx=\"18.5\" cy=\"18.5\" r=\"2.5\"></circle>","tv":"<rect x=\"2\" y=\"7\" width=\"20\" height=\"15\" rx=\"2\" ry=\"2\"></rect><polyline points=\"17 2 12 7 7 2\"></polyline>","twitch":"<path d=\"M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7\"></path>","twitter":"<path d=\"M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z\"></path>","type":"<polyline points=\"4 7 4 4 20 4 20 7\"></polyline><line x1=\"9\" y1=\"20\" x2=\"15\" y2=\"20\"></line><line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"20\"></line>","umbrella":"<path d=\"M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7\"></path>","underline":"<path d=\"M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3\"></path><line x1=\"4\" y1=\"21\" x2=\"20\" y2=\"21\"></line>","unlock":"<rect x=\"3\" y=\"11\" width=\"18\" height=\"11\" rx=\"2\" ry=\"2\"></rect><path d=\"M7 11V7a5 5 0 0 1 9.9-1\"></path>","upload-cloud":"<polyline points=\"16 16 12 12 8 16\"></polyline><line x1=\"12\" y1=\"12\" x2=\"12\" y2=\"21\"></line><path d=\"M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3\"></path><polyline points=\"16 16 12 12 8 16\"></polyline>","upload":"<path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path><polyline points=\"17 8 12 3 7 8\"></polyline><line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"></line>","user-check":"<path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle><polyline points=\"17 11 19 13 23 9\"></polyline>","user-minus":"<path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle><line x1=\"23\" y1=\"11\" x2=\"17\" y2=\"11\"></line>","user-plus":"<path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle><line x1=\"20\" y1=\"8\" x2=\"20\" y2=\"14\"></line><line x1=\"23\" y1=\"11\" x2=\"17\" y2=\"11\"></line>","user-x":"<path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle><line x1=\"18\" y1=\"8\" x2=\"23\" y2=\"13\"></line><line x1=\"23\" y1=\"8\" x2=\"18\" y2=\"13\"></line>","user":"<path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\"></path><circle cx=\"12\" cy=\"7\" r=\"4\"></circle>","users":"<path d=\"M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path><circle cx=\"9\" cy=\"7\" r=\"4\"></circle><path d=\"M23 21v-2a4 4 0 0 0-3-3.87\"></path><path d=\"M16 3.13a4 4 0 0 1 0 7.75\"></path>","video-off":"<path d=\"M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10\"></path><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>","video":"<polygon points=\"23 7 16 12 23 17 23 7\"></polygon><rect x=\"1\" y=\"5\" width=\"15\" height=\"14\" rx=\"2\" ry=\"2\"></rect>","voicemail":"<circle cx=\"5.5\" cy=\"11.5\" r=\"4.5\"></circle><circle cx=\"18.5\" cy=\"11.5\" r=\"4.5\"></circle><line x1=\"5.5\" y1=\"16\" x2=\"18.5\" y2=\"16\"></line>","volume-1":"<polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon><path d=\"M15.54 8.46a5 5 0 0 1 0 7.07\"></path>","volume-2":"<polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon><path d=\"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07\"></path>","volume-x":"<polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon><line x1=\"23\" y1=\"9\" x2=\"17\" y2=\"15\"></line><line x1=\"17\" y1=\"9\" x2=\"23\" y2=\"15\"></line>","volume":"<polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon>","watch":"<circle cx=\"12\" cy=\"12\" r=\"7\"></circle><polyline points=\"12 9 12 12 13.5 13.5\"></polyline><path d=\"M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83\"></path>","wifi-off":"<line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line><path d=\"M16.72 11.06A10.94 10.94 0 0 1 19 12.55\"></path><path d=\"M5 12.55a10.94 10.94 0 0 1 5.17-2.39\"></path><path d=\"M10.71 5.05A16 16 0 0 1 22.58 9\"></path><path d=\"M1.42 9a15.91 15.91 0 0 1 4.7-2.88\"></path><path d=\"M8.53 16.11a6 6 0 0 1 6.95 0\"></path><line x1=\"12\" y1=\"20\" x2=\"12.01\" y2=\"20\"></line>","wifi":"<path d=\"M5 12.55a11 11 0 0 1 14.08 0\"></path><path d=\"M1.42 9a16 16 0 0 1 21.16 0\"></path><path d=\"M8.53 16.11a6 6 0 0 1 6.95 0\"></path><line x1=\"12\" y1=\"20\" x2=\"12.01\" y2=\"20\"></line>","wind":"<path d=\"M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2\"></path>","x-circle":"<circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>","x-octagon":"<polygon points=\"7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2\"></polygon><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line>","x-square":"<rect x=\"3\" y=\"3\" width=\"18\" height=\"18\" rx=\"2\" ry=\"2\"></rect><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line>","x":"<line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>","youtube":"<path d=\"M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z\"></path><polygon points=\"9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02\"></polygon>","zap-off":"<polyline points=\"12.41 6.75 13 2 10.57 4.92\"></polyline><polyline points=\"18.57 12.91 21 10 15.66 10\"></polyline><polyline points=\"8 8 3 14 12 14 11 22 16 16\"></polyline><line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"></line>","zap":"<polygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\"></polygon>","zoom-in":"<circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line><line x1=\"11\" y1=\"8\" x2=\"11\" y2=\"14\"></line><line x1=\"8\" y1=\"11\" x2=\"14\" y2=\"11\"></line>","zoom-out":"<circle cx=\"11\" cy=\"11\" r=\"8\"></circle><line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line><line x1=\"8\" y1=\"11\" x2=\"14\" y2=\"11\"></line>"};

/***/ }),

/***/ "./node_modules/classnames/dedupe.js":
/*!*******************************************!*\
  !*** ./node_modules/classnames/dedupe.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var classNames = (function () {
		// don't inherit from Object so we can skip hasOwnProperty check later
		// http://stackoverflow.com/questions/15518328/creating-js-object-with-object-createnull#answer-21079232
		function StorageObject() {}
		StorageObject.prototype = Object.create(null);

		function _parseArray (resultSet, array) {
			var length = array.length;

			for (var i = 0; i < length; ++i) {
				_parse(resultSet, array[i]);
			}
		}

		var hasOwn = {}.hasOwnProperty;

		function _parseNumber (resultSet, num) {
			resultSet[num] = true;
		}

		function _parseObject (resultSet, object) {
			for (var k in object) {
				if (hasOwn.call(object, k)) {
					// set value to false instead of deleting it to avoid changing object structure
					// https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/#de-referencing-misconceptions
					resultSet[k] = !!object[k];
				}
			}
		}

		var SPACE = /\s+/;
		function _parseString (resultSet, str) {
			var array = str.split(SPACE);
			var length = array.length;

			for (var i = 0; i < length; ++i) {
				resultSet[array[i]] = true;
			}
		}

		function _parse (resultSet, arg) {
			if (!arg) return;
			var argType = typeof arg;

			// 'foo bar'
			if (argType === 'string') {
				_parseString(resultSet, arg);

			// ['foo', 'bar', ...]
			} else if (Array.isArray(arg)) {
				_parseArray(resultSet, arg);

			// { 'foo': true, ... }
			} else if (argType === 'object') {
				_parseObject(resultSet, arg);

			// '130'
			} else if (argType === 'number') {
				_parseNumber(resultSet, arg);
			}
		}

		function _classNames () {
			// don't leak arguments
			// https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments
			var len = arguments.length;
			var args = Array(len);
			for (var i = 0; i < len; i++) {
				args[i] = arguments[i];
			}

			var classSet = new StorageObject();
			_parseArray(classSet, args);

			var list = [];

			for (var k in classSet) {
				if (classSet[k]) {
					list.push(k);
				}
			}

			return list.join(' ');
		}

		return _classNames;
	})();

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
}());


/***/ }),

/***/ "./node_modules/core-js/es/array/from.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/es/array/from.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! ../../modules/es.array.from */ "./node_modules/core-js/modules/es.array.from.js");
var path = __webpack_require__(/*! ../../internals/path */ "./node_modules/core-js/internals/path.js");

module.exports = path.Array.from;


/***/ }),

/***/ "./node_modules/core-js/internals/a-function.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-function.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-from.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-from.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var bind = __webpack_require__(/*! ../internals/bind-context */ "./node_modules/core-js/internals/bind-context.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

// `Array.from` method
// https://tc39.github.io/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var index = 0;
  var iteratorMethod = getIteratorMethod(O);
  var length, result, step, iterator;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    result = new C();
    for (;!(step = iterator.next()).done; index++) {
      createProperty(result, index, mapping
        ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)
        : step.value
      );
    }
  } else {
    length = toLength(O.length);
    result = new C(length);
    for (;length > index; index++) {
      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-includes.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
// false -> Array#indexOf
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
// true  -> Array#includes
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/bind-context.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/bind-context.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(/*! ../internals/a-function */ "./node_modules/core-js/internals/a-function.js");

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    var returnMethod = iterator['return'];
    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
    throw error;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/check-correctness-of-iteration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var IteratorPrototype = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype;
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/create-property.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js");

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          hide(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    hide(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/internals/descriptors.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// Thank's IE8 for his funny defineProperty
module.exports = !fails(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var exist = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return exist ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "./node_modules/core-js/internals/export.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "./node_modules/core-js/internals/redefine.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      hide(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fails.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/function-to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");

module.exports = shared('native-function-to-string', Function.toString);


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator-method.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/internals/global.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var O = 'object';
var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == O && globalThis) ||
  check(typeof window == O && window) ||
  check(typeof self == O && self) ||
  check(typeof global == O && global) ||
  // eslint-disable-next-line no-new-func
  Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")));

/***/ }),

/***/ "./node_modules/core-js/internals/has.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/has.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/hide.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/hide.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/internals/html.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

var document = global.document;

module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

var split = ''.split;

module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "./node_modules/core-js/internals/internal-state.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var objectHas = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    hide(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array-iterator-method.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-forced.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "./node_modules/core-js/internals/is-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-pure.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/internals/iterators-core.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/native-symbol.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});


/***/ }),

/***/ "./node_modules/core-js/internals/native-weak-map.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var nativeFunctionToString = __webpack_require__(/*! ../internals/function-to-string */ "./node_modules/core-js/internals/function-to-string.js");

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));


/***/ }),

/***/ "./node_modules/core-js/internals/object-create.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var defineProperties = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var IE_PROTO = sharedKey('IE_PROTO');

var PROTOTYPE = 'prototype';
var Empty = function () { /* empty */ };

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var length = enumBugKeys.length;
  var lt = '<';
  var script = 'script';
  var gt = '>';
  var js = 'java' + script + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  iframe.src = String(js);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
  return createDict();
};

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : defineProperties(result, Properties);
};

hiddenKeys[IE_PROTO] = true;


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-properties.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");

module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var i = 0;
  var key;
  while (length > i) definePropertyModule.f(O, key = keys[i++], Properties[key]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");

var nativeDefineProperty = Object.defineProperty;

exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var arrayIncludes = __webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var arrayIndexOf = arrayIncludes(false);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var validateSetPrototypeOfArguments = __webpack_require__(/*! ../internals/validate-set-prototype-of-arguments */ "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js");

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var correctSetter = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    correctSetter = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    validateSetPrototypeOfArguments(O, proto);
    if (correctSetter) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "./node_modules/core-js/internals/own-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

var Reflect = global.Reflect;

// all object keys, includes non-enumerable and symbols
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/internals/path.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");


/***/ }),

/***/ "./node_modules/core-js/internals/redefine.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/redefine.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var nativeFunctionToString = __webpack_require__(/*! ../internals/function-to-string */ "./node_modules/core-js/internals/function-to-string.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(nativeFunctionToString).split('toString');

shared('inspectSource', function (it) {
  return nativeFunctionToString.call(it);
});

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else hide(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-global.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/set-global.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var hide = __webpack_require__(/*! ../internals/hide */ "./node_modules/core-js/internals/hide.js");

module.exports = function (key, value) {
  try {
    hide(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-to-string-tag.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f;
var has = __webpack_require__(/*! ../internals/has */ "./node_modules/core-js/internals/has.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-key.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "./node_modules/core-js/internals/set-global.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.1.3',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/internals/string-at.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/string-at.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// CONVERT_TO_STRING: true  -> String#at
// CONVERT_TO_STRING: false -> String#codePointAt
module.exports = function (that, pos, CONVERT_TO_STRING) {
  var S = String(requireObjectCoercible(that));
  var position = toInteger(pos);
  var size = S.length;
  var first, second;
  if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
  first = S.charCodeAt(position);
  return first < 0xD800 || first > 0xDBFF || position + 1 === size
    || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
      ? CONVERT_TO_STRING ? S.charAt(position) : first
      : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-integer.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-length.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ../internals/to-integer */ "./node_modules/core-js/internals/to-integer.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-primitive.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

// 7.1.1 ToPrimitive(input [, PreferredType])
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/internals/uid.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + postfix).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/internals/validate-set-prototype-of-arguments.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/core-js/internals/validate-set-prototype-of-arguments.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

module.exports = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) {
    throw TypeError("Can't set " + String(proto) + ' as a prototype');
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

var Symbol = global.Symbol;
var store = shared('wks');

module.exports = function (name) {
  return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name]
    || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.from.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.from.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var from = __webpack_require__(/*! ../internals/array-from */ "./node_modules/core-js/internals/array-from.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.github.io/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var codePointAt = __webpack_require__(/*! ../internals/string-at */ "./node_modules/core-js/internals/string-at.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = codePointAt(string, index, true);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/default-attrs.json":
/*!********************************!*\
  !*** ./src/default-attrs.json ***!
  \********************************/
/*! exports provided: xmlns, width, height, viewBox, fill, stroke, stroke-width, stroke-linecap, stroke-linejoin, default */
/***/ (function(module) {

module.exports = {"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","stroke-width":2,"stroke-linecap":"round","stroke-linejoin":"round"};

/***/ }),

/***/ "./src/icon.js":
/*!*********************!*\
  !*** ./src/icon.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dedupe = __webpack_require__(/*! classnames/dedupe */ "./node_modules/classnames/dedupe.js");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _defaultAttrs = __webpack_require__(/*! ./default-attrs.json */ "./src/default-attrs.json");

var _defaultAttrs2 = _interopRequireDefault(_defaultAttrs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Icon = function () {
  function Icon(name, contents) {
    var tags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    _classCallCheck(this, Icon);

    this.name = name;
    this.contents = contents;
    this.tags = tags;
    this.attrs = _extends({}, _defaultAttrs2.default, { class: 'feather feather-' + name });
  }

  /**
   * Create an SVG string.
   * @param {Object} attrs
   * @returns {string}
   */


  _createClass(Icon, [{
    key: 'toSvg',
    value: function toSvg() {
      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var combinedAttrs = _extends({}, this.attrs, attrs, { class: (0, _dedupe2.default)(this.attrs.class, attrs.class) });

      return '<svg ' + attrsToString(combinedAttrs) + '>' + this.contents + '</svg>';
    }

    /**
     * Return string representation of an `Icon`.
     *
     * Added for backward compatibility. If old code expects `feather.icons.<name>`
     * to be a string, `toString()` will get implicitly called.
     *
     * @returns {string}
     */

  }, {
    key: 'toString',
    value: function toString() {
      return this.contents;
    }
  }]);

  return Icon;
}();

/**
 * Convert attributes object to string of HTML attributes.
 * @param {Object} attrs
 * @returns {string}
 */


function attrsToString(attrs) {
  return Object.keys(attrs).map(function (key) {
    return key + '="' + attrs[key] + '"';
  }).join(' ');
}

exports.default = Icon;

/***/ }),

/***/ "./src/icons.js":
/*!**********************!*\
  !*** ./src/icons.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _icon = __webpack_require__(/*! ./icon */ "./src/icon.js");

var _icon2 = _interopRequireDefault(_icon);

var _icons = __webpack_require__(/*! ../dist/icons.json */ "./dist/icons.json");

var _icons2 = _interopRequireDefault(_icons);

var _tags = __webpack_require__(/*! ./tags.json */ "./src/tags.json");

var _tags2 = _interopRequireDefault(_tags);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Object.keys(_icons2.default).map(function (key) {
  return new _icon2.default(key, _icons2.default[key], _tags2.default[key]);
}).reduce(function (object, icon) {
  object[icon.name] = icon;
  return object;
}, {});

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var _icons = __webpack_require__(/*! ./icons */ "./src/icons.js");

var _icons2 = _interopRequireDefault(_icons);

var _toSvg = __webpack_require__(/*! ./to-svg */ "./src/to-svg.js");

var _toSvg2 = _interopRequireDefault(_toSvg);

var _replace = __webpack_require__(/*! ./replace */ "./src/replace.js");

var _replace2 = _interopRequireDefault(_replace);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = { icons: _icons2.default, toSvg: _toSvg2.default, replace: _replace2.default };

/***/ }),

/***/ "./src/replace.js":
/*!************************!*\
  !*** ./src/replace.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-env browser */


var _dedupe = __webpack_require__(/*! classnames/dedupe */ "./node_modules/classnames/dedupe.js");

var _dedupe2 = _interopRequireDefault(_dedupe);

var _icons = __webpack_require__(/*! ./icons */ "./src/icons.js");

var _icons2 = _interopRequireDefault(_icons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Replace all HTML elements that have a `data-feather` attribute with SVG markup
 * corresponding to the element's `data-feather` attribute value.
 * @param {Object} attrs
 */
function replace() {
  var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (typeof document === 'undefined') {
    throw new Error('`feather.replace()` only works in a browser environment.');
  }

  var elementsToReplace = document.querySelectorAll('[data-feather]');

  Array.from(elementsToReplace).forEach(function (element) {
    return replaceElement(element, attrs);
  });
}

/**
 * Replace a single HTML element with SVG markup
 * corresponding to the element's `data-feather` attribute value.
 * @param {HTMLElement} element
 * @param {Object} attrs
 */
function replaceElement(element) {
  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var elementAttrs = getAttrs(element);
  var name = elementAttrs['data-feather'];
  delete elementAttrs['data-feather'];

  var svgString = _icons2.default[name].toSvg(_extends({}, attrs, elementAttrs, { class: (0, _dedupe2.default)(attrs.class, elementAttrs.class) }));
  var svgDocument = new DOMParser().parseFromString(svgString, 'image/svg+xml');
  var svgElement = svgDocument.querySelector('svg');

  element.parentNode.replaceChild(svgElement, element);
}

/**
 * Get the attributes of an HTML element.
 * @param {HTMLElement} element
 * @returns {Object}
 */
function getAttrs(element) {
  return Array.from(element.attributes).reduce(function (attrs, attr) {
    attrs[attr.name] = attr.value;
    return attrs;
  }, {});
}

exports.default = replace;

/***/ }),

/***/ "./src/tags.json":
/*!***********************!*\
  !*** ./src/tags.json ***!
  \***********************/
/*! exports provided: activity, airplay, alert-circle, alert-octagon, alert-triangle, align-center, align-justify, align-left, align-right, anchor, archive, at-sign, award, aperture, bar-chart, bar-chart-2, battery, battery-charging, bell, bell-off, bluetooth, book-open, book, bookmark, box, briefcase, calendar, camera, cast, circle, clipboard, clock, cloud-drizzle, cloud-lightning, cloud-rain, cloud-snow, cloud, codepen, codesandbox, code, coffee, columns, command, compass, copy, corner-down-left, corner-down-right, corner-left-down, corner-left-up, corner-right-down, corner-right-up, corner-up-left, corner-up-right, cpu, credit-card, crop, crosshair, database, delete, disc, dollar-sign, droplet, edit, edit-2, edit-3, eye, eye-off, external-link, facebook, fast-forward, figma, file-minus, file-plus, file-text, film, filter, flag, folder-minus, folder-plus, folder, framer, frown, gift, git-branch, git-commit, git-merge, git-pull-request, github, gitlab, globe, hard-drive, hash, headphones, heart, help-circle, hexagon, home, image, inbox, instagram, key, layers, layout, life-bouy, link, link-2, linkedin, list, lock, log-in, log-out, mail, map-pin, map, maximize, maximize-2, meh, menu, message-circle, message-square, mic-off, mic, minimize, minimize-2, minus, monitor, moon, more-horizontal, more-vertical, mouse-pointer, move, music, navigation, navigation-2, octagon, package, paperclip, pause, pause-circle, pen-tool, percent, phone-call, phone-forwarded, phone-incoming, phone-missed, phone-off, phone-outgoing, phone, play, pie-chart, play-circle, plus, plus-circle, plus-square, pocket, power, printer, radio, refresh-cw, refresh-ccw, repeat, rewind, rotate-ccw, rotate-cw, rss, save, scissors, search, send, settings, share-2, shield, shield-off, shopping-bag, shopping-cart, shuffle, skip-back, skip-forward, slack, slash, sliders, smartphone, smile, speaker, star, stop-circle, sun, sunrise, sunset, tablet, tag, target, terminal, thermometer, thumbs-down, thumbs-up, toggle-left, toggle-right, tool, trash, trash-2, triangle, truck, tv, twitch, twitter, type, umbrella, unlock, user-check, user-minus, user-plus, user-x, user, users, video-off, video, voicemail, volume, volume-1, volume-2, volume-x, watch, wifi-off, wifi, wind, x-circle, x-octagon, x-square, x, youtube, zap-off, zap, zoom-in, zoom-out, default */
/***/ (function(module) {

module.exports = {"activity":["pulse","health","action","motion"],"airplay":["stream","cast","mirroring"],"alert-circle":["warning","alert","danger"],"alert-octagon":["warning","alert","danger"],"alert-triangle":["warning","alert","danger"],"align-center":["text alignment","center"],"align-justify":["text alignment","justified"],"align-left":["text alignment","left"],"align-right":["text alignment","right"],"anchor":[],"archive":["index","box"],"at-sign":["mention","at","email","message"],"award":["achievement","badge"],"aperture":["camera","photo"],"bar-chart":["statistics","diagram","graph"],"bar-chart-2":["statistics","diagram","graph"],"battery":["power","electricity"],"battery-charging":["power","electricity"],"bell":["alarm","notification","sound"],"bell-off":["alarm","notification","silent"],"bluetooth":["wireless"],"book-open":["read","library"],"book":["read","dictionary","booklet","magazine","library"],"bookmark":["read","clip","marker","tag"],"box":["cube"],"briefcase":["work","bag","baggage","folder"],"calendar":["date"],"camera":["photo"],"cast":["chromecast","airplay"],"circle":["off","zero","record"],"clipboard":["copy"],"clock":["time","watch","alarm"],"cloud-drizzle":["weather","shower"],"cloud-lightning":["weather","bolt"],"cloud-rain":["weather"],"cloud-snow":["weather","blizzard"],"cloud":["weather"],"codepen":["logo"],"codesandbox":["logo"],"code":["source","programming"],"coffee":["drink","cup","mug","tea","cafe","hot","beverage"],"columns":["layout"],"command":["keyboard","cmd","terminal","prompt"],"compass":["navigation","safari","travel","direction"],"copy":["clone","duplicate"],"corner-down-left":["arrow","return"],"corner-down-right":["arrow"],"corner-left-down":["arrow"],"corner-left-up":["arrow"],"corner-right-down":["arrow"],"corner-right-up":["arrow"],"corner-up-left":["arrow"],"corner-up-right":["arrow"],"cpu":["processor","technology"],"credit-card":["purchase","payment","cc"],"crop":["photo","image"],"crosshair":["aim","target"],"database":["storage","memory"],"delete":["remove"],"disc":["album","cd","dvd","music"],"dollar-sign":["currency","money","payment"],"droplet":["water"],"edit":["pencil","change"],"edit-2":["pencil","change"],"edit-3":["pencil","change"],"eye":["view","watch"],"eye-off":["view","watch","hide","hidden"],"external-link":["outbound"],"facebook":["logo","social"],"fast-forward":["music"],"figma":["logo","design","tool"],"file-minus":["delete","remove","erase"],"file-plus":["add","create","new"],"file-text":["data","txt","pdf"],"film":["movie","video"],"filter":["funnel","hopper"],"flag":["report"],"folder-minus":["directory"],"folder-plus":["directory"],"folder":["directory"],"framer":["logo","design","tool"],"frown":["emoji","face","bad","sad","emotion"],"gift":["present","box","birthday","party"],"git-branch":["code","version control"],"git-commit":["code","version control"],"git-merge":["code","version control"],"git-pull-request":["code","version control"],"github":["logo","version control"],"gitlab":["logo","version control"],"globe":["world","browser","language","translate"],"hard-drive":["computer","server","memory","data"],"hash":["hashtag","number","pound"],"headphones":["music","audio","sound"],"heart":["like","love","emotion"],"help-circle":["question mark"],"hexagon":["shape","node.js","logo"],"home":["house","living"],"image":["picture"],"inbox":["email"],"instagram":["logo","camera"],"key":["password","login","authentication","secure"],"layers":["stack"],"layout":["window","webpage"],"life-bouy":["help","life ring","support"],"link":["chain","url"],"link-2":["chain","url"],"linkedin":["logo","social media"],"list":["options"],"lock":["security","password","secure"],"log-in":["sign in","arrow","enter"],"log-out":["sign out","arrow","exit"],"mail":["email","message"],"map-pin":["location","navigation","travel","marker"],"map":["location","navigation","travel"],"maximize":["fullscreen"],"maximize-2":["fullscreen","arrows","expand"],"meh":["emoji","face","neutral","emotion"],"menu":["bars","navigation","hamburger"],"message-circle":["comment","chat"],"message-square":["comment","chat"],"mic-off":["record","sound","mute"],"mic":["record","sound","listen"],"minimize":["exit fullscreen","close"],"minimize-2":["exit fullscreen","arrows","close"],"minus":["subtract"],"monitor":["tv","screen","display"],"moon":["dark","night"],"more-horizontal":["ellipsis"],"more-vertical":["ellipsis"],"mouse-pointer":["arrow","cursor"],"move":["arrows"],"music":["note"],"navigation":["location","travel"],"navigation-2":["location","travel"],"octagon":["stop"],"package":["box","container"],"paperclip":["attachment"],"pause":["music","stop"],"pause-circle":["music","audio","stop"],"pen-tool":["vector","drawing"],"percent":["discount"],"phone-call":["ring"],"phone-forwarded":["call"],"phone-incoming":["call"],"phone-missed":["call"],"phone-off":["call","mute"],"phone-outgoing":["call"],"phone":["call"],"play":["music","start"],"pie-chart":["statistics","diagram"],"play-circle":["music","start"],"plus":["add","new"],"plus-circle":["add","new"],"plus-square":["add","new"],"pocket":["logo","save"],"power":["on","off"],"printer":["fax","office","device"],"radio":["signal"],"refresh-cw":["synchronise","arrows"],"refresh-ccw":["arrows"],"repeat":["loop","arrows"],"rewind":["music"],"rotate-ccw":["arrow"],"rotate-cw":["arrow"],"rss":["feed","subscribe"],"save":["floppy disk"],"scissors":["cut"],"search":["find","magnifier","magnifying glass"],"send":["message","mail","email","paper airplane","paper aeroplane"],"settings":["cog","edit","gear","preferences"],"share-2":["network","connections"],"shield":["security","secure"],"shield-off":["security","insecure"],"shopping-bag":["ecommerce","cart","purchase","store"],"shopping-cart":["ecommerce","cart","purchase","store"],"shuffle":["music"],"skip-back":["music"],"skip-forward":["music"],"slack":["logo"],"slash":["ban","no"],"sliders":["settings","controls"],"smartphone":["cellphone","device"],"smile":["emoji","face","happy","good","emotion"],"speaker":["audio","music"],"star":["bookmark","favorite","like"],"stop-circle":["media","music"],"sun":["brightness","weather","light"],"sunrise":["weather","time","morning","day"],"sunset":["weather","time","evening","night"],"tablet":["device"],"tag":["label"],"target":["logo","bullseye"],"terminal":["code","command line","prompt"],"thermometer":["temperature","celsius","fahrenheit","weather"],"thumbs-down":["dislike","bad","emotion"],"thumbs-up":["like","good","emotion"],"toggle-left":["on","off","switch"],"toggle-right":["on","off","switch"],"tool":["settings","spanner"],"trash":["garbage","delete","remove","bin"],"trash-2":["garbage","delete","remove","bin"],"triangle":["delta"],"truck":["delivery","van","shipping","transport","lorry"],"tv":["television","stream"],"twitch":["logo"],"twitter":["logo","social"],"type":["text"],"umbrella":["rain","weather"],"unlock":["security"],"user-check":["followed","subscribed"],"user-minus":["delete","remove","unfollow","unsubscribe"],"user-plus":["new","add","create","follow","subscribe"],"user-x":["delete","remove","unfollow","unsubscribe","unavailable"],"user":["person","account"],"users":["group"],"video-off":["camera","movie","film"],"video":["camera","movie","film"],"voicemail":["phone"],"volume":["music","sound","mute"],"volume-1":["music","sound"],"volume-2":["music","sound"],"volume-x":["music","sound","mute"],"watch":["clock","time"],"wifi-off":["disabled"],"wifi":["connection","signal","wireless"],"wind":["weather","air"],"x-circle":["cancel","close","delete","remove","times","clear"],"x-octagon":["delete","stop","alert","warning","times","clear"],"x-square":["cancel","close","delete","remove","times","clear"],"x":["cancel","close","delete","remove","times","clear"],"youtube":["logo","video","play"],"zap-off":["flash","camera","lightning"],"zap":["flash","camera","lightning"],"zoom-in":["magnifying glass"],"zoom-out":["magnifying glass"]};

/***/ }),

/***/ "./src/to-svg.js":
/*!***********************!*\
  !*** ./src/to-svg.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _icons = __webpack_require__(/*! ./icons */ "./src/icons.js");

var _icons2 = _interopRequireDefault(_icons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Create an SVG string.
 * @deprecated
 * @param {string} name
 * @param {Object} attrs
 * @returns {string}
 */
function toSvg(name) {
  var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  console.warn('feather.toSvg() is deprecated. Please use feather.icons[name].toSvg() instead.');

  if (!name) {
    throw new Error('The required `key` (icon name) parameter is missing.');
  }

  if (!_icons2.default[name]) {
    throw new Error('No icon matching \'' + name + '\'. See the complete list of icons at https://feathericons.com');
  }

  return _icons2.default[name].toSvg(attrs);
}

exports.default = toSvg;

/***/ }),

/***/ 0:
/*!**************************************************!*\
  !*** multi core-js/es/array/from ./src/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! core-js/es/array/from */"./node_modules/core-js/es/array/from.js");
module.exports = __webpack_require__(/*! /home/travis/build/feathericons/feather/src/index.js */"./src/index.js");


/***/ })

/******/ });
});

});

const VIEW_TYPE_SHORTCUTS_ANALYZER = 'keyboard-shortcuts-visualization';
const kb_layout_ansi104eng = [
    [
        'Esc',
        { x: 1 },
        'F1',
        'F2',
        'F3',
        'F4',
        { x: 0.5 },
        'F5',
        'F6',
        'F7',
        'F8',
        { x: 0.5 },
        'F9',
        'F10',
        'F11',
        'F12',
        { x: 0.25 },
        'PrtSc',
        'Scroll Lock',
        'Pause<br>Break',
    ],
    [
        { y: 0.5 },
        '~<br>`',
        '!<br>1',
        '@<br>2',
        '#<br>3',
        '$<br>4',
        '%<br>5',
        '^<br>6',
        '&<br>7',
        '*<br>8',
        '(<br>9',
        ')<br>0',
        '_<br>-',
        '+<br>=',
        { w: 2 },
        'Backspace',
        { x: 0.25 },
        'Insert',
        'Home',
        'PgUp',
        { x: 0.25 },
        'Num Lock',
        '/',
        '*',
        '-',
    ],
    [
        { w: 1.5 },
        'Tab',
        'Q',
        'W',
        'E',
        'R',
        'T',
        'Y',
        'U',
        'I',
        'O',
        'P',
        '{<br>[',
        '}<br>]',
        { w: 1.5 },
        '|<br>\\',
        { x: 0.25 },
        'Delete',
        'End',
        'PgDn',
        { x: 0.25 },
        '7<br>Home',
        '8<br>↑',
        '9<br>PgUp',
        { h: 2 },
        '+',
    ],
    [
        { w: 1.75 },
        'Caps Lock',
        'A',
        'S',
        'D',
        'F',
        'G',
        'H',
        'J',
        'K',
        'L',
        ':<br>;',
        '"<br>\'',
        { w: 2.25 },
        'Enter',
        { x: 3.5 },
        '4<br>←',
        '5',
        '6<br>→',
    ],
    [
        { w: 2.25 },
        'Shift',
        'Z',
        'X',
        'C',
        'V',
        'B',
        'N',
        'M',
        '<<br>,',
        '><br>.',
        '?<br>/',
        { w: 2.75 },
        'Shift',
        { x: 1.25 },
        '↑',
        { x: 1.25 },
        '1<br>End',
        '2<br>↓',
        '3<br>PgDn',
        { h: 2 },
        'Enter',
    ],
    [
        { w: 1.25 },
        'Ctrl',
        { w: 1.25 },
        'Win',
        { w: 1.25 },
        'Alt',
        { a: 7, w: 6.25 },
        'Space',
        { a: 4, w: 1.25 },
        'Alt',
        { w: 1.25 },
        'Win',
        { w: 1.25 },
        'Menu',
        { w: 1.25 },
        'Ctrl',
        { x: 0.25 },
        '←',
        '↓',
        '→',
        { x: 0.25, w: 2 },
        '0<br>Ins',
        '.<br>Del',
    ],
];
// export const keyboard_svg = `<svg width="100%" height="auto" viewBox="0 0 1152 449" fill="none" xmlns="http://www.w3.org/2000/svg">
// <svg width="1152" height="448" viewBox="0 0 1152 448" fill="none" xmlns="http://www.w3.org/2000/svg">
// <g id="keyboard-manager-">
// <g id="Extra Keys">
// <g id="btn_home.functional-buttons">
// <rect x="1080" y="88" width="68" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white" d="M1097.7 122H1099.39V118.695H1102.82V122H1104.51V114H1102.82V117.301H1099.39V114H1097.7V122ZM1108.58 122.117C1110.4 122.117 1111.54 120.871 1111.54 119.023C1111.54 117.164 1110.4 115.922 1108.58 115.922C1106.76 115.922 1105.63 117.164 1105.63 119.023C1105.63 120.871 1106.76 122.117 1108.58 122.117ZM1108.59 120.828C1107.75 120.828 1107.32 120.059 1107.32 119.012C1107.32 117.965 1107.75 117.191 1108.59 117.191C1109.41 117.191 1109.84 117.965 1109.84 119.012C1109.84 120.059 1109.41 120.828 1108.59 120.828ZM1112.62 122H1114.28V118.398C1114.28 117.734 1114.7 117.293 1115.26 117.293C1115.81 117.293 1116.17 117.668 1116.17 118.258V122H1117.79V118.336C1117.79 117.715 1118.14 117.293 1118.75 117.293C1119.28 117.293 1119.68 117.625 1119.68 118.293V122H1121.34V117.965C1121.34 116.664 1120.56 115.922 1119.45 115.922C1118.57 115.922 1117.88 116.371 1117.64 117.059H1117.57C1117.38 116.363 1116.77 115.922 1115.95 115.922C1115.14 115.922 1114.52 116.352 1114.27 117.059H1114.2V116H1112.62V122ZM1125.39 122.117C1126.87 122.117 1127.87 121.395 1128.1 120.281L1126.56 120.18C1126.4 120.637 1125.97 120.875 1125.41 120.875C1124.58 120.875 1124.05 120.324 1124.05 119.43V119.426H1128.14V118.969C1128.14 116.93 1126.9 115.922 1125.32 115.922C1123.55 115.922 1122.41 117.176 1122.41 119.027C1122.41 120.93 1123.54 122.117 1125.39 122.117ZM1124.05 118.395C1124.09 117.711 1124.61 117.164 1125.35 117.164C1126.07 117.164 1126.57 117.68 1126.57 118.395H1124.05Z" fill="white"/>
// </g>
// <g id="btn_end.functional-buttons">
// <rect x="1080" y="160" width="68" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_2" d="M1097.7 194H1103.1V192.605H1099.39V190.695H1102.81V189.301H1099.39V187.395H1103.09V186H1097.7V194ZM1106.06 190.531C1106.07 189.758 1106.53 189.305 1107.2 189.305C1107.87 189.305 1108.27 189.742 1108.27 190.477V194H1109.93V190.18C1109.93 188.781 1109.11 187.922 1107.86 187.922C1106.97 187.922 1106.33 188.359 1106.06 189.059H1105.99V188H1104.4V194H1106.06V190.531ZM1113.45 194.098C1114.42 194.098 1114.93 193.539 1115.16 193.039H1115.23V194H1116.87V186H1115.21V189.008H1115.16C1114.93 188.52 1114.45 187.922 1113.45 187.922C1112.13 187.922 1111.02 188.945 1111.02 191.008C1111.02 193.016 1112.09 194.098 1113.45 194.098ZM1113.98 192.773C1113.16 192.773 1112.72 192.047 1112.72 191C1112.72 189.961 1113.16 189.246 1113.98 189.246C1114.79 189.246 1115.24 189.93 1115.24 191C1115.24 192.07 1114.78 192.773 1113.98 192.773Z" fill="white"/>
// </g>
// <g id="btn_pgup.functional-buttons">
// <rect x="1080" y="232" width="68" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_3" d="M1097.7 259H1099.39V256.406H1100.81C1102.65 256.406 1103.72 255.309 1103.72 253.711C1103.72 252.121 1102.67 251 1100.85 251H1097.7V259ZM1099.39 255.051V252.383H1100.53C1101.5 252.383 1101.98 252.914 1101.98 253.711C1101.98 254.504 1101.5 255.051 1100.54 255.051H1099.39ZM1106.34 259.113C1107.22 259.113 1107.8 258.727 1108.09 258.168H1108.14V259H1109.72V254.953C1109.72 253.523 1108.5 252.922 1107.17 252.922C1105.73 252.922 1104.79 253.609 1104.56 254.703L1106.09 254.828C1106.21 254.43 1106.56 254.137 1107.16 254.137C1107.73 254.137 1108.05 254.422 1108.05 254.914V254.937C1108.05 255.324 1107.64 255.375 1106.6 255.477C1105.41 255.586 1104.34 255.984 1104.34 257.324C1104.34 258.512 1105.19 259.113 1106.34 259.113ZM1106.81 257.965C1106.3 257.965 1105.93 257.727 1105.93 257.27C1105.93 256.801 1106.32 256.57 1106.91 256.488C1107.27 256.437 1107.86 256.352 1108.06 256.219V256.855C1108.06 257.484 1107.54 257.965 1106.81 257.965ZM1113.71 261.375C1115.42 261.375 1116.64 260.594 1116.64 259.059V253H1114.99V254.008H1114.93C1114.71 253.52 1114.22 252.922 1113.21 252.922C1111.9 252.922 1110.78 253.945 1110.78 255.988C1110.78 257.984 1111.87 258.914 1113.22 258.914C1114.17 258.914 1114.71 258.434 1114.93 257.937H1115V259.035C1115 259.859 1114.47 260.18 1113.75 260.18C1113.01 260.18 1112.64 259.859 1112.51 259.496L1110.97 259.703C1111.17 260.648 1112.09 261.375 1113.71 261.375ZM1113.74 257.664C1112.93 257.664 1112.48 257.016 1112.48 255.98C1112.48 254.961 1112.92 254.246 1113.74 254.246C1114.55 254.246 1115.01 254.93 1115.01 255.98C1115.01 257.039 1114.55 257.664 1113.74 257.664ZM1120.7 259.117C1122.19 259.117 1123.19 258.395 1123.42 257.281L1121.88 257.18C1121.71 257.637 1121.28 257.875 1120.73 257.875C1119.9 257.875 1119.37 257.324 1119.37 256.43V256.426H1123.46V255.969C1123.46 253.93 1122.22 252.922 1120.64 252.922C1118.87 252.922 1117.72 254.176 1117.72 256.027C1117.72 257.93 1118.85 259.117 1120.7 259.117ZM1119.37 255.395C1119.4 254.711 1119.92 254.164 1120.66 254.164C1121.39 254.164 1121.89 254.68 1121.89 255.395H1119.37ZM1102.64 264V269.051C1102.64 269.965 1102 270.625 1101.01 270.625C1100.03 270.625 1099.39 269.965 1099.39 269.051V264H1097.7V269.195C1097.7 270.945 1099.02 272.113 1101.01 272.113C1103 272.113 1104.33 270.945 1104.33 269.195V264H1102.64ZM1105.69 274.25H1107.35V271.039H1107.4C1107.63 271.539 1108.14 272.098 1109.11 272.098C1110.47 272.098 1111.54 271.016 1111.54 269.008C1111.54 266.945 1110.43 265.922 1109.11 265.922C1108.11 265.922 1107.63 266.52 1107.4 267.008H1107.33V266H1105.69V274.25ZM1107.32 269C1107.32 267.93 1107.77 267.246 1108.58 267.246C1109.4 267.246 1109.84 267.961 1109.84 269C1109.84 270.047 1109.4 270.773 1108.58 270.773C1107.78 270.773 1107.32 270.07 1107.32 269Z" fill="white"/>
// </g>
// <g id="btn_pgdown.functional-buttons">
// <rect x="1080" y="304" width="68" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_4" d="M1097.7 331H1099.39V328.406H1100.81C1102.65 328.406 1103.72 327.309 1103.72 325.711C1103.72 324.121 1102.67 323 1100.85 323H1097.7V331ZM1099.39 327.051V324.383H1100.53C1101.5 324.383 1101.98 324.914 1101.98 325.711C1101.98 326.504 1101.5 327.051 1100.54 327.051H1099.39ZM1106.34 331.113C1107.22 331.113 1107.8 330.727 1108.09 330.168H1108.14V331H1109.72V326.953C1109.72 325.523 1108.5 324.922 1107.17 324.922C1105.73 324.922 1104.79 325.609 1104.56 326.703L1106.09 326.828C1106.21 326.43 1106.56 326.137 1107.16 326.137C1107.73 326.137 1108.05 326.422 1108.05 326.914V326.937C1108.05 327.324 1107.64 327.375 1106.6 327.477C1105.41 327.586 1104.34 327.984 1104.34 329.324C1104.34 330.512 1105.19 331.113 1106.34 331.113ZM1106.81 329.965C1106.3 329.965 1105.93 329.727 1105.93 329.27C1105.93 328.801 1106.32 328.57 1106.91 328.488C1107.27 328.437 1107.86 328.352 1108.06 328.219V328.855C1108.06 329.484 1107.54 329.965 1106.81 329.965ZM1113.71 333.375C1115.42 333.375 1116.64 332.594 1116.64 331.059V325H1114.99V326.008H1114.93C1114.71 325.52 1114.22 324.922 1113.21 324.922C1111.9 324.922 1110.78 325.945 1110.78 327.988C1110.78 329.984 1111.87 330.914 1113.22 330.914C1114.17 330.914 1114.71 330.434 1114.93 329.937H1115V331.035C1115 331.859 1114.47 332.18 1113.75 332.18C1113.01 332.18 1112.64 331.859 1112.51 331.496L1110.97 331.703C1111.17 332.648 1112.09 333.375 1113.71 333.375ZM1113.74 329.664C1112.93 329.664 1112.48 329.016 1112.48 327.98C1112.48 326.961 1112.92 326.246 1113.74 326.246C1114.55 326.246 1115.01 326.93 1115.01 327.98C1115.01 329.039 1114.55 329.664 1113.74 329.664ZM1120.7 331.117C1122.19 331.117 1123.19 330.395 1123.42 329.281L1121.88 329.18C1121.71 329.637 1121.28 329.875 1120.73 329.875C1119.9 329.875 1119.37 329.324 1119.37 328.43V328.426H1123.46V327.969C1123.46 325.93 1122.22 324.922 1120.64 324.922C1118.87 324.922 1117.72 326.176 1117.72 328.027C1117.72 329.93 1118.85 331.117 1120.7 331.117ZM1119.37 327.395C1119.4 326.711 1119.92 326.164 1120.66 326.164C1121.39 326.164 1121.89 326.68 1121.89 327.395H1119.37ZM1100.53 344C1102.97 344 1104.45 342.492 1104.45 339.992C1104.45 337.5 1102.97 336 1100.56 336H1097.7V344H1100.53ZM1099.39 342.551V337.449H1100.47C1101.97 337.449 1102.76 338.215 1102.76 339.992C1102.76 341.777 1101.97 342.551 1100.46 342.551H1099.39ZM1108.38 344.117C1110.2 344.117 1111.33 342.871 1111.33 341.023C1111.33 339.164 1110.2 337.922 1108.38 337.922C1106.56 337.922 1105.43 339.164 1105.43 341.023C1105.43 342.871 1106.56 344.117 1108.38 344.117ZM1108.39 342.828C1107.55 342.828 1107.12 342.059 1107.12 341.012C1107.12 339.965 1107.55 339.191 1108.39 339.191C1109.21 339.191 1109.64 339.965 1109.64 341.012C1109.64 342.059 1109.21 342.828 1108.39 342.828ZM1113.45 344H1115.2L1116.24 340.227H1116.31L1117.34 344H1119.1L1120.73 338H1119.05L1118.14 342.008H1118.09L1117.1 338H1115.45L1114.48 342.031H1114.43L1113.5 338H1111.81L1113.45 344ZM1123.28 340.531C1123.29 339.758 1123.75 339.305 1124.42 339.305C1125.09 339.305 1125.49 339.742 1125.49 340.477V344H1127.15V340.18C1127.15 338.781 1126.33 337.922 1125.08 337.922C1124.19 337.922 1123.55 338.359 1123.28 339.059H1123.21V338H1121.62V344H1123.28V340.531Z" fill="white"/>
// </g>
// </g>
// <g id="Alpha / Control Keys">
// <g id="R4">
// <g id="btn_backquote.color-regular">
// <rect x="4.00037" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color" d="M25.2383 127.532H27.0554L25.7695 124.785H23.397L25.2383 127.532Z" fill="#629990"/>
// <path id=".standart_symbol-color_2" d="M22.2983 111.662H24.2724C24.2482 110.659 24.6708 110.261 25.2383 110.261C25.6488 110.261 25.8661 110.448 26.3672 110.889C27.2124 111.631 27.8462 111.945 28.6431 111.945C30.2429 111.945 31.3356 110.684 31.2511 108.396H29.283C29.3072 109.368 28.8846 109.796 28.3171 109.796C27.8945 109.796 27.635 109.573 27.1701 109.168C26.2887 108.39 25.6669 108.118 24.9063 108.118C23.2703 108.118 22.2259 109.374 22.2983 111.662Z" fill="#629990"/>
// </g>
// <g id="btn_1.color-regular">
// <rect x="76.0004" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_3" d="M99.3814 125.636H96.9244L93.8636 127.574V129.892L96.695 128.118H96.7674V138H99.3814V125.636Z" fill="#629990"/>
// <path id=".standart_symbol-color_4" d="M97.0994 102.636H94.413L94.6545 111.293H96.864L97.0994 102.636ZM95.7592 115.157C96.532 115.157 97.2021 114.511 97.2081 113.708C97.2021 112.917 96.532 112.271 95.7592 112.271C94.9624 112.271 94.3043 112.917 94.3104 113.708C94.3043 114.511 94.9624 115.157 95.7592 115.157Z" fill="#629990"/>
// </g>
// <g id="btn_2.color-regular">
// <rect x="148" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_5" d="M166.002 138H174.816V135.863H169.625V135.778L171.43 134.01C173.971 131.691 174.653 130.532 174.653 129.126C174.653 126.983 172.903 125.467 170.252 125.467C167.657 125.467 165.876 127.019 165.882 129.446H168.363C168.357 128.262 169.105 127.538 170.234 127.538C171.321 127.538 172.13 128.214 172.13 129.301C172.13 130.285 171.526 130.961 170.403 132.042L166.002 136.116V138Z" fill="#629990"/>
// <path id=".standart_symbol-color_6" d="M174.122 118.562C175.843 118.562 177.527 118.157 178.282 117.729L177.684 115.978C177.038 116.244 175.65 116.594 174.261 116.594C170.325 116.594 168.188 114.505 168.176 110.69C168.188 107.237 170.156 104.635 174.17 104.635C177.074 104.635 179.773 106.023 179.767 109.814C179.773 112.175 179.338 113.249 178.505 113.249C178.088 113.249 177.835 112.935 177.829 112.374V106.482H175.939V107.158H175.855C175.65 106.627 174.37 106.126 173.011 106.331C171.4 106.566 169.661 107.888 169.649 110.69C169.661 113.533 171.279 114.988 173.186 115.091C174.557 115.169 175.788 114.596 176.072 113.865H176.145C176.277 114.698 176.833 115.266 178.233 115.163C180.841 115.018 181.837 112.917 181.831 109.953C181.837 105.661 179 102.691 174.201 102.691C169.009 102.691 166.033 105.908 166.027 110.762C166.033 115.694 168.985 118.562 174.122 118.562ZM173.844 113.104C172.269 113.104 171.738 111.897 171.732 110.617C171.738 109.241 172.492 108.341 173.832 108.341C175.36 108.341 175.819 109.15 175.825 110.599C175.843 112.241 175.324 113.104 173.844 113.104Z" fill="#629990"/>
// </g>
// <g id="btn_3.color-regular">
// <rect x="220" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_7" d="M242.572 138.169C245.349 138.169 247.336 136.642 247.33 134.529C247.336 132.989 246.358 131.891 244.54 131.661V131.565C245.923 131.317 246.877 130.339 246.871 128.951C246.877 127.001 245.168 125.467 242.609 125.467C240.073 125.467 238.165 126.952 238.129 129.089H240.635C240.665 128.148 241.528 127.538 242.597 127.538C243.653 127.538 244.359 128.178 244.353 129.108C244.359 130.08 243.532 130.738 242.343 130.738H241.19V132.657H242.343C243.744 132.657 244.619 133.358 244.613 134.354C244.619 135.338 243.774 136.014 242.578 136.014C241.425 136.014 240.562 135.41 240.514 134.505H237.882C237.924 136.666 239.856 138.169 242.572 138.169Z" fill="#629990"/>
// <path id=".standart_symbol-color_8" d="M242.711 115H244.643L245.144 111.933H246.835L247.154 110.001H245.464L245.851 107.635H247.541L247.867 105.703H246.17L246.672 102.636H244.74L244.239 105.703H241.824L242.325 102.636H240.393L239.892 105.703H238.208L237.882 107.635H239.572L239.186 110.001H237.495L237.175 111.933H238.866L238.365 115H240.297L240.798 111.933H243.212L242.711 115ZM241.118 110.001L241.504 107.635H243.919L243.532 110.001H241.118Z" fill="#629990"/>
// </g>
// <g id="btn_4.color-regular">
// <rect x="292" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_9" d="M309.815 135.827H315.75V138H318.249V135.827H319.782V133.732H318.249V125.636H314.977L309.815 133.768V135.827ZM315.798 133.732H312.447V133.635L315.701 128.486H315.798V133.732Z" fill="#629990"/>
// <path id=".standart_symbol-color_10" d="M313.884 116.545H315.309L315.321 115.151C317.935 114.952 319.45 113.563 319.456 111.468C319.45 109.41 317.899 108.317 315.75 107.834L315.393 107.75L315.418 104.731C316.221 104.918 316.71 105.431 316.782 106.192H319.287C319.257 104.194 317.766 102.763 315.442 102.51L315.454 101.091H314.029L314.017 102.498C311.657 102.727 309.99 104.152 310.002 106.21C309.996 108.033 311.282 109.078 313.371 109.579L313.951 109.724L313.92 112.917C312.936 112.73 312.272 112.126 312.206 111.118H309.677C309.737 113.557 311.337 114.922 313.896 115.145L313.884 116.545ZM315.345 112.917L315.369 110.098C316.305 110.394 316.812 110.774 316.818 111.462C316.812 112.193 316.257 112.736 315.345 112.917ZM313.969 107.381C313.214 107.122 312.671 106.729 312.683 106.035C312.683 105.389 313.142 104.888 313.993 104.713L313.969 107.381Z" fill="#629990"/>
// </g>
// <g id="btn_5.color-regular">
// <rect x="364" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_11" d="M386.518 138.169C389.271 138.169 391.142 136.376 391.136 133.877C391.142 131.51 389.488 129.808 387.261 129.808C386.174 129.808 385.238 130.261 384.804 130.87H384.731L385.051 127.773H390.454V125.636H382.896L382.31 132.156L384.635 132.573C385.015 132.06 385.751 131.74 386.482 131.74C387.726 131.746 388.619 132.645 388.619 133.943C388.619 135.229 387.744 136.116 386.518 136.116C385.48 136.116 384.641 135.464 384.58 134.505H382.045C382.093 136.642 383.958 138.169 386.518 138.169Z" fill="#629990"/>
// <path id=".standart_symbol-color_12" d="M388.77 112.682C388.776 114.167 389.724 115.429 391.493 115.429C393.243 115.429 394.221 114.167 394.215 112.682V112.03C394.221 110.533 393.267 109.283 391.493 109.283C389.748 109.283 388.776 110.545 388.77 112.03V112.682ZM382.425 105.607C382.431 107.092 383.379 108.341 385.142 108.341C386.898 108.341 387.876 107.104 387.87 105.607V104.955C387.876 103.457 386.923 102.208 385.142 102.208C383.415 102.208 382.431 103.457 382.425 104.955V105.607ZM383.017 115H384.592L393.092 102.636H391.517L383.017 115ZM390.527 112.03C390.533 111.438 390.768 110.828 391.493 110.828C392.253 110.828 392.452 111.438 392.446 112.03V112.682C392.452 113.273 392.229 113.871 391.493 113.871C390.756 113.871 390.533 113.255 390.527 112.682V112.03ZM384.194 104.955C384.2 104.381 384.423 103.753 385.142 103.753C385.902 103.753 386.108 104.363 386.102 104.955V105.607C386.108 106.198 385.878 106.796 385.142 106.796C384.429 106.796 384.2 106.198 384.194 105.607V104.955Z" fill="#629990"/>
// </g>
// <g id="btn_6.color-regular">
// <rect x="436" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_13" d="M458.748 138.169C461.5 138.181 463.378 136.376 463.372 133.859C463.378 131.54 461.76 129.868 459.569 129.868C458.21 129.868 457.009 130.52 456.453 131.613H456.369C456.381 129.204 457.226 127.707 458.838 127.707C459.786 127.707 460.468 128.226 460.667 129.089H463.245C462.998 127.055 461.307 125.467 458.838 125.467C455.783 125.467 453.821 127.942 453.809 132.096C453.803 136.624 456.206 138.157 458.748 138.169ZM458.735 136.116C457.528 136.116 456.635 135.145 456.635 133.937C456.641 132.736 457.552 131.758 458.754 131.758C459.961 131.758 460.842 132.706 460.836 133.931C460.842 135.169 459.943 136.116 458.735 136.116Z" fill="#629990"/>
// <path id=".standart_symbol-color_14" d="M453.562 108.239H455.518L457.093 104.635H457.196L458.784 108.239H460.728L458.18 102.908H456.103L453.562 108.239Z" fill="#629990"/>
// </g>
// <g id="btn_7.color-regular">
// <rect x="508" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_15" d="M526.491 138H529.19L534.321 127.804V125.636H525.646V127.773H531.617V127.858L526.491 138Z" fill="#629990"/>
// <path id=".standart_symbol-color_16" d="M529.818 115.181C530.898 115.181 532.07 114.879 532.981 114.167L533.73 115H536.41L534.551 112.869C535.239 111.957 535.674 110.647 535.674 108.969H533.543C533.543 109.778 533.343 110.496 533.017 111.106L530.977 108.764L531.701 108.245C532.74 107.496 533.343 106.554 533.343 105.389C533.343 103.808 532.118 102.473 530.132 102.473C528.103 102.473 526.757 103.856 526.757 105.649C526.757 106.748 527.288 107.665 527.934 108.486C526.588 109.41 525.683 110.285 525.683 111.716C525.683 113.666 527.246 115.181 529.818 115.181ZM531.593 112.621C531.074 112.941 530.506 113.116 529.945 113.116C528.87 113.116 528.176 112.452 528.176 111.571C528.176 111.1 528.496 110.557 529.178 110.062L529.25 110.013L531.593 112.621ZM529.739 107.297C529.281 106.717 528.961 106.204 528.961 105.691C528.961 105.069 529.431 104.55 530.15 104.544C530.874 104.538 531.285 105.045 531.285 105.534C531.285 106.053 531.001 106.482 530.385 106.874L529.739 107.297Z" fill="#629990"/>
// </g>
// <g id="btn_8.color-regular">
// <rect x="580" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_17" d="M602.615 138.169C605.404 138.169 607.408 136.678 607.414 134.674C607.408 133.128 606.219 131.866 604.734 131.619V131.534C606.026 131.269 606.949 130.152 606.955 128.794C606.949 126.88 605.114 125.467 602.615 125.467C600.109 125.467 598.274 126.88 598.28 128.794C598.274 130.146 599.186 131.269 600.502 131.534V131.619C598.993 131.866 597.815 133.128 597.821 134.674C597.815 136.678 599.826 138.169 602.615 138.169ZM602.615 136.249C601.371 136.249 600.538 135.513 600.538 134.468C600.538 133.4 601.413 132.627 602.615 132.627C603.81 132.627 604.691 133.4 604.691 134.468C604.691 135.519 603.852 136.249 602.615 136.249ZM602.615 130.725C601.57 130.725 600.828 130.043 600.828 129.065C600.828 128.099 601.558 127.435 602.615 127.435C603.665 127.435 604.402 128.105 604.402 129.065C604.402 130.043 603.653 130.725 602.615 130.725Z" fill="#629990"/>
// <path id=".standart_symbol-color_18" d="M600.991 109.591H602.615L602.458 107.255L604.414 108.565L605.223 107.14L603.122 106.114L605.223 105.087L604.414 103.663L602.458 104.973L602.615 102.636H600.991L601.142 104.973L599.186 103.663L598.377 105.087L600.484 106.114L598.377 107.14L599.186 108.565L601.142 107.255L600.991 109.591Z" fill="#629990"/>
// </g>
// <g id="btn_9.color-regular">
// <rect x="652" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_19" d="M674.476 125.467C671.711 125.455 669.846 127.266 669.858 129.754C669.864 132.06 671.463 133.732 673.655 133.732C675.013 133.732 676.221 133.074 676.77 131.987H676.854C676.848 134.438 675.997 135.929 674.385 135.929C673.438 135.929 672.755 135.41 672.556 134.511H669.978C670.22 136.593 671.91 138.169 674.385 138.169C677.446 138.169 679.42 135.694 679.414 131.498C679.408 127.019 677.017 125.479 674.476 125.467ZM674.494 127.52C675.695 127.52 676.583 128.498 676.595 129.675C676.601 130.858 675.665 131.836 674.47 131.836C673.262 131.836 672.399 130.895 672.393 129.681C672.381 128.474 673.281 127.52 674.494 127.52Z" fill="#629990"/>
// <path id=".standart_symbol-color_20" d="M670.594 110.044C670.594 113.044 671.385 115.537 673.033 117.686H675.49C674.228 116.093 673.268 112.905 673.268 110.044C673.268 107.188 674.228 104.001 675.49 102.407H673.033C671.385 104.556 670.594 107.043 670.594 110.044Z" fill="#629990"/>
// </g>
// <g id="btn_0.color-regular">
// <rect x="724" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_21" d="M746.85 138.272C749.959 138.272 751.837 135.905 751.843 131.83C751.849 127.786 749.947 125.467 746.85 125.467C743.747 125.467 741.864 127.779 741.858 131.83C741.846 135.893 743.735 138.266 746.85 138.272ZM746.85 136.104C745.431 136.104 744.514 134.68 744.52 131.83C744.526 129.023 745.438 127.61 746.85 127.61C748.257 127.61 749.174 129.023 749.174 131.83C749.18 134.68 748.263 136.104 746.85 136.104Z" fill="#629990"/>
// <path id=".standart_symbol-color_22" d="M746.361 110.044C746.361 107.043 745.57 104.55 743.922 102.401H741.465C742.727 103.995 743.687 107.182 743.687 110.044C743.687 112.899 742.727 116.087 741.465 117.68H743.922C745.57 115.531 746.361 113.044 746.361 110.044Z" fill="#629990"/>
// </g>
// <g id="btn_-.color-regular">
// <rect x="796" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_23" d="M819.804 131.903H814.165V133.943H819.804V131.903Z" fill="#629990"/>
// <path id=".standart_symbol-color_24" d="M821.108 115H812.988V116.95H821.108V115Z" fill="#629990"/>
// </g>
// <g id="btn_=.color-regular">
// <rect x="868" y="88" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_25" d="M886.606 136.129H894.943V133.985H886.606V136.129ZM886.606 132.12H894.943V129.977H886.606V132.12Z" fill="#629990"/>
// <path id=".standart_symbol-color_26" d="M889.697 114.33H891.858V111.136H895.052V108.975H891.858V105.782H889.697V108.975H886.504V111.136H889.697V114.33Z" fill="#629990"/>
// </g>
// <g id="btn_backspace.functional-buttons">
// <rect x="940" y="88" width="136" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_5" d="M957.949 123H962.609C965.06 123 966.365 121.722 966.365 119.985C966.365 118.371 965.209 117.396 963.968 117.338V117.231C965.102 116.975 965.939 116.171 965.939 114.887C965.939 113.252 964.724 112.091 962.316 112.091H957.949V123ZM960.255 121.114V118.217H962.189C963.297 118.217 963.984 118.856 963.984 119.756C963.984 120.576 963.424 121.114 962.135 121.114H960.255ZM960.255 116.656V113.955H962.007C963.03 113.955 963.611 114.483 963.611 115.271C963.611 116.134 962.908 116.656 961.965 116.656H960.255ZM970.156 123.154C971.365 123.154 972.148 122.627 972.548 121.865H972.612V123H974.764V117.482C974.764 115.532 973.112 114.712 971.291 114.712C969.33 114.712 968.041 115.649 967.727 117.141L969.826 117.311C969.98 116.768 970.465 116.368 971.28 116.368C972.052 116.368 972.494 116.757 972.494 117.428V117.46C972.494 117.988 971.935 118.057 970.513 118.195C968.894 118.344 967.439 118.888 967.439 120.715C967.439 122.334 968.595 123.154 970.156 123.154ZM970.806 121.588C970.108 121.588 969.607 121.263 969.607 120.64C969.607 120.001 970.135 119.687 970.934 119.575C971.429 119.506 972.239 119.388 972.51 119.207V120.076C972.51 120.933 971.802 121.588 970.806 121.588ZM980.221 123.16C982.399 123.16 983.768 121.881 983.875 120.001H981.734C981.6 120.875 981.025 121.365 980.247 121.365C979.187 121.365 978.5 120.475 978.5 118.909C978.5 117.364 979.193 116.48 980.247 116.48C981.078 116.48 981.611 117.029 981.734 117.844H983.875C983.779 115.953 982.346 114.712 980.21 114.712C977.728 114.712 976.194 116.432 976.194 118.941C976.194 121.429 977.701 123.16 980.221 123.16ZM985.328 123H987.597V120.401L988.21 119.703L990.441 123H993.099L989.909 118.36L992.945 114.818H990.34L987.719 117.924H987.597V112.091H985.328V123ZM1000.87 117.151C1000.66 115.644 999.449 114.712 997.382 114.712C995.289 114.712 993.909 115.681 993.914 117.258C993.909 118.483 994.681 119.277 996.279 119.596L997.696 119.879C998.41 120.022 998.735 120.283 998.746 120.694C998.735 121.178 998.208 121.525 997.414 121.525C996.604 121.525 996.066 121.178 995.928 120.512L993.696 120.63C993.909 122.196 995.241 123.16 997.409 123.16C999.529 123.16 1001.05 122.078 1001.05 120.464C1001.05 119.282 1000.27 118.574 998.687 118.249L997.206 117.95C996.445 117.785 996.162 117.524 996.168 117.13C996.162 116.64 996.716 116.32 997.419 116.32C998.208 116.32 998.677 116.752 998.788 117.279L1000.87 117.151ZM1002.48 126.068H1004.75V121.69H1004.82C1005.13 122.371 1005.82 123.133 1007.14 123.133C1009.01 123.133 1010.46 121.658 1010.46 118.92C1010.46 116.107 1008.94 114.712 1007.15 114.712C1005.78 114.712 1005.12 115.527 1004.82 116.192H1004.72V114.818H1002.48V126.068ZM1004.7 118.909C1004.7 117.45 1005.32 116.517 1006.42 116.517C1007.55 116.517 1008.14 117.492 1008.14 118.909C1008.14 120.337 1007.54 121.327 1006.42 121.327C1005.33 121.327 1004.7 120.369 1004.7 118.909ZM1014.31 123.154C1015.52 123.154 1016.3 122.627 1016.7 121.865H1016.76V123H1018.91V117.482C1018.91 115.532 1017.26 114.712 1015.44 114.712C1013.48 114.712 1012.19 115.649 1011.88 117.141L1013.98 117.311C1014.13 116.768 1014.62 116.368 1015.43 116.368C1016.2 116.368 1016.64 116.757 1016.64 117.428V117.46C1016.64 117.988 1016.09 118.057 1014.66 118.195C1013.04 118.344 1011.59 118.888 1011.59 120.715C1011.59 122.334 1012.75 123.154 1014.31 123.154ZM1014.96 121.588C1014.26 121.588 1013.76 121.263 1013.76 120.64C1013.76 120.001 1014.29 119.687 1015.08 119.575C1015.58 119.506 1016.39 119.388 1016.66 119.207V120.076C1016.66 120.933 1015.95 121.588 1014.96 121.588ZM1024.37 123.16C1026.55 123.16 1027.92 121.881 1028.03 120.001H1025.88C1025.75 120.875 1025.18 121.365 1024.4 121.365C1023.34 121.365 1022.65 120.475 1022.65 118.909C1022.65 117.364 1023.34 116.48 1024.4 116.48C1025.23 116.48 1025.76 117.029 1025.88 117.844H1028.03C1027.93 115.953 1026.5 114.712 1024.36 114.712C1021.88 114.712 1020.34 116.432 1020.34 118.941C1020.34 121.429 1021.85 123.16 1024.37 123.16ZM1033.21 123.16C1035.23 123.16 1036.59 122.174 1036.91 120.656L1034.82 120.518C1034.59 121.141 1034 121.466 1033.24 121.466C1032.11 121.466 1031.39 120.715 1031.39 119.495V119.49H1036.96V118.866C1036.96 116.086 1035.28 114.712 1033.12 114.712C1030.71 114.712 1029.15 116.422 1029.15 118.946C1029.15 121.54 1030.69 123.16 1033.21 123.16ZM1031.39 118.083C1031.44 117.151 1032.15 116.406 1033.15 116.406C1034.14 116.406 1034.82 117.109 1034.83 118.083H1031.39Z" fill="white"/>
// </g>
// </g>
// <g id="R3">
// <g id="btn_tab.functional-buttons">
// <rect x="4.00037" y="160.031" width="102" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_6" d="M21.533 186.024H24.8729V195.031H27.1527V186.024H30.4926V184.122H21.533V186.024ZM33.1453 195.186C34.3544 195.186 35.1374 194.659 35.5369 193.897H35.6009V195.031H37.7529V189.513C37.7529 187.563 36.1016 186.743 34.2798 186.743C32.3196 186.743 31.0306 187.681 30.7163 189.172L32.815 189.343C32.9695 188.799 33.4542 188.4 34.2692 188.4C35.0416 188.4 35.4837 188.789 35.4837 189.46V189.492C35.4837 190.019 34.9244 190.088 33.5021 190.227C31.8828 190.376 30.4286 190.919 30.4286 192.746C30.4286 194.366 31.5845 195.186 33.1453 195.186ZM33.7951 193.62C33.0973 193.62 32.5966 193.295 32.5966 192.672C32.5966 192.033 33.1239 191.718 33.923 191.606C34.4183 191.537 35.228 191.42 35.4997 191.239V192.107C35.4997 192.965 34.7912 193.62 33.7951 193.62ZM39.5559 195.031H41.7932V193.721H41.8944C42.2086 194.403 42.8958 195.165 44.2168 195.165C46.0812 195.165 47.5353 193.689 47.5353 190.951C47.5353 188.139 46.0172 186.743 44.2221 186.743C42.8532 186.743 42.198 187.558 41.8944 188.224H41.8251V184.122H39.5559V195.031ZM41.7772 190.941C41.7772 189.481 42.3951 188.549 43.4977 188.549C44.6216 188.549 45.2182 189.524 45.2182 190.941C45.2182 192.368 44.611 193.359 43.4977 193.359C42.4057 193.359 41.7772 192.4 41.7772 190.941Z" fill="white"/>
// </g>
// <g id="btn_Q.color-regular">
// <rect x="110" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_27" d="M139.436 180.85C139.436 176.805 136.925 174.499 133.647 174.499C130.351 174.499 127.858 176.805 127.858 180.85C127.858 184.876 130.351 187.201 133.647 187.201C134.42 187.201 135.15 187.074 135.814 186.82L136.81 188.046H139.249L137.48 185.824C138.688 184.743 139.436 183.053 139.436 180.85ZM132.741 182.733L134.323 184.822C134.112 184.864 133.882 184.888 133.647 184.888C131.745 184.888 130.508 183.47 130.508 180.85C130.508 178.23 131.745 176.811 133.647 176.811C135.543 176.811 136.786 178.23 136.786 180.85C136.786 182.196 136.454 183.228 135.881 183.91L134.963 182.733H132.741Z" fill="#629990"/>
// </g>
// <g id="btn_W.color-regular">
// <rect x="182" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_28" d="M202.858 187.031H205.406L207.754 178.948H207.851L210.205 187.031H212.752L216.29 174.668H213.435L211.388 183.277H211.279L209.028 174.668H206.583L204.325 183.258H204.222L202.176 174.668H199.32L202.858 187.031Z" fill="#629990"/>
// </g>
// <g id="btn_E.color-regular">
// <rect x="254" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <rect id="Base Fill" x="254" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_29" d="M272.075 187.031H280.43V184.876H274.689V181.924H279.977V179.769H274.689V176.823H280.406V174.668H272.075V187.031Z" fill="#629990"/>
// </g>
// <g id="btn_R.color-regular">
// <rect x="326" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_30" d="M344.075 187.031H346.689V182.649H348.597L350.939 187.031H353.825L351.199 182.226C352.605 181.622 353.384 180.397 353.384 178.707C353.384 176.25 351.76 174.668 348.953 174.668H344.075V187.031ZM346.689 180.548V176.805H348.452C349.961 176.805 350.691 177.475 350.691 178.707C350.691 179.932 349.961 180.548 348.464 180.548H346.689Z" fill="#629990"/>
// </g>
// <g id="btn_T.color-regular">
// <rect x="398" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_31" d="M415.604 176.823H419.389V187.031H421.973V176.823H425.758V174.668H415.604V176.823Z" fill="#629990"/>
// </g>
// <g id="btn_Y.color-regular">
// <rect x="470" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_32" d="M487.351 174.668L491.86 182.661V187.031H494.456V182.661L498.966 174.668H496.038L493.218 179.992H493.098L490.278 174.668H487.351Z" fill="#629990"/>
// </g>
// <g id="btn_U.color-regular">
// <rect x="542" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_33" d="M567.712 174.668V182.474C567.712 183.886 566.722 184.906 565.2 184.906C563.685 184.906 562.689 183.886 562.689 182.474V174.668H560.075V182.697C560.075 185.402 562.115 187.207 565.2 187.207C568.273 187.207 570.326 185.402 570.326 182.697V174.668H567.712Z" fill="#629990"/>
// </g>
// <g id="btn_I.color-regular">
// <rect x="614" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_34" d="M634.689 174.668H632.075V187.031H634.689V174.668Z" fill="#629990"/>
// </g>
// <g id="btn_O.color-regular">
// <rect x="686" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_35" d="M715.436 180.85C715.436 176.805 712.925 174.499 709.647 174.499C706.351 174.499 703.858 176.805 703.858 180.85C703.858 184.876 706.351 187.201 709.647 187.201C712.925 187.201 715.436 184.894 715.436 180.85ZM712.786 180.85C712.786 183.47 711.543 184.888 709.647 184.888C707.745 184.888 706.508 183.47 706.508 180.85C706.508 178.23 707.745 176.811 709.647 176.811C711.543 176.811 712.786 178.23 712.786 180.85Z" fill="#629990"/>
// </g>
// <g id="btn_P.color-regular">
// <rect x="758" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_36" d="M776.075 187.031H778.689V183.023H780.886C783.73 183.023 785.384 181.327 785.384 178.857C785.384 176.4 783.76 174.668 780.953 174.668H776.075V187.031ZM778.689 180.928V176.805H780.452C781.961 176.805 782.691 177.626 782.691 178.857C782.691 180.083 781.961 180.928 780.464 180.928H778.689Z" fill="#629990"/>
// </g>
// <g id="btn_[.color-regular">
// <rect x="830" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_37" d="M848.799 210.718H853.563V208.792H851.287V197.358H853.563V195.438H848.799V210.718Z" fill="#629990"/>
// <path id=".standart_symbol-color_38" d="M853.563 189.718V187.792C852.132 187.792 851.842 187.243 851.842 186.078V184.315C851.842 183.385 851.444 182.552 849.693 182.196V181.954C851.444 181.598 851.842 180.765 851.842 179.842V178.079C851.842 176.908 852.132 176.358 853.563 176.358V174.438C851.124 174.438 849.379 174.843 849.379 177.819V179.153C849.379 180.391 848.914 180.916 847.526 180.916V183.234C848.914 183.234 849.379 183.759 849.379 184.997V186.337C849.379 189.313 851.124 189.718 853.563 189.718Z" fill="#629990"/>
// </g>
// <g id="btn_].color-regular">
// <rect x="902" y="160.031" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_39" d="M924.156 195.432H919.393V197.358H921.669V208.792H919.393V210.712H924.156V195.432Z" fill="#629990"/>
// <path id=".standart_symbol-color_40" d="M919.393 174.432V176.358C920.824 176.358 921.113 176.908 921.113 178.073V179.835C921.113 180.765 921.512 181.598 923.262 181.954V182.196C921.512 182.552 921.113 183.385 921.113 184.309V186.072C921.113 187.243 920.824 187.792 919.393 187.792V189.712C921.832 189.712 923.576 189.307 923.576 186.331V184.997C923.576 183.759 924.041 183.234 925.43 183.234V180.916C924.041 180.916 923.576 180.391 923.576 179.153V177.813C923.576 174.837 921.832 174.432 919.393 174.432Z" fill="#629990"/>
// </g>
// <g id="btn_\.functional-buttons">
// <rect x="974" y="160.031" width="102" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_7" d="M991.218 197.088L995.202 211.891H997.418L993.433 197.088H991.218Z" fill="white"/>
// <path id=".standart-symbol-white_8" d="M995.395 170.683H992.956V191.016H995.395V170.683Z" fill="white"/>
// </g>
// </g>
// <g id="R2">
// <g id="btn_caps.functional-buttons">
// <rect x="4.00037" y="232.063" width="119" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_9" d="M31.5739 259.973C31.2703 257.454 29.3633 256.005 26.8384 256.005C23.9567 256.005 21.7568 258.04 21.7568 261.608C21.7568 265.167 23.9194 267.212 26.8384 267.212C29.635 267.212 31.3235 265.353 31.5739 263.345L29.2408 263.334C29.0224 264.501 28.1062 265.172 26.8757 265.172C25.2191 265.172 24.0952 263.942 24.0952 261.608C24.0952 259.339 25.2031 258.045 26.8917 258.045C28.1541 258.045 29.065 258.775 29.2408 259.973H31.5739ZM35.5183 267.217C36.7275 267.217 37.5105 266.69 37.91 265.928H37.9739V267.063H40.1259V261.545C40.1259 259.595 38.4746 258.775 36.6529 258.775C34.6927 258.775 33.4036 259.712 33.0893 261.204L35.188 261.374C35.3425 260.831 35.8272 260.431 36.6422 260.431C37.4146 260.431 37.8567 260.82 37.8567 261.491V261.523C37.8567 262.051 37.2974 262.12 35.8752 262.258C34.2559 262.407 32.8017 262.951 32.8017 264.778C32.8017 266.397 33.9576 267.217 35.5183 267.217ZM36.1682 265.651C35.4704 265.651 34.9696 265.326 34.9696 264.703C34.9696 264.064 35.497 263.75 36.296 263.638C36.7914 263.569 37.601 263.451 37.8727 263.27V264.139C37.8727 264.996 37.1643 265.651 36.1682 265.651ZM41.8864 270.131H44.1556V265.753H44.2248C44.5391 266.434 45.2262 267.196 46.5472 267.196C48.4116 267.196 49.8658 265.721 49.8658 262.983C49.8658 260.17 48.3477 258.775 46.5526 258.775C45.1836 258.775 44.5284 259.59 44.2248 260.255H44.1236V258.881H41.8864V270.131ZM44.1076 262.972C44.1076 261.513 44.7255 260.58 45.8281 260.58C46.9521 260.58 47.5487 261.555 47.5487 262.972C47.5487 264.4 46.9414 265.39 45.8281 265.39C44.7362 265.39 44.1076 264.432 44.1076 262.972ZM58.1861 261.214C57.9837 259.707 56.7692 258.775 54.7024 258.775C52.609 258.775 51.2294 259.744 51.2347 261.321C51.2294 262.546 52.0018 263.34 53.5998 263.659L55.0167 263.942C55.7305 264.085 56.0554 264.346 56.0661 264.757C56.0554 265.241 55.5281 265.587 54.7344 265.587C53.9247 265.587 53.3867 265.241 53.2482 264.575L51.0163 264.693C51.2294 266.259 52.5611 267.223 54.7291 267.223C56.8491 267.223 58.3672 266.141 58.3725 264.527C58.3672 263.345 57.5948 262.636 56.0075 262.312L54.5266 262.013C53.7649 261.848 53.4826 261.587 53.4879 261.193C53.4826 260.703 54.0366 260.383 54.7397 260.383C55.5281 260.383 55.9968 260.815 56.1087 261.342L58.1861 261.214ZM65.5423 256.154H63.2731V267.063H65.5423V256.154ZM71.0567 267.223C73.539 267.223 75.0837 265.524 75.0837 263.004C75.0837 260.469 73.539 258.775 71.0567 258.775C68.5745 258.775 67.0298 260.469 67.0298 263.004C67.0298 265.524 68.5745 267.223 71.0567 267.223ZM71.0674 265.465C69.9222 265.465 69.3362 264.416 69.3362 262.988C69.3362 261.561 69.9222 260.506 71.0674 260.506C72.1913 260.506 72.7773 261.561 72.7773 262.988C72.7773 264.416 72.1913 265.465 71.0674 265.465ZM80.256 267.223C82.4346 267.223 83.8035 265.944 83.9101 264.064H81.7687C81.6356 264.938 81.0603 265.428 80.2826 265.428C79.2226 265.428 78.5354 264.538 78.5354 262.972C78.5354 261.427 79.2279 260.543 80.2826 260.543C81.1136 260.543 81.6462 261.092 81.7687 261.907H83.9101C83.8142 260.016 82.3813 258.775 80.2453 258.775C77.7631 258.775 76.229 260.495 76.229 263.004C76.229 265.492 77.7364 267.223 80.256 267.223ZM85.3629 267.063H87.6321V264.464L88.2447 263.766L90.4766 267.063H93.1346L89.9439 262.423L92.9801 258.881H90.3754L87.7546 261.987H87.6321V256.154H85.3629V267.063Z" fill="white"/>
// </g>
// <g id="btn_A.color-regular">
// <rect x="127" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_41" d="M147.206 259.063L148.124 256.244H152.585L153.502 259.063H156.304L152.042 246.699H148.673L144.405 259.063H147.206ZM148.788 254.203L150.309 249.525H150.406L151.927 254.203H148.788Z" fill="#629990"/>
// </g>
// <g id="btn_S.color-regular">
// <rect x="199" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_42" d="M223.782 250.255H226.287C226.251 248.052 224.44 246.53 221.687 246.53C218.977 246.53 216.99 248.027 217.002 250.273C216.996 252.096 218.282 253.141 220.371 253.642L221.717 253.98C223.064 254.306 223.812 254.692 223.818 255.525C223.812 256.431 222.955 257.047 221.627 257.047C220.268 257.047 219.29 256.419 219.206 255.181H216.677C216.743 257.856 218.657 259.238 221.657 259.238C224.675 259.238 226.45 257.795 226.456 255.531C226.45 253.473 224.899 252.38 222.75 251.897L221.639 251.632C220.564 251.384 219.665 250.986 219.683 250.098C219.683 249.301 220.389 248.716 221.669 248.716C222.919 248.716 223.685 249.283 223.782 250.255Z" fill="#629990"/>
// </g>
// <g id="btn_D.color-regular">
// <rect x="271" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_43" d="M293.458 259.063C297.225 259.063 299.507 256.733 299.507 252.869C299.507 249.018 297.225 246.699 293.494 246.699H289.075V259.063H293.458ZM291.689 256.823V248.939H293.355C295.673 248.939 296.899 250.122 296.899 252.869C296.899 255.628 295.673 256.823 293.349 256.823H291.689Z" fill="#629990"/>
// </g>
// <g id="btn_F.color-regular">
// <rect x="343" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_44" d="M361.075 259.063H363.689V253.956H368.718V251.801H363.689V248.855H369.261V246.699H361.075V259.063Z" fill="#629990"/>
// </g>
// <g id="btn_G.color-regular">
// <rect x="415" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_45" d="M441.273 250.696H443.929C443.591 248.251 441.436 246.53 438.641 246.53C435.375 246.53 432.858 248.885 432.858 252.893C432.858 256.805 435.212 259.232 438.695 259.232C441.816 259.232 444.044 257.258 444.044 254.004V252.447H438.87V254.415H441.527C441.49 255.948 440.446 256.92 438.707 256.92C436.745 256.92 435.508 255.453 435.508 252.869C435.508 250.297 436.794 248.842 438.683 248.842C440.029 248.842 440.941 249.537 441.273 250.696Z" fill="#629990"/>
// </g>
// <g id="btn_H.color-regular">
// <rect x="487" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_46" d="M505.075 259.063H507.689V253.956H512.995V259.063H515.603V246.699H512.995V251.801H507.689V246.699H505.075V259.063Z" fill="#629990"/>
// </g>
// <g id="btn_J.color-regular">
// <rect x="559" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_47" d="M582.025 246.699V255.32C582.019 256.509 581.488 257.137 580.522 257.137C579.61 257.137 579.019 256.57 579.001 255.586H576.399C576.387 258.055 578.15 259.232 580.389 259.232C582.895 259.232 584.603 257.717 584.609 255.32V246.699H582.025Z" fill="#629990"/>
// </g>
// <g id="btn_K.color-regular">
// <rect x="631" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_48" d="M649.075 259.063H651.689V255.549L652.975 253.98L656.362 259.063H659.489L654.846 252.235L659.434 246.699H656.301L651.852 252.151H651.689V246.699H649.075V259.063Z" fill="#629990"/>
// </g>
// <g id="btn_L.color-regular">
// <rect x="703" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_49" d="M721.075 259.063H728.989V256.908H723.689V246.699H721.075V259.063Z" fill="#629990"/>
// </g>
// <g id="btn_;.color-regular">
// <rect x="775" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_50" d="M795.822 278.373H793.697L793.667 279.049C793.594 280.691 793.123 282.375 792.948 283.081H794.614C794.904 282.351 795.592 280.636 795.755 279.037L795.822 278.373ZM794.747 273.73C795.52 273.73 796.19 273.084 796.196 272.281C796.19 271.491 795.52 270.845 794.747 270.845C793.95 270.845 793.292 271.491 793.298 272.281C793.292 273.084 793.95 273.73 794.747 273.73Z" fill="#629990"/>
// <path id=".standart_symbol-color_51" d="M794.53 252.73C795.303 252.73 795.973 252.084 795.979 251.281C795.973 250.491 795.303 249.845 794.53 249.845C793.733 249.845 793.075 250.491 793.081 251.281C793.075 252.084 793.733 252.73 794.53 252.73ZM794.53 259.22C795.303 259.22 795.973 258.574 795.979 257.771C795.973 256.98 795.303 256.334 794.53 256.334C793.733 256.334 793.075 256.98 793.081 257.771C793.075 258.574 793.733 259.22 794.53 259.22Z" fill="#629990"/>
// </g>
// <g id="btn_&#39;.color-regular">
// <rect x="847" y="232.063" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_52" d="M866.681 269.699H864.846V274.396H866.681V269.699Z" fill="#629990"/>
// <path id=".standart_symbol-color_53" d="M866.681 246.699H864.846V251.396H866.681V246.699ZM869.802 246.699H867.967V251.396H869.802V246.699Z" fill="#629990"/>
// </g>
// <g id="btn_enter">
// <rect x="919" y="232.063" width="157" height="68" rx="5.66929" fill="#ABC6DC"/>
// <path id=".standart-symbol-white_10" d="M936.949 267.063H944.321V265.161H939.255V262.557H943.921V260.655H939.255V258.056H944.299V256.154H936.949V267.063ZM948.36 262.333C948.365 261.278 948.994 260.66 949.91 260.66C950.821 260.66 951.369 261.257 951.364 262.258V267.063H953.633V261.853C953.633 259.947 952.514 258.775 950.81 258.775C949.595 258.775 948.717 259.371 948.349 260.325H948.253V258.881H946.09V267.063H948.36V262.333ZM959.773 258.881H958.234V256.921H955.965V258.881H954.846V260.586H955.965V264.847C955.954 266.45 957.046 267.244 958.692 267.175C959.278 267.154 959.694 267.036 959.923 266.962L959.566 265.273C959.454 265.295 959.214 265.348 959.001 265.348C958.548 265.348 958.234 265.177 958.234 264.549V260.586H959.773V258.881ZM964.892 267.223C966.917 267.223 968.28 266.237 968.6 264.719L966.501 264.581C966.272 265.204 965.686 265.529 964.93 265.529C963.795 265.529 963.076 264.778 963.076 263.558V263.553H968.648V262.929C968.648 260.149 966.965 258.775 964.802 258.775C962.394 258.775 960.833 260.485 960.833 263.009C960.833 265.603 962.373 267.223 964.892 267.223ZM963.076 262.146C963.124 261.214 963.832 260.469 964.839 260.469C965.825 260.469 966.506 261.172 966.512 262.146H963.076ZM970.129 267.063H972.398V262.434C972.398 261.427 973.133 260.735 974.134 260.735C974.449 260.735 974.88 260.788 975.093 260.857V258.844C974.891 258.796 974.608 258.764 974.379 258.764C973.463 258.764 972.712 259.297 972.414 260.309H972.328V258.881H970.129V267.063Z" fill="white"/>
// </g>
// </g>
// <g id="R1">
// <g id="btn_l_shift.functional-buttons">
// <rect x="4.00037" y="304.142" width="157" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_11" d="M27.8665 331.37H30.0771C30.0451 329.426 28.4471 328.083 26.0181 328.083C23.6264 328.083 21.8739 329.404 21.8846 331.386C21.8793 332.995 23.0139 333.916 24.8569 334.358L26.0448 334.657C27.2326 334.944 27.8931 335.285 27.8984 336.02C27.8931 336.819 27.1367 337.362 25.9649 337.362C24.7663 337.362 23.9034 336.809 23.8288 335.717H21.597C21.6556 338.076 23.3441 339.296 25.9915 339.296C28.6548 339.296 30.2209 338.023 30.2262 336.025C30.2209 334.209 28.8519 333.245 26.9556 332.819L25.9755 332.584C25.0274 332.366 24.2337 332.014 24.2497 331.231C24.2497 330.528 24.8729 330.012 26.0021 330.012C27.1048 330.012 27.7813 330.512 27.8665 331.37ZM34.0042 334.411C34.0095 333.357 34.654 332.739 35.5809 332.739C36.5024 332.739 37.0457 333.33 37.0404 334.337V339.142H39.3096V333.932C39.3149 332.014 38.1856 330.853 36.4811 330.853C35.24 330.853 34.409 331.439 34.0361 332.403H33.9403V328.233H31.735V339.142H34.0042V334.411ZM41.0954 339.142H43.3645V330.96H41.0954V339.142ZM42.2353 329.905C42.9118 329.905 43.4657 329.388 43.4657 328.755C43.4657 328.126 42.9118 327.609 42.2353 327.609C41.5641 327.609 41.0101 328.126 41.0101 328.755C41.0101 329.388 41.5641 329.905 42.2353 329.905ZM49.5821 330.96H47.9575V330.411C47.9575 329.857 48.1812 329.532 48.847 329.532C49.1187 329.532 49.3957 329.591 49.5768 329.649L49.9763 327.945C49.694 327.86 49.0708 327.721 48.373 327.721C46.8336 327.721 45.6883 328.589 45.6883 330.369V330.96H44.5324V332.664H45.6883V339.142H47.9575V332.664H49.5821V330.96ZM55.3203 330.96H53.7809V329H51.5117V330.96H50.3931V332.664H51.5117V336.926C51.5011 338.529 52.5931 339.323 54.239 339.253C54.8249 339.232 55.2404 339.115 55.4695 339.04L55.1126 337.352C55.0007 337.373 54.761 337.426 54.548 337.426C54.0952 337.426 53.7809 337.256 53.7809 336.627V332.664H55.3203V330.96Z" fill="white"/>
// </g>
// <g id="btn_Z.color-regular">
// <rect x="165" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_54" d="M182.942 331.142H192.408V328.986H186.22L192.396 320.329V318.778H182.93V320.933H189.112L182.942 329.59V331.142Z" fill="#629990"/>
// </g>
// <g id="btn_X.color-regular">
// <rect x="237" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_55" d="M257.526 318.778H254.562L258.359 324.96L254.489 331.142H257.484L260.019 326.922H260.116L262.651 331.142H265.658L261.8 324.96L265.573 318.778H262.621L260.116 322.992H260.019L257.526 318.778Z" fill="#629990"/>
// </g>
// <g id="btn_C.color-regular">
// <rect x="309" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_56" d="M337.984 323.106C337.64 320.251 335.478 318.609 332.617 318.609C329.351 318.609 326.858 320.915 326.858 324.96C326.858 328.992 329.309 331.311 332.617 331.311C335.786 331.311 337.7 329.204 337.984 326.928L335.34 326.916C335.092 328.238 334.054 328.998 332.659 328.998C330.782 328.998 329.508 327.604 329.508 324.96C329.508 322.388 330.764 320.921 332.677 320.921C334.108 320.921 335.14 321.748 335.34 323.106H337.984Z" fill="#629990"/>
// </g>
// <g id="btn_V.color-regular">
// <rect x="381" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_57" d="M401.309 318.778H398.405L402.673 331.142H406.042L410.304 318.778H407.406L404.412 328.171H404.297L401.309 318.778Z" fill="#629990"/>
// </g>
// <g id="btn_B.color-regular">
// <rect x="453" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_58" d="M471.075 331.142H476.357C479.134 331.142 480.613 329.693 480.613 327.725C480.613 325.896 479.303 324.791 477.897 324.724V324.604C479.183 324.314 480.13 323.402 480.13 321.947C480.13 320.094 478.754 318.778 476.025 318.778H471.075V331.142ZM473.689 329.005V325.72H475.88C477.136 325.72 477.915 326.445 477.915 327.465C477.915 328.395 477.281 329.005 475.82 329.005H473.689ZM473.689 323.952V320.891H475.675C476.834 320.891 477.492 321.489 477.492 322.382C477.492 323.36 476.695 323.952 475.627 323.952H473.689Z" fill="#629990"/>
// </g>
// <g id="btn_N.color-regular">
// <rect x="525" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_59" d="M553.416 318.778H550.814V326.554H550.706L545.369 318.778H543.075V331.142H545.689V323.36H545.779L551.158 331.142H553.416V318.778Z" fill="#629990"/>
// </g>
// <g id="btn_M.color-regular">
// <rect x="597" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_60" d="M615.075 318.778V331.142H617.61V323.064H617.713L620.913 331.081H622.639L625.839 323.094H625.941V331.142H628.477V318.778H625.253L621.848 327.085H621.703L618.299 318.778H615.075Z" fill="#629990"/>
// </g>
// <g id="btn_,.color-regular">
// <rect x="669" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_61" d="M689.822 350.451H687.697L687.667 351.127C687.594 352.769 687.123 354.454 686.948 355.16H688.614C688.904 354.43 689.592 352.715 689.755 351.115L689.822 350.451Z" fill="#629990"/>
// <path id=".standart_symbol-color_62" d="M687.528 327.26L696.028 331.003V328.558L690.287 326.252V326.143L696.028 323.837V321.392L687.528 325.135V327.26Z" fill="#629990"/>
// </g>
// <g id="btn_..color-regular">
// <rect x="741" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_63" d="M760.53 352.299C761.303 352.299 761.973 351.653 761.979 350.85C761.973 350.059 761.303 349.413 760.53 349.413C759.733 349.413 759.075 350.059 759.081 350.85C759.075 351.653 759.733 352.299 760.53 352.299Z" fill="#629990"/>
// <path id=".standart_symbol-color_64" d="M768.028 327.26V325.135L759.528 321.392V323.837L765.269 326.143V326.252L759.528 328.558V331.003L768.028 327.26Z" fill="#629990"/>
// </g>
// <g id="btn_/.color-regular">
// <rect x="813" y="304.142" width="68" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_65" d="M836.412 341.198H834.196L830.212 356.001H832.427L836.412 341.198Z" fill="#629990"/>
// <path id=".standart_symbol-color_66" d="M833.236 327.435H835.524V327.23C835.536 326.052 835.959 325.503 836.913 324.93C838.042 324.259 838.778 323.372 838.778 321.953C838.778 319.84 837.076 318.609 834.679 318.609C832.488 318.609 830.701 319.756 830.646 322.171H833.109C833.146 321.187 833.876 320.661 834.667 320.661C835.482 320.661 836.14 321.205 836.14 322.044C836.14 322.835 835.566 323.36 834.824 323.831C833.81 324.471 833.242 325.117 833.236 327.23V327.435ZM834.425 331.299C835.198 331.299 835.868 330.653 835.874 329.85C835.868 329.059 835.198 328.413 834.425 328.413C833.629 328.413 832.971 329.059 832.977 329.85C832.971 330.653 833.629 331.299 834.425 331.299Z" fill="#629990"/>
// </g>
// <g id="btn_r_shift.functional-buttons">
// <rect x="885" y="304.142" width="119" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_12" d="M908.866 331.37H911.077C911.045 329.426 909.447 328.083 907.018 328.083C904.626 328.083 902.874 329.404 902.885 331.386C902.879 332.995 904.014 333.916 905.857 334.358L907.045 334.657C908.233 334.944 908.893 335.285 908.898 336.02C908.893 336.819 908.137 337.362 906.965 337.362C905.766 337.362 904.903 336.809 904.829 335.717H902.597C902.656 338.076 904.344 339.296 906.991 339.296C909.655 339.296 911.221 338.023 911.226 336.025C911.221 334.209 909.852 333.245 907.956 332.819L906.976 332.584C906.027 332.366 905.234 332.014 905.25 331.231C905.25 330.528 905.873 330.012 907.002 330.012C908.105 330.012 908.781 330.512 908.866 331.37ZM915.004 334.411C915.01 333.357 915.654 332.739 916.581 332.739C917.502 332.739 918.046 333.33 918.04 334.337V339.142H920.31V333.932C920.315 332.014 919.186 330.853 917.481 330.853C916.24 330.853 915.409 331.439 915.036 332.403H914.94V328.233H912.735V339.142H915.004V334.411ZM922.095 339.142H924.365V330.96H922.095V339.142ZM923.235 329.905C923.912 329.905 924.466 329.388 924.466 328.755C924.466 328.126 923.912 327.609 923.235 327.609C922.564 327.609 922.01 328.126 922.01 328.755C922.01 329.388 922.564 329.905 923.235 329.905ZM930.582 330.96H928.957V330.411C928.957 329.857 929.181 329.532 929.847 329.532C930.119 329.532 930.396 329.591 930.577 329.649L930.976 327.945C930.694 327.86 930.071 327.721 929.373 327.721C927.834 327.721 926.688 328.589 926.688 330.369V330.96H925.532V332.664H926.688V339.142H928.957V332.664H930.582V330.96ZM936.32 330.96H934.781V329H932.512V330.96H931.393V332.664H932.512V336.926C932.501 338.529 933.593 339.323 935.239 339.253C935.825 339.232 936.24 339.115 936.469 339.04L936.113 337.352C936.001 337.373 935.761 337.426 935.548 337.426C935.095 337.426 934.781 337.256 934.781 336.627V332.664H936.32V330.96Z" fill="white"/>
// </g>
// </g>
// <g id="R0">
// <g id="btn_l_ctrl.modifiers-ctrl">
// <rect x="4.00037" y="376.173" width="85" height="68" rx="5.66929" fill="#7C947D"/>
// <path id=".standart-symbol-white_13" d="M31.5739 404.083C31.2703 401.564 29.3633 400.115 26.8384 400.115C23.9567 400.115 21.7568 402.15 21.7568 405.719C21.7568 409.277 23.9194 411.322 26.8384 411.322C29.635 411.322 31.3235 409.463 31.5739 407.455L29.2408 407.445C29.0224 408.611 28.1062 409.282 26.8757 409.282C25.2191 409.282 24.0952 408.052 24.0952 405.719C24.0952 403.45 25.2031 402.155 26.8917 402.155C28.1541 402.155 29.065 402.885 29.2408 404.083H31.5739ZM37.5371 402.992H35.9977V401.031H33.7285V402.992H32.6099V404.696H33.7285V408.957C33.7179 410.561 34.8098 411.354 36.4558 411.285C37.0417 411.264 37.4572 411.147 37.6863 411.072L37.3294 409.384C37.2175 409.405 36.9778 409.458 36.7647 409.458C36.312 409.458 35.9977 409.288 35.9977 408.659V404.696H37.5371V402.992ZM39.0153 411.173H41.2845V406.544C41.2845 405.538 42.0195 404.845 43.021 404.845C43.3352 404.845 43.7667 404.898 43.9798 404.968V402.954C43.7774 402.906 43.495 402.874 43.266 402.874C42.3498 402.874 41.5987 403.407 41.3004 404.419H41.2152V402.992H39.0153V411.173ZM47.4222 400.264H45.153V411.173H47.4222V400.264Z" fill="white"/>
// </g>
// <g id="btn_win.system-keys-color">
// <rect x="93.0004" y="376.173" width="85" height="68" rx="5.66929" fill="#629990"/>
// <path id=".standart-symbol-white_14" d="M113.404 411.173H115.652L117.724 404.041H117.809L119.887 411.173H122.135L125.256 400.264H122.737L120.931 407.86H120.835L118.848 400.264H116.691L114.699 407.844H114.608L112.802 400.264H110.283L113.404 411.173ZM126.448 411.173H128.717V402.992H126.448V411.173ZM127.588 401.937C128.264 401.937 128.818 401.42 128.818 400.786C128.818 400.158 128.264 399.641 127.588 399.641C126.917 399.641 126.363 400.158 126.363 400.786C126.363 401.42 126.917 401.937 127.588 401.937ZM132.804 406.443C132.809 405.389 133.438 404.771 134.354 404.771C135.265 404.771 135.814 405.367 135.808 406.369V411.173H138.077V405.964C138.077 404.057 136.959 402.885 135.254 402.885C134.04 402.885 133.161 403.482 132.793 404.435H132.697V402.992H130.535V411.173H132.804V406.443Z" fill="white"/>
// </g>
// <g id="btn_l_alt.modifiers-alt">
// <rect x="182" y="376.173" width="85" height="68" rx="5.66929" fill="#C2C0A9"/>
// <path id=".standart-symbol-white_15" d="M201.829 411.173L202.639 408.686H206.575L207.385 411.173H209.856L206.096 400.264H203.123L199.357 411.173H201.829ZM203.224 406.885L204.567 402.757H204.652L205.994 406.885H203.224ZM213.396 400.264H211.127V411.173H213.396V400.264ZM219.565 402.992H218.026V401.031H215.757V402.992H214.638V404.696H215.757V408.957C215.746 410.561 216.838 411.354 218.484 411.285C219.07 411.264 219.486 411.147 219.715 411.072L219.358 409.384C219.246 409.405 219.006 409.458 218.793 409.458C218.34 409.458 218.026 409.288 218.026 408.659V404.696H219.565V402.992Z" fill="white"/>
// </g>
// <g id="btn_space">
// <rect x="271" y="376.173" width="448" height="68" rx="5.66929" fill="#ABC6DC"/>
// </g>
// <g id="btn_r_alt.modifiers-alt">
// <rect x="723" y="376.173" width="68" height="68" rx="5.66929" fill="#C2C0A9"/>
// <path id=".standart-symbol-white_16" d="M742.829 411.173L743.639 408.686H747.575L748.385 411.173H750.856L747.096 400.264H744.123L740.357 411.173H742.829ZM744.224 406.885L745.567 402.757H745.652L746.994 406.885H744.224ZM754.396 400.264H752.127V411.173H754.396V400.264ZM760.565 402.992H759.026V401.031H756.757V402.992H755.638V404.696H756.757V408.957C756.746 410.561 757.838 411.354 759.484 411.285C760.07 411.264 760.486 411.147 760.715 411.072L760.358 409.384C760.246 409.405 760.006 409.458 759.793 409.458C759.34 409.458 759.026 409.288 759.026 408.659V404.696H760.565V402.992Z" fill="white"/>
// </g>
// <g id="btn_fn.system-keys-color">
// <rect x="795" y="376.173" width="68" height="68" rx="5.66929" fill="#629990"/>
// <path id=".standart-symbol-white_17" d="M812.949 411.173H815.255V406.667H819.692V404.765H815.255V402.166H820.172V400.264H812.949V411.173ZM823.818 406.443C823.823 405.389 824.452 404.771 825.368 404.771C826.279 404.771 826.827 405.367 826.822 406.369V411.173H829.091V405.964C829.091 404.057 827.972 402.885 826.268 402.885C825.053 402.885 824.175 403.482 823.807 404.435H823.711V402.992H821.548V411.173H823.818V406.443Z" fill="white"/>
// </g>
// <g id="btn_r_ctrl.modifiers-ctrl">
// <rect x="867" y="376.173" width="68" height="68" rx="5.66929" fill="#7C947D"/>
// <path id=".standart-symbol-white_18" d="M894.574 404.083C894.27 401.564 892.363 400.115 889.838 400.115C886.957 400.115 884.757 402.15 884.757 405.719C884.757 409.277 886.919 411.322 889.838 411.322C892.635 411.322 894.324 409.463 894.574 407.455L892.241 407.445C892.022 408.611 891.106 409.282 889.876 409.282C888.219 409.282 887.095 408.052 887.095 405.719C887.095 403.45 888.203 402.155 889.892 402.155C891.154 402.155 892.065 402.885 892.241 404.083H894.574ZM900.537 402.992H898.998V401.031H896.729V402.992H895.61V404.696H896.729V408.957C896.718 410.561 897.81 411.354 899.456 411.285C900.042 411.264 900.457 411.147 900.686 411.072L900.329 409.384C900.218 409.405 899.978 409.458 899.765 409.458C899.312 409.458 898.998 409.288 898.998 408.659V404.696H900.537V402.992ZM902.015 411.173H904.284V406.544C904.284 405.538 905.02 404.845 906.021 404.845C906.335 404.845 906.767 404.898 906.98 404.968V402.954C906.777 402.906 906.495 402.874 906.266 402.874C905.35 402.874 904.599 403.407 904.3 404.419H904.215V402.992H902.015V411.173ZM910.422 400.264H908.153V411.173H910.422V400.264Z" fill="white"/>
// </g>
// </g>
// <g id="Arrows">
// <g id="brn_arrow_up.directional-keys">
// <rect x="1008" y="304" width="68" height="68" rx="5.66929" fill="#E86700"/>
// <path id=".standart-symbol-white_19" d="M1028 325L1025.11 330L1030.89 330L1028 325ZM1028.5 342L1028.5 329.5L1027.5 329.5L1027.5 342L1028.5 342Z" fill="white"/>
// </g>
// <g id="brn_arrow_right.directional-keys">
// <rect x="1080" y="376" width="68" height="68" rx="5.66929" fill="#E86700"/>
// <path id=".standart-symbol-white_20" d="M1114 406L1109 403.113L1109 408.887L1114 406ZM1097 406.5L1109.5 406.5L1109.5 405.5L1097 405.5L1097 406.5Z" fill="white"/>
// </g>
// <g id="brn_arrow_down.directional-keys">
// <rect x="1008" y="376" width="68" height="68" rx="5.66929" fill="#E86700"/>
// <path id=".standart-symbol-white_21" d="M1028 414L1030.89 409L1025.11 409L1028 414ZM1027.5 397L1027.5 409.5L1028.5 409.5L1028.5 397L1027.5 397Z" fill="white"/>
// </g>
// <g id="brn_arrow_left.directional-keys">
// <rect x="936" y="376" width="68" height="68" rx="5.66929" fill="#E86700"/>
// <path id=".standart-symbol-white_22" d="M953 406L958 408.887L958 403.113L953 406ZM970 405.5L957.5 405.5L957.5 406.5L970 406.5L970 405.5Z" fill="white"/>
// </g>
// </g>
// </g>
// <g id="top-keys">
// <g id="btn_esc">
// <rect x="4" y="4" width="67.75" height="68" rx="5.66929" fill="#0078A3"/>
// <path id=".standart-symbol-white_23" d="M21.8857 39H29.2578V37.0984H24.1921V34.4936H28.8583V32.592H24.1921V29.9925H29.2365V28.0909H21.8857V39ZM37.8351 33.1513C37.6327 31.6438 36.4182 30.7116 34.3515 30.7116C32.2581 30.7116 30.8785 31.6811 30.8838 33.2578C30.8785 34.483 31.6508 35.2766 33.2488 35.5962L34.6657 35.8786C35.3795 36.0224 35.7045 36.2834 35.7151 36.6935C35.7045 37.1783 35.1771 37.5245 34.3834 37.5245C33.5738 37.5245 33.0358 37.1783 32.8973 36.5124L30.6654 36.6296C30.8785 38.1957 32.2101 39.1598 34.3781 39.1598C36.4981 39.1598 38.0162 38.0785 38.0216 36.4645C38.0162 35.282 37.2439 34.5735 35.6565 34.2486L34.1757 33.9503C33.414 33.7852 33.1317 33.5241 33.137 33.13C33.1317 32.6399 33.6856 32.3203 34.3888 32.3203C35.1771 32.3203 35.6459 32.7518 35.7577 33.2791L37.8351 33.1513ZM43.1472 39.1598C45.3258 39.1598 46.6948 37.8814 46.8013 36.0011H44.66C44.5268 36.8746 43.9515 37.3647 43.1738 37.3647C42.1138 37.3647 41.4267 36.4751 41.4267 34.9091C41.4267 33.3643 42.1191 32.4801 43.1738 32.4801C44.0048 32.4801 44.5375 33.0288 44.66 33.8438H46.8013C46.7054 31.9528 45.2725 30.7116 43.1365 30.7116C40.6543 30.7116 39.1202 32.4322 39.1202 34.9411C39.1202 37.4286 40.6277 39.1598 43.1472 39.1598Z" fill="white"/>
// </g>
// <g id="btn_F1.color-regular">
// <rect x="75.75" y="4" width="67.75" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_67" d="M93.6357 39H95.9421V34.4936H100.379V32.592H95.9421V29.9925H100.859V28.0909H93.6357V39ZM107.092 28.0909H104.924L102.224 29.8008V31.8462L104.722 30.2802H104.786V39H107.092V28.0909Z" fill="#629990"/>
// </g>
// <g id="btn_F2.color-regular">
// <rect x="147.5" y="4" width="67.75" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_68" d="M165.386 39H167.692V34.4936H172.129V32.592H167.692V29.9925H172.609V28.0909H165.386V39ZM174.096 39H181.873V37.1143H177.292V37.0398L178.885 35.479C181.127 33.4336 181.729 32.4109 181.729 31.1697C181.729 29.2788 180.185 27.9418 177.846 27.9418C175.556 27.9418 173.984 29.3107 173.99 31.4521H176.179C176.174 30.408 176.834 29.7688 177.83 29.7688C178.789 29.7688 179.503 30.3654 179.503 31.3242C179.503 32.1925 178.97 32.7891 177.979 33.7425L174.096 37.3381V39Z" fill="#629990"/>
// </g>
// <g id="btn_F3.color-regular">
// <rect x="219.25" y="4" width="67.75" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_69" d="M237.136 39H239.442V34.4936H243.879V32.592H239.442V29.9925H244.359V28.0909H237.136V39ZM249.878 39.1491C252.329 39.1491 254.081 37.8015 254.076 35.9371C254.081 34.5788 253.218 33.6094 251.615 33.407V33.3217C252.835 33.1033 253.676 32.2404 253.671 31.0153C253.676 29.2947 252.169 27.9418 249.91 27.9418C247.673 27.9418 245.99 29.2521 245.958 31.1378H248.169C248.195 30.3068 248.957 29.7688 249.9 29.7688C250.832 29.7688 251.455 30.3335 251.45 31.1538C251.455 32.0114 250.725 32.592 249.676 32.592H248.659V34.2859H249.676C250.912 34.2859 251.684 34.9038 251.679 35.7827C251.684 36.6509 250.938 37.2475 249.884 37.2475C248.866 37.2475 248.105 36.7148 248.062 35.9158H245.74C245.777 37.8228 247.481 39.1491 249.878 39.1491Z" fill="#629990"/>
// </g>
// <g id="btn_F4.color-regular">
// <rect x="291" y="4" width="67.75" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id=".standart_symbol-color_70" d="M308.886 39H311.192V34.4936H315.629V32.592H311.192V29.9925H316.109V28.0909H308.886V39ZM317.431 37.0824H322.667V39H324.872V37.0824H326.225V35.234H324.872V28.0909H321.985L317.431 35.266V37.0824ZM322.71 35.234H319.753V35.1488L322.625 30.6051H322.71V35.234Z" fill="#629990"/>
// </g>
// <g id="btn_F5.functional-buttons">
// <rect x="362.75" y="4" width="67.75" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_24" d="M380.636 39H382.942V34.4936H387.379V32.592H382.942V29.9925H387.859V28.0909H380.636V39ZM393.331 39.1491C395.759 39.1491 397.411 37.5671 397.405 35.3619C397.411 33.2738 395.951 31.7717 393.986 31.7717C393.027 31.7717 392.201 32.1712 391.818 32.7092H391.754L392.036 29.9766H396.804V28.0909H390.134L389.618 33.8438L391.669 34.2113C392.004 33.7585 392.654 33.4762 393.299 33.4762C394.396 33.4815 395.184 34.2752 395.184 35.4205C395.184 36.555 394.412 37.3381 393.331 37.3381C392.414 37.3381 391.674 36.7628 391.621 35.9158H389.383C389.426 37.8015 391.072 39.1491 393.331 39.1491Z" fill="white"/>
// </g>
// <g id="btn_F6.functional-buttons">
// <rect x="434.5" y="4" width="67.75" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_25" d="M452.386 39H454.692V34.4936H459.129V32.592H454.692V29.9925H459.609V28.0909H452.386V39ZM465.283 39.1491C467.712 39.1598 469.369 37.5671 469.363 35.3459C469.369 33.3004 467.941 31.8249 466.007 31.8249C464.809 31.8249 463.749 32.4002 463.259 33.3643H463.184C463.195 31.239 463.941 29.918 465.363 29.918C466.199 29.918 466.801 30.3761 466.977 31.1378H469.251C469.033 29.3427 467.541 27.9418 465.363 27.9418C462.668 27.9418 460.936 30.1257 460.926 33.7905C460.92 37.7855 463.04 39.1385 465.283 39.1491ZM465.272 37.3381C464.207 37.3381 463.419 36.4805 463.419 35.4151C463.424 34.3551 464.228 33.4922 465.288 33.4922C466.354 33.4922 467.131 34.3285 467.126 35.4098C467.131 36.5018 466.338 37.3381 465.272 37.3381Z" fill="white"/>
// </g>
// <g id="btn_F7.functional-buttons">
// <rect x="506.25" y="4" width="67.75" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_26" d="M524.136 39H526.442V34.4936H530.879V32.592H526.442V29.9925H531.359V28.0909H524.136V39ZM533.278 39H535.659L540.186 30.0032V28.0909H532.532V29.9766H537.8V30.0511L533.278 39Z" fill="white"/>
// </g>
// <g id="btn_F8.functional-buttons">
// <rect x="578" y="4" width="67.75" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_27" d="M595.886 39H598.192V34.4936H602.629V32.592H598.192V29.9925H603.109V28.0909H595.886V39ZM608.666 39.1491C611.127 39.1491 612.895 37.8335 612.9 36.065C612.895 34.7013 611.846 33.5881 610.535 33.3697V33.2951C611.675 33.0607 612.49 32.0753 612.496 30.8768C612.49 29.1882 610.871 27.9418 608.666 27.9418C606.455 27.9418 604.836 29.1882 604.841 30.8768C604.836 32.07 605.64 33.0607 606.801 33.2951V33.3697C605.47 33.5881 604.431 34.7013 604.436 36.065C604.431 37.8335 606.205 39.1491 608.666 39.1491ZM608.666 37.4553C607.568 37.4553 606.833 36.8054 606.833 35.8839C606.833 34.9411 607.606 34.2592 608.666 34.2592C609.72 34.2592 610.498 34.9411 610.498 35.8839C610.498 36.8107 609.758 37.4553 608.666 37.4553ZM608.666 32.5813C607.744 32.5813 607.089 31.9794 607.089 31.1165C607.089 30.2642 607.734 29.6783 608.666 29.6783C609.593 29.6783 610.242 30.2695 610.242 31.1165C610.242 31.9794 609.582 32.5813 608.666 32.5813Z" fill="white"/>
// </g>
// <g id="btn_F9.color-regular">
// <rect x="649.75" y="4" width="67.75" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id="Function Keys (15pt)" d="M667.636 39H669.942V34.4936H674.379V32.592H669.942V29.9925H674.859V28.0909H667.636V39ZM680.293 27.9418C677.854 27.9311 676.208 29.5291 676.218 31.7237C676.224 33.7585 677.635 35.234 679.569 35.234C680.767 35.234 681.833 34.6534 682.317 33.6946H682.392C682.387 35.8572 681.636 37.1729 680.213 37.1729C679.377 37.1729 678.775 36.7148 678.599 35.9212H676.325C676.538 37.7589 678.029 39.1491 680.213 39.1491C682.914 39.1491 684.656 36.9652 684.65 33.2631C684.645 29.3107 682.536 27.9524 680.293 27.9418ZM680.309 29.7528C681.369 29.7528 682.152 30.6158 682.163 31.6545C682.168 32.6985 681.343 33.5614 680.288 33.5614C679.223 33.5614 678.461 32.7305 678.456 31.6598C678.445 30.5945 679.239 29.7528 680.309 29.7528Z" fill="#629990"/>
// </g>
// <g id="btn_F10.color-regular">
// <rect x="721.5" y="4" width="67.75" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id="Function Keys (15pt)_2" d="M739.386 39H741.692V34.4936H746.129V32.592H741.692V29.9925H746.609V28.0909H739.386V39ZM752.842 28.0909H750.674L747.974 29.8008V31.8462L750.472 30.2802H750.536V39H752.842V28.0909ZM759.712 39.2397C762.456 39.2397 764.112 37.1516 764.118 33.5561C764.123 29.9872 762.445 27.9418 759.712 27.9418C756.974 27.9418 755.312 29.9819 755.307 33.5561C755.297 37.141 756.964 39.2344 759.712 39.2397ZM759.712 37.3274C758.461 37.3274 757.651 36.0703 757.656 33.5561C757.662 31.0792 758.466 29.8327 759.712 29.8327C760.953 29.8327 761.763 31.0792 761.763 33.5561C761.768 36.0703 760.959 37.3274 759.712 37.3274Z" fill="#629990"/>
// </g>
// <g id="btn_F11.color-regular">
// <rect x="793.25" y="4" width="67.75" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id="Function Keys (15pt)_3" d="M811.136 39H813.442V34.4936H817.879V32.592H813.442V29.9925H818.359V28.0909H811.136V39ZM824.592 28.0909H822.424L819.724 29.8008V31.8462L822.222 30.2802H822.286V39H824.592V28.0909ZM831.931 28.0909H829.763L827.062 29.8008V31.8462L829.561 30.2802H829.625V39H831.931V28.0909Z" fill="#629990"/>
// </g>
// <g id="btn_F12.color-regular">
// <rect x="865" y="4" width="67.75" height="68" rx="5.66929" fill="#E1D8CD"/>
// <path id="Function Keys (15pt)_4" d="M882.886 39H885.192V34.4936H889.629V32.592H885.192V29.9925H890.109V28.0909H882.886V39ZM896.342 28.0909H894.174L891.474 29.8008V31.8462L893.972 30.2802H894.036V39H896.342V28.0909ZM898.935 39H906.712V37.1143H902.131V37.0398L903.724 35.479C905.966 33.4336 906.568 32.4109 906.568 31.1697C906.568 29.2788 905.023 27.9418 902.685 27.9418C900.395 27.9418 898.823 29.3107 898.828 31.4521H901.018C901.012 30.408 901.673 29.7688 902.669 29.7688C903.628 29.7688 904.342 30.3654 904.342 31.3242C904.342 32.1925 903.809 32.7891 902.818 33.7425L898.935 37.3381V39Z" fill="#629990"/>
// </g>
// <g id="btn_prt_scr.functional-buttons">
// <rect x="936.75" y="4" width="67.75" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_28" d="M954.383 38H956.074V35.4062H957.496C959.336 35.4062 960.406 34.3086 960.406 32.7109C960.406 31.1211 959.355 30 957.539 30H954.383V38ZM956.074 34.0508V31.3828H957.215C958.191 31.3828 958.664 31.9141 958.664 32.7109C958.664 33.5039 958.191 34.0508 957.223 34.0508H956.074ZM961.474 38H963.138V34.6055C963.138 33.8672 963.677 33.3594 964.411 33.3594C964.642 33.3594 964.958 33.3984 965.114 33.4492V31.9727C964.966 31.9375 964.759 31.9141 964.591 31.9141C963.919 31.9141 963.368 32.3047 963.149 33.0469H963.087V32H961.474V38ZM969.467 32H968.338V30.5625H966.674V32H965.854V33.25H966.674V36.375C966.666 37.5508 967.467 38.1328 968.674 38.082C969.104 38.0664 969.408 37.9805 969.576 37.9258L969.314 36.6875C969.232 36.7031 969.057 36.7422 968.9 36.7422C968.568 36.7422 968.338 36.6172 968.338 36.1562V33.25H969.467V32ZM977.468 32.3008H979.089C979.065 30.875 977.894 29.8906 976.112 29.8906C974.358 29.8906 973.073 30.8594 973.081 32.3125C973.077 33.4922 973.909 34.168 975.261 34.4922L976.132 34.7109C977.003 34.9219 977.487 35.1719 977.491 35.7109C977.487 36.2969 976.933 36.6953 976.073 36.6953C975.194 36.6953 974.562 36.2891 974.507 35.4883H972.87C972.913 37.2188 974.151 38.1133 976.093 38.1133C978.046 38.1133 979.194 37.1797 979.198 35.7148C979.194 34.3828 978.19 33.6758 976.8 33.3633L976.081 33.1914C975.386 33.0312 974.804 32.7734 974.815 32.1992C974.815 31.6836 975.272 31.3047 976.101 31.3047C976.909 31.3047 977.405 31.6719 977.468 32.3008ZM983.016 38.1172C984.613 38.1172 985.617 37.1797 985.695 35.8008H984.125C984.027 36.4414 983.605 36.8008 983.035 36.8008C982.258 36.8008 981.754 36.1484 981.754 35C981.754 33.8672 982.262 33.2187 983.035 33.2187C983.645 33.2187 984.035 33.6211 984.125 34.2188H985.695C985.625 32.832 984.574 31.9219 983.008 31.9219C981.188 31.9219 980.063 33.1836 980.063 35.0234C980.063 36.8477 981.168 38.1172 983.016 38.1172Z" fill="white"/>
// </g>
// <g id="btn_break.functional-buttons">
// <rect x="1008.5" y="4" width="67.75" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_29" d="M1026.13 31H1027.82V28.4062H1029.25C1031.09 28.4062 1032.16 27.3086 1032.16 25.7109C1032.16 24.1211 1031.11 23 1029.29 23H1026.13V31ZM1027.82 27.0508V24.3828H1028.96C1029.94 24.3828 1030.41 24.9141 1030.41 25.7109C1030.41 26.5039 1029.94 27.0508 1028.97 27.0508H1027.82ZM1034.77 31.1133C1035.66 31.1133 1036.23 30.7266 1036.53 30.168H1036.57V31H1038.15V26.9531C1038.15 25.5234 1036.94 24.9219 1035.61 24.9219C1034.17 24.9219 1033.22 25.6094 1032.99 26.7031L1034.53 26.8281C1034.64 26.4297 1035 26.1367 1035.6 26.1367C1036.16 26.1367 1036.49 26.4219 1036.49 26.9141V26.9375C1036.49 27.3242 1036.08 27.375 1035.04 27.4766C1033.85 27.5859 1032.78 27.9844 1032.78 29.3242C1032.78 30.5117 1033.63 31.1133 1034.77 31.1133ZM1035.25 29.9648C1034.74 29.9648 1034.37 29.7266 1034.37 29.2695C1034.37 28.8008 1034.76 28.5703 1035.34 28.4883C1035.71 28.4375 1036.3 28.3516 1036.5 28.2188V28.8555C1036.5 29.4844 1035.98 29.9648 1035.25 29.9648ZM1043.29 28.4453C1043.29 29.25 1042.74 29.6719 1042.15 29.6719C1041.52 29.6719 1041.11 29.2305 1041.11 28.5234V25H1039.44V28.8203C1039.45 30.2227 1040.27 31.0781 1041.47 31.0781C1042.38 31.0781 1043.03 30.6133 1043.29 29.9102H1043.36V31H1044.96V25H1043.29V28.4453ZM1051.28 26.7109C1051.13 25.6055 1050.24 24.9219 1048.72 24.9219C1047.19 24.9219 1046.18 25.6328 1046.18 26.7891C1046.18 27.6875 1046.74 28.2695 1047.92 28.5039L1048.95 28.7109C1049.48 28.8164 1049.72 29.0078 1049.72 29.3086C1049.72 29.6641 1049.33 29.918 1048.75 29.918C1048.15 29.918 1047.76 29.6641 1047.66 29.1758L1046.02 29.2617C1046.18 30.4102 1047.15 31.1172 1048.74 31.1172C1050.3 31.1172 1051.41 30.3242 1051.42 29.1406C1051.41 28.2734 1050.84 27.7539 1049.68 27.5156L1048.59 27.2969C1048.04 27.1758 1047.83 26.9844 1047.83 26.6953C1047.83 26.3359 1048.24 26.1016 1048.75 26.1016C1049.33 26.1016 1049.67 26.418 1049.75 26.8047L1051.28 26.7109ZM1055.2 31.1172C1056.68 31.1172 1057.68 30.3945 1057.92 29.2812L1056.38 29.1797C1056.21 29.6367 1055.78 29.875 1055.22 29.875C1054.39 29.875 1053.87 29.3242 1053.87 28.4297V28.4258H1057.95V27.9687C1057.95 25.9297 1056.72 24.9219 1055.13 24.9219C1053.37 24.9219 1052.22 26.1758 1052.22 28.0273C1052.22 29.9297 1053.35 31.1172 1055.2 31.1172ZM1053.87 27.3945C1053.9 26.7109 1054.42 26.1641 1055.16 26.1641C1055.88 26.1641 1056.38 26.6797 1056.38 27.3945H1053.87ZM1026.13 44H1029.55C1031.35 44 1032.3 43.0625 1032.3 41.7891C1032.3 40.6055 1031.46 39.8906 1030.55 39.8477V39.7695C1031.38 39.582 1031.99 38.9922 1031.99 38.0508C1031.99 36.8516 1031.1 36 1029.34 36H1026.13V44ZM1027.82 42.6172V40.4922H1029.24C1030.05 40.4922 1030.56 40.9609 1030.56 41.6211C1030.56 42.2227 1030.15 42.6172 1029.2 42.6172H1027.82ZM1027.82 39.3477V37.3672H1029.11C1029.86 37.3672 1030.29 37.7539 1030.29 38.332C1030.29 38.9648 1029.77 39.3477 1029.08 39.3477H1027.82ZM1033.37 44H1035.04V40.6055C1035.04 39.8672 1035.58 39.3594 1036.31 39.3594C1036.54 39.3594 1036.86 39.3984 1037.01 39.4492V37.9727C1036.87 37.9375 1036.66 37.9141 1036.49 37.9141C1035.82 37.9141 1035.27 38.3047 1035.05 39.0469H1034.99V38H1033.37V44ZM1040.33 44.1172C1041.81 44.1172 1042.81 43.3945 1043.05 42.2812L1041.51 42.1797C1041.34 42.6367 1040.91 42.875 1040.36 42.875C1039.53 42.875 1039 42.3242 1039 41.4297V41.4258H1043.08V40.9687C1043.08 38.9297 1041.85 37.9219 1040.26 37.9219C1038.5 37.9219 1037.35 39.1758 1037.35 41.0273C1037.35 42.9297 1038.48 44.1172 1040.33 44.1172ZM1039 40.3945C1039.03 39.7109 1039.55 39.1641 1040.29 39.1641C1041.01 39.1641 1041.51 39.6797 1041.52 40.3945H1039ZM1045.88 44.1133C1046.77 44.1133 1047.34 43.7266 1047.63 43.168H1047.68V44H1049.26V39.9531C1049.26 38.5234 1048.05 37.9219 1046.71 37.9219C1045.28 37.9219 1044.33 38.6094 1044.1 39.7031L1045.64 39.8281C1045.75 39.4297 1046.11 39.1367 1046.71 39.1367C1047.27 39.1367 1047.6 39.4219 1047.6 39.9141V39.9375C1047.6 40.3242 1047.19 40.375 1046.14 40.4766C1044.96 40.5859 1043.89 40.9844 1043.89 42.3242C1043.89 43.5117 1044.74 44.1133 1045.88 44.1133ZM1046.36 42.9648C1045.85 42.9648 1045.48 42.7266 1045.48 42.2695C1045.48 41.8008 1045.87 41.5703 1046.45 41.4883C1046.81 41.4375 1047.41 41.3516 1047.61 41.2188V41.8555C1047.61 42.4844 1047.09 42.9648 1046.36 42.9648ZM1050.55 44H1052.21V42.0938L1052.66 41.582L1054.3 44H1056.25L1053.91 40.5977L1056.14 38H1054.23L1052.3 40.2773H1052.21V36H1050.55V44Z" fill="white"/>
// </g>
// <g id="btn_del.functional-buttons">
// <rect x="1080.25" y="4" width="67.75" height="68" rx="5.66929" fill="#A8A8A6"/>
// <path id=".standart-symbol-white_30" d="M1100.72 38C1103.16 38 1104.63 36.4922 1104.63 33.9922C1104.63 31.5 1103.16 30 1100.74 30H1097.88V38H1100.72ZM1099.57 36.5508V31.4492H1100.65C1102.15 31.4492 1102.95 32.2148 1102.95 33.9922C1102.95 35.7773 1102.15 36.5508 1100.65 36.5508H1099.57ZM1108.59 38.1172C1110.07 38.1172 1111.07 37.3945 1111.31 36.2812L1109.77 36.1797C1109.6 36.6367 1109.17 36.875 1108.62 36.875C1107.78 36.875 1107.26 36.3242 1107.26 35.4297V35.4258H1111.34V34.9687C1111.34 32.9297 1110.11 31.9219 1108.52 31.9219C1106.76 31.9219 1105.61 33.1758 1105.61 35.0273C1105.61 36.9297 1106.74 38.1172 1108.59 38.1172ZM1107.26 34.3945C1107.29 33.7109 1107.81 33.1641 1108.55 33.1641C1109.27 33.1641 1109.77 33.6797 1109.78 34.3945H1107.26ZM1114.09 30H1112.43V38H1114.09V30Z" fill="white"/>
// </g>
// </g>
// </g>
// </svg>`

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && root.host) {
        return root;
    }
    return node.ownerDocument;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
// unfortunately this can't be a constant as that wouldn't be tree-shakeable
// so we cache the result instead
let crossorigin;
function is_crossorigin() {
    if (crossorigin === undefined) {
        crossorigin = false;
        try {
            if (typeof window !== 'undefined' && window.parent) {
                void window.parent.document;
            }
        }
        catch (error) {
            crossorigin = true;
        }
    }
    return crossorigin;
}
function add_resize_listener(node, fn) {
    const computed_style = getComputedStyle(node);
    if (computed_style.position === 'static') {
        node.style.position = 'relative';
    }
    const iframe = element('iframe');
    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
    iframe.setAttribute('aria-hidden', 'true');
    iframe.tabIndex = -1;
    const crossorigin = is_crossorigin();
    let unsubscribe;
    if (crossorigin) {
        iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
        unsubscribe = listen(window, 'message', (event) => {
            if (event.source === iframe.contentWindow)
                fn();
        });
    }
    else {
        iframe.src = 'about:blank';
        iframe.onload = () => {
            unsubscribe = listen(iframe.contentWindow, 'resize', fn);
        };
    }
    append(node, iframe);
    return () => {
        if (crossorigin) {
            unsubscribe();
        }
        else if (unsubscribe && iframe.contentWindow) {
            unsubscribe();
        }
        detach(iframe);
    };
}
function custom_event(type, detail, bubbles = false) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

// function hilite(keys: Array<string>, how: Object) {
//   // need to check if existing key combo is overridden by undefining it
//   if (keys && keys[1][0] !== undefined) {
//     return how + keys.flat(2).join('+').replace('Mod', 'Ctrl') + how
//   } else {
//     return how + '–' + how
//   }
// }
//@ts-ignore
// function getHotkey(arr: Array<any>, highlight = true) {
//   let hi = highlight ? '**' : ''
//   let defkeys = arr.hotkeys
//     ? [
//         [getNestedObject(arr.hotkeys, [0, 'modifiers'])],
//         [getNestedObject(arr.hotkeys, [0, 'key'])],
//       ]
//     : undefined
//   let ck = app.hotkeyManager.customKeys[arr.id]
//   var hotkeys = ck
//     ? [
//         [getNestedObject(ck, [0, 'modifiers'])],
//         [getNestedObject(ck, [0, 'key'])],
//       ]
//     : undefined
//   return hotkeys ? hilite(hotkeys, hi) : hilite(defkeys, '')
// }
//@ts-ignore
function getCommands(app) {
    let commands = Object.values(app.commands.commands);
    console.log(Object.values(app.commands.commands));
    function checkUndefinedCommands(item) {
        // function to remove undefined and without hotkeys
        if (item.hotkeys != undefined && item.hotkeys.length < 0) {
            console.log(item);
        }
        return item.hotkeys != undefined;
        // && item.hotkeys.length > 0
    }
    commands = commands.filter(checkUndefinedCommands);
    console.log(commands);
    // commands.filter((command) =>
    //   command.hotkeys === undefined && command.hotkeys.length > 0
    //     ? console.log(command.hotkeys)
    //     : false
    // )
    // need to check if existing key combo is overridden by undefining it
    // let defkeys = commands
    //   ? [
    //       [getNestedObject(commands, [0, 'modifiers'])],
    //       [getNestedObject(commands, [0, 'key'])],
    //     ]
    //   : undefined
    // let ck = app.hotkeyManager.customKeys
    // var hotkeys = ck
    //   ? [
    //       [getNestedObject(ck, [0, 'modifiers'])],
    //       [getNestedObject(ck, [0, 'key'])],
    //     ]
    //   : undefined
    // console.log('app.commands:')
    // console.log(app.commands)
    console.log('commands:');
    console.log(commands);
    // console.log('defkeys:')
    // console.log(defkeys)
    // console.log('hotkeys:')
    // console.log(hotkeys)
    return commands;
}
// export const commands: Command[] = Object.values(this.app.commands.commands)

/* src\Components\KeyboardKey.svelte generated by Svelte v3.44.2 */

function add_css$2(target) {
	append_styles(target, "svelte-ki1w50", ".kb-layout-key.svelte-ki1w50{height:3em !important;flex-basis:5.6%;white-space:nowrap;border-radius:4px;color:var(--text-normal);background-color:var(--background-modifier-border);margin-right:0.3em;margin-bottom:0.3em;padding-left:1%;padding-right:1%}.kb-layout-key.svelte-ki1w50:hover{background-color:var(--interactive-accent);user-select:none;-moz-user-select:none;-khtml-user-select:none;-webkit-user-select:none;-o-user-select:none}.small.svelte-ki1w50{font-size:75%;line-height:1rem;text-align:left}");
}

function create_fragment$2(ctx) {
	let div;
	let raw_value = /*Key*/ ctx[1].label + "";
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", "kb-layout-key small svelte-ki1w50");
			attr(div, "id", /*label*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			div.innerHTML = raw_value;

			if (!mounted) {
				dispose = listen(div, "click", /*handleClick*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*label*/ 1) {
				attr(div, "id", /*label*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { color = '#ccccc' } = $$props;
	let { label = '🍔' } = $$props;
	let { output = '🍔' } = $$props;
	let { x = 0 } = $$props;
	let { y = 0 } = $$props;
	let { width = 100 } = $$props;
	let { height = 100 } = $$props;

	let Key = {
		color,
		label,
		output,
		x,
		y,
		width,
		height
	};

	const dispatch = createEventDispatcher();

	const handleClick = () => {
		dispatch('keyClick', Key);
	};

	$$self.$$set = $$props => {
		if ('color' in $$props) $$invalidate(3, color = $$props.color);
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('output' in $$props) $$invalidate(4, output = $$props.output);
		if ('x' in $$props) $$invalidate(5, x = $$props.x);
		if ('y' in $$props) $$invalidate(6, y = $$props.y);
		if ('width' in $$props) $$invalidate(7, width = $$props.width);
		if ('height' in $$props) $$invalidate(8, height = $$props.height);
	};

	return [label, Key, handleClick, color, output, x, y, width, height];
}

class KeyboardKey extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$2,
			create_fragment$2,
			safe_not_equal,
			{
				color: 3,
				label: 0,
				output: 4,
				x: 5,
				y: 6,
				width: 7,
				height: 8
			},
			add_css$2
		);
	}
}

var collectionUtils = createCommonjsModule(function (module) {

var utils = module.exports = {};

/**
 * Loops through the collection and calls the callback for each element. if the callback returns truthy, the loop is broken and returns the same value.
 * @public
 * @param {*} collection The collection to loop through. Needs to have a length property set and have indices set from 0 to length - 1.
 * @param {function} callback The callback to be called for each element. The element will be given as a parameter to the callback. If this callback returns truthy, the loop is broken and the same value is returned.
 * @returns {*} The value that a callback has returned (if truthy). Otherwise nothing.
 */
utils.forEach = function(collection, callback) {
    for(var i = 0; i < collection.length; i++) {
        var result = callback(collection[i]);
        if(result) {
            return result;
        }
    }
};
});

var elementUtils = function(options) {
    var getState = options.stateHandler.getState;

    /**
     * Tells if the element has been made detectable and ready to be listened for resize events.
     * @public
     * @param {element} The element to check.
     * @returns {boolean} True or false depending on if the element is detectable or not.
     */
    function isDetectable(element) {
        var state = getState(element);
        return state && !!state.isDetectable;
    }

    /**
     * Marks the element that it has been made detectable and ready to be listened for resize events.
     * @public
     * @param {element} The element to mark.
     */
    function markAsDetectable(element) {
        getState(element).isDetectable = true;
    }

    /**
     * Tells if the element is busy or not.
     * @public
     * @param {element} The element to check.
     * @returns {boolean} True or false depending on if the element is busy or not.
     */
    function isBusy(element) {
        return !!getState(element).busy;
    }

    /**
     * Marks the object is busy and should not be made detectable.
     * @public
     * @param {element} element The element to mark.
     * @param {boolean} busy If the element is busy or not.
     */
    function markBusy(element, busy) {
        getState(element).busy = !!busy;
    }

    return {
        isDetectable: isDetectable,
        markAsDetectable: markAsDetectable,
        isBusy: isBusy,
        markBusy: markBusy
    };
};

var listenerHandler = function(idHandler) {
    var eventListeners = {};

    /**
     * Gets all listeners for the given element.
     * @public
     * @param {element} element The element to get all listeners for.
     * @returns All listeners for the given element.
     */
    function getListeners(element) {
        var id = idHandler.get(element);

        if (id === undefined) {
            return [];
        }

        return eventListeners[id] || [];
    }

    /**
     * Stores the given listener for the given element. Will not actually add the listener to the element.
     * @public
     * @param {element} element The element that should have the listener added.
     * @param {function} listener The callback that the element has added.
     */
    function addListener(element, listener) {
        var id = idHandler.get(element);

        if(!eventListeners[id]) {
            eventListeners[id] = [];
        }

        eventListeners[id].push(listener);
    }

    function removeListener(element, listener) {
        var listeners = getListeners(element);
        for (var i = 0, len = listeners.length; i < len; ++i) {
            if (listeners[i] === listener) {
              listeners.splice(i, 1);
              break;
            }
        }
    }

    function removeAllListeners(element) {
      var listeners = getListeners(element);
      if (!listeners) { return; }
      listeners.length = 0;
    }

    return {
        get: getListeners,
        add: addListener,
        removeListener: removeListener,
        removeAllListeners: removeAllListeners
    };
};

var idGenerator = function() {
    var idCount = 1;

    /**
     * Generates a new unique id in the context.
     * @public
     * @returns {number} A unique id in the context.
     */
    function generate() {
        return idCount++;
    }

    return {
        generate: generate
    };
};

var idHandler = function(options) {
    var idGenerator     = options.idGenerator;
    var getState        = options.stateHandler.getState;

    /**
     * Gets the resize detector id of the element.
     * @public
     * @param {element} element The target element to get the id of.
     * @returns {string|number|null} The id of the element. Null if it has no id.
     */
    function getId(element) {
        var state = getState(element);

        if (state && state.id !== undefined) {
            return state.id;
        }

        return null;
    }

    /**
     * Sets the resize detector id of the element. Requires the element to have a resize detector state initialized.
     * @public
     * @param {element} element The target element to set the id of.
     * @returns {string|number|null} The id of the element.
     */
    function setId(element) {
        var state = getState(element);

        if (!state) {
            throw new Error("setId required the element to have a resize detection state.");
        }

        var id = idGenerator.generate();

        state.id = id;

        return id;
    }

    return {
        get: getId,
        set: setId
    };
};

/* global console: false */

/**
 * Reporter that handles the reporting of logs, warnings and errors.
 * @public
 * @param {boolean} quiet Tells if the reporter should be quiet or not.
 */
var reporter = function(quiet) {
    function noop() {
        //Does nothing.
    }

    var reporter = {
        log: noop,
        warn: noop,
        error: noop
    };

    if(!quiet && window.console) {
        var attachFunction = function(reporter, name) {
            //The proxy is needed to be able to call the method with the console context,
            //since we cannot use bind.
            reporter[name] = function reporterProxy() {
                var f = console[name];
                if (f.apply) { //IE9 does not support console.log.apply :)
                    f.apply(console, arguments);
                } else {
                    for (var i = 0; i < arguments.length; i++) {
                        f(arguments[i]);
                    }
                }
            };
        };

        attachFunction(reporter, "log");
        attachFunction(reporter, "warn");
        attachFunction(reporter, "error");
    }

    return reporter;
};

var browserDetector = createCommonjsModule(function (module) {

var detector = module.exports = {};

detector.isIE = function(version) {
    function isAnyIeVersion() {
        var agent = navigator.userAgent.toLowerCase();
        return agent.indexOf("msie") !== -1 || agent.indexOf("trident") !== -1 || agent.indexOf(" edge/") !== -1;
    }

    if(!isAnyIeVersion()) {
        return false;
    }

    if(!version) {
        return true;
    }

    //Shamelessly stolen from https://gist.github.com/padolsey/527683
    var ieVersion = (function(){
        var undef,
            v = 3,
            div = document.createElement("div"),
            all = div.getElementsByTagName("i");

        do {
            div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->";
        }
        while (all[0]);

        return v > 4 ? v : undef;
    }());

    return version === ieVersion;
};

detector.isLegacyOpera = function() {
    return !!window.opera;
};
});

var utils_1 = createCommonjsModule(function (module) {

var utils = module.exports = {};

utils.getOption = getOption;

function getOption(options, name, defaultValue) {
    var value = options[name];

    if((value === undefined || value === null) && defaultValue !== undefined) {
        return defaultValue;
    }

    return value;
}
});

var batchProcessor = function batchProcessorMaker(options) {
    options             = options || {};
    var reporter        = options.reporter;
    var asyncProcess    = utils_1.getOption(options, "async", true);
    var autoProcess     = utils_1.getOption(options, "auto", true);

    if(autoProcess && !asyncProcess) {
        reporter && reporter.warn("Invalid options combination. auto=true and async=false is invalid. Setting async=true.");
        asyncProcess = true;
    }

    var batch = Batch();
    var asyncFrameHandler;
    var isProcessing = false;

    function addFunction(level, fn) {
        if(!isProcessing && autoProcess && asyncProcess && batch.size() === 0) {
            // Since this is async, it is guaranteed to be executed after that the fn is added to the batch.
            // This needs to be done before, since we're checking the size of the batch to be 0.
            processBatchAsync();
        }

        batch.add(level, fn);
    }

    function processBatch() {
        // Save the current batch, and create a new batch so that incoming functions are not added into the currently processing batch.
        // Continue processing until the top-level batch is empty (functions may be added to the new batch while processing, and so on).
        isProcessing = true;
        while (batch.size()) {
            var processingBatch = batch;
            batch = Batch();
            processingBatch.process();
        }
        isProcessing = false;
    }

    function forceProcessBatch(localAsyncProcess) {
        if (isProcessing) {
            return;
        }

        if(localAsyncProcess === undefined) {
            localAsyncProcess = asyncProcess;
        }

        if(asyncFrameHandler) {
            cancelFrame(asyncFrameHandler);
            asyncFrameHandler = null;
        }

        if(localAsyncProcess) {
            processBatchAsync();
        } else {
            processBatch();
        }
    }

    function processBatchAsync() {
        asyncFrameHandler = requestFrame(processBatch);
    }

    function cancelFrame(listener) {
        // var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;
        var cancel = clearTimeout;
        return cancel(listener);
    }

    function requestFrame(callback) {
        // var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function(fn) { return window.setTimeout(fn, 20); };
        var raf = function(fn) { return setTimeout(fn, 0); };
        return raf(callback);
    }

    return {
        add: addFunction,
        force: forceProcessBatch
    };
};

function Batch() {
    var batch       = {};
    var size        = 0;
    var topLevel    = 0;
    var bottomLevel = 0;

    function add(level, fn) {
        if(!fn) {
            fn = level;
            level = 0;
        }

        if(level > topLevel) {
            topLevel = level;
        } else if(level < bottomLevel) {
            bottomLevel = level;
        }

        if(!batch[level]) {
            batch[level] = [];
        }

        batch[level].push(fn);
        size++;
    }

    function process() {
        for(var level = bottomLevel; level <= topLevel; level++) {
            var fns = batch[level];

            for(var i = 0; i < fns.length; i++) {
                var fn = fns[i];
                fn();
            }
        }
    }

    function getSize() {
        return size;
    }

    return {
        add: add,
        process: process,
        size: getSize
    };
}

var prop = "_erd";

function initState(element) {
    element[prop] = {};
    return getState(element);
}

function getState(element) {
    return element[prop];
}

function cleanState(element) {
    delete element[prop];
}

var stateHandler = {
    initState: initState,
    getState: getState,
    cleanState: cleanState
};

/**
 * Resize detection strategy that injects objects to elements in order to detect resize events.
 * Heavily inspired by: http://www.backalleycoder.com/2013/03/18/cross-browser-event-based-element-resize-detection/
 */



var object = function(options) {
    options             = options || {};
    var reporter        = options.reporter;
    var batchProcessor  = options.batchProcessor;
    var getState        = options.stateHandler.getState;

    if(!reporter) {
        throw new Error("Missing required dependency: reporter.");
    }

    /**
     * Adds a resize event listener to the element.
     * @public
     * @param {element} element The element that should have the listener added.
     * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.
     */
    function addListener(element, listener) {
        function listenerProxy() {
            listener(element);
        }

        if(browserDetector.isIE(8)) {
            //IE 8 does not support object, but supports the resize event directly on elements.
            getState(element).object = {
                proxy: listenerProxy
            };
            element.attachEvent("onresize", listenerProxy);
        } else {
            var object = getObject(element);

            if(!object) {
                throw new Error("Element is not detectable by this strategy.");
            }

            object.contentDocument.defaultView.addEventListener("resize", listenerProxy);
        }
    }

    function buildCssTextString(rules) {
        var seperator = options.important ? " !important; " : "; ";

        return (rules.join(seperator) + seperator).trim();
    }

    /**
     * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.
     * @private
     * @param {object} options Optional options object.
     * @param {element} element The element to make detectable
     * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.
     */
    function makeDetectable(options, element, callback) {
        if (!callback) {
            callback = element;
            element = options;
            options = null;
        }

        options = options || {};
        options.debug;

        function injectObject(element, callback) {
            var OBJECT_STYLE = buildCssTextString(["display: block", "position: absolute", "top: 0", "left: 0", "width: 100%", "height: 100%", "border: none", "padding: 0", "margin: 0", "opacity: 0", "z-index: -1000", "pointer-events: none"]);

            //The target element needs to be positioned (everything except static) so the absolute positioned object will be positioned relative to the target element.

            // Position altering may be performed directly or on object load, depending on if style resolution is possible directly or not.
            var positionCheckPerformed = false;

            // The element may not yet be attached to the DOM, and therefore the style object may be empty in some browsers.
            // Since the style object is a reference, it will be updated as soon as the element is attached to the DOM.
            var style = window.getComputedStyle(element);
            var width = element.offsetWidth;
            var height = element.offsetHeight;

            getState(element).startSize = {
                width: width,
                height: height
            };

            function mutateDom() {
                function alterPositionStyles() {
                    if(style.position === "static") {
                        element.style.setProperty("position", "relative", options.important ? "important" : "");

                        var removeRelativeStyles = function(reporter, element, style, property) {
                            function getNumericalValue(value) {
                                return value.replace(/[^-\d\.]/g, "");
                            }

                            var value = style[property];

                            if(value !== "auto" && getNumericalValue(value) !== "0") {
                                reporter.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element);
                                element.style.setProperty(property, "0", options.important ? "important" : "");
                            }
                        };

                        //Check so that there are no accidental styles that will make the element styled differently now that is is relative.
                        //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).
                        removeRelativeStyles(reporter, element, style, "top");
                        removeRelativeStyles(reporter, element, style, "right");
                        removeRelativeStyles(reporter, element, style, "bottom");
                        removeRelativeStyles(reporter, element, style, "left");
                    }
                }

                function onObjectLoad() {
                    // The object has been loaded, which means that the element now is guaranteed to be attached to the DOM.
                    if (!positionCheckPerformed) {
                        alterPositionStyles();
                    }

                    /*jshint validthis: true */

                    function getDocument(element, callback) {
                        //Opera 12 seem to call the object.onload before the actual document has been created.
                        //So if it is not present, poll it with an timeout until it is present.
                        //TODO: Could maybe be handled better with object.onreadystatechange or similar.
                        if(!element.contentDocument) {
                            var state = getState(element);
                            if (state.checkForObjectDocumentTimeoutId) {
                                window.clearTimeout(state.checkForObjectDocumentTimeoutId);
                            }
                            state.checkForObjectDocumentTimeoutId = setTimeout(function checkForObjectDocument() {
                                state.checkForObjectDocumentTimeoutId = 0;
                                getDocument(element, callback);
                            }, 100);

                            return;
                        }

                        callback(element.contentDocument);
                    }

                    //Mutating the object element here seems to fire another load event.
                    //Mutating the inner document of the object element is fine though.
                    var objectElement = this;

                    //Create the style element to be added to the object.
                    getDocument(objectElement, function onObjectDocumentReady(objectDocument) {
                        //Notify that the element is ready to be listened to.
                        callback(element);
                    });
                }

                // The element may be detached from the DOM, and some browsers does not support style resolving of detached elements.
                // The alterPositionStyles needs to be delayed until we know the element has been attached to the DOM (which we are sure of when the onObjectLoad has been fired), if style resolution is not possible.
                if (style.position !== "") {
                    alterPositionStyles();
                    positionCheckPerformed = true;
                }

                //Add an object element as a child to the target element that will be listened to for resize events.
                var object = document.createElement("object");
                object.style.cssText = OBJECT_STYLE;
                object.tabIndex = -1;
                object.type = "text/html";
                object.setAttribute("aria-hidden", "true");
                object.onload = onObjectLoad;

                //Safari: This must occur before adding the object to the DOM.
                //IE: Does not like that this happens before, even if it is also added after.
                if(!browserDetector.isIE()) {
                    object.data = "about:blank";
                }

                if (!getState(element)) {
                    // The element has been uninstalled before the actual loading happened.
                    return;
                }

                element.appendChild(object);
                getState(element).object = object;

                //IE: This must occur after adding the object to the DOM.
                if(browserDetector.isIE()) {
                    object.data = "about:blank";
                }
            }

            if(batchProcessor) {
                batchProcessor.add(mutateDom);
            } else {
                mutateDom();
            }
        }

        if(browserDetector.isIE(8)) {
            //IE 8 does not support objects properly. Luckily they do support the resize event.
            //So do not inject the object and notify that the element is already ready to be listened to.
            //The event handler for the resize event is attached in the utils.addListener instead.
            callback(element);
        } else {
            injectObject(element, callback);
        }
    }

    /**
     * Returns the child object of the target element.
     * @private
     * @param {element} element The target element.
     * @returns The object element of the target.
     */
    function getObject(element) {
        return getState(element).object;
    }

    function uninstall(element) {
        if (!getState(element)) {
            return;
        }

        var object = getObject(element);

        if (!object) {
            return;
        }

        if (browserDetector.isIE(8)) {
            element.detachEvent("onresize", object.proxy);
        } else {
            element.removeChild(object);
        }

        if (getState(element).checkForObjectDocumentTimeoutId) {
            window.clearTimeout(getState(element).checkForObjectDocumentTimeoutId);
        }

        delete getState(element).object;
    }

    return {
        makeDetectable: makeDetectable,
        addListener: addListener,
        uninstall: uninstall
    };
};

/**
 * Resize detection strategy that injects divs to elements in order to detect resize events on scroll events.
 * Heavily inspired by: https://github.com/marcj/css-element-queries/blob/master/src/ResizeSensor.js
 */

var forEach$1 = collectionUtils.forEach;

var scroll = function(options) {
    options             = options || {};
    var reporter        = options.reporter;
    var batchProcessor  = options.batchProcessor;
    var getState        = options.stateHandler.getState;
    options.stateHandler.hasState;
    var idHandler       = options.idHandler;

    if (!batchProcessor) {
        throw new Error("Missing required dependency: batchProcessor");
    }

    if (!reporter) {
        throw new Error("Missing required dependency: reporter.");
    }

    //TODO: Could this perhaps be done at installation time?
    var scrollbarSizes = getScrollbarSizes();

    var styleId = "erd_scroll_detection_scrollbar_style";
    var detectionContainerClass = "erd_scroll_detection_container";

    function initDocument(targetDocument) {
        // Inject the scrollbar styling that prevents them from appearing sometimes in Chrome.
        // The injected container needs to have a class, so that it may be styled with CSS (pseudo elements).
        injectScrollStyle(targetDocument, styleId, detectionContainerClass);
    }

    initDocument(window.document);

    function buildCssTextString(rules) {
        var seperator = options.important ? " !important; " : "; ";

        return (rules.join(seperator) + seperator).trim();
    }

    function getScrollbarSizes() {
        var width = 500;
        var height = 500;

        var child = document.createElement("div");
        child.style.cssText = buildCssTextString(["position: absolute", "width: " + width*2 + "px", "height: " + height*2 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);

        var container = document.createElement("div");
        container.style.cssText = buildCssTextString(["position: absolute", "width: " + width + "px", "height: " + height + "px", "overflow: scroll", "visibility: none", "top: " + -width*3 + "px", "left: " + -height*3 + "px", "visibility: hidden", "margin: 0", "padding: 0"]);

        container.appendChild(child);

        document.body.insertBefore(container, document.body.firstChild);

        var widthSize = width - container.clientWidth;
        var heightSize = height - container.clientHeight;

        document.body.removeChild(container);

        return {
            width: widthSize,
            height: heightSize
        };
    }

    function injectScrollStyle(targetDocument, styleId, containerClass) {
        function injectStyle(style, method) {
            method = method || function (element) {
                targetDocument.head.appendChild(element);
            };

            var styleElement = targetDocument.createElement("style");
            styleElement.innerHTML = style;
            styleElement.id = styleId;
            method(styleElement);
            return styleElement;
        }

        if (!targetDocument.getElementById(styleId)) {
            var containerAnimationClass = containerClass + "_animation";
            var containerAnimationActiveClass = containerClass + "_animation_active";
            var style = "/* Created by the element-resize-detector library. */\n";
            style += "." + containerClass + " > div::-webkit-scrollbar { " + buildCssTextString(["display: none"]) + " }\n\n";
            style += "." + containerAnimationActiveClass + " { " + buildCssTextString(["-webkit-animation-duration: 0.1s", "animation-duration: 0.1s", "-webkit-animation-name: " + containerAnimationClass, "animation-name: " + containerAnimationClass]) + " }\n";
            style += "@-webkit-keyframes " + containerAnimationClass +  " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }\n";
            style += "@keyframes " + containerAnimationClass +          " { 0% { opacity: 1; } 50% { opacity: 0; } 100% { opacity: 1; } }";
            injectStyle(style);
        }
    }

    function addAnimationClass(element) {
        element.className += " " + detectionContainerClass + "_animation_active";
    }

    function addEvent(el, name, cb) {
        if (el.addEventListener) {
            el.addEventListener(name, cb);
        } else if(el.attachEvent) {
            el.attachEvent("on" + name, cb);
        } else {
            return reporter.error("[scroll] Don't know how to add event listeners.");
        }
    }

    function removeEvent(el, name, cb) {
        if (el.removeEventListener) {
            el.removeEventListener(name, cb);
        } else if(el.detachEvent) {
            el.detachEvent("on" + name, cb);
        } else {
            return reporter.error("[scroll] Don't know how to remove event listeners.");
        }
    }

    function getExpandElement(element) {
        return getState(element).container.childNodes[0].childNodes[0].childNodes[0];
    }

    function getShrinkElement(element) {
        return getState(element).container.childNodes[0].childNodes[0].childNodes[1];
    }

    /**
     * Adds a resize event listener to the element.
     * @public
     * @param {element} element The element that should have the listener added.
     * @param {function} listener The listener callback to be called for each resize event of the element. The element will be given as a parameter to the listener callback.
     */
    function addListener(element, listener) {
        var listeners = getState(element).listeners;

        if (!listeners.push) {
            throw new Error("Cannot add listener to an element that is not detectable.");
        }

        getState(element).listeners.push(listener);
    }

    /**
     * Makes an element detectable and ready to be listened for resize events. Will call the callback when the element is ready to be listened for resize changes.
     * @private
     * @param {object} options Optional options object.
     * @param {element} element The element to make detectable
     * @param {function} callback The callback to be called when the element is ready to be listened for resize changes. Will be called with the element as first parameter.
     */
    function makeDetectable(options, element, callback) {
        if (!callback) {
            callback = element;
            element = options;
            options = null;
        }

        options = options || {};

        function debug() {
            if (options.debug) {
                var args = Array.prototype.slice.call(arguments);
                args.unshift(idHandler.get(element), "Scroll: ");
                if (reporter.log.apply) {
                    reporter.log.apply(null, args);
                } else {
                    for (var i = 0; i < args.length; i++) {
                        reporter.log(args[i]);
                    }
                }
            }
        }

        function isDetached(element) {
            function isInDocument(element) {
                var isInShadowRoot = element.getRootNode && element.getRootNode().contains(element);
                return element === element.ownerDocument.body || element.ownerDocument.body.contains(element) || isInShadowRoot;
            }

            if (!isInDocument(element)) {
                return true;
            }

            // FireFox returns null style in hidden iframes. See https://github.com/wnr/element-resize-detector/issues/68 and https://bugzilla.mozilla.org/show_bug.cgi?id=795520
            if (window.getComputedStyle(element) === null) {
                return true;
            }

            return false;
        }

        function isUnrendered(element) {
            // Check the absolute positioned container since the top level container is display: inline.
            var container = getState(element).container.childNodes[0];
            var style = window.getComputedStyle(container);
            return !style.width || style.width.indexOf("px") === -1; //Can only compute pixel value when rendered.
        }

        function getStyle() {
            // Some browsers only force layouts when actually reading the style properties of the style object, so make sure that they are all read here,
            // so that the user of the function can be sure that it will perform the layout here, instead of later (important for batching).
            var elementStyle            = window.getComputedStyle(element);
            var style                   = {};
            style.position              = elementStyle.position;
            style.width                 = element.offsetWidth;
            style.height                = element.offsetHeight;
            style.top                   = elementStyle.top;
            style.right                 = elementStyle.right;
            style.bottom                = elementStyle.bottom;
            style.left                  = elementStyle.left;
            style.widthCSS              = elementStyle.width;
            style.heightCSS             = elementStyle.height;
            return style;
        }

        function storeStartSize() {
            var style = getStyle();
            getState(element).startSize = {
                width: style.width,
                height: style.height
            };
            debug("Element start size", getState(element).startSize);
        }

        function initListeners() {
            getState(element).listeners = [];
        }

        function storeStyle() {
            debug("storeStyle invoked.");
            if (!getState(element)) {
                debug("Aborting because element has been uninstalled");
                return;
            }

            var style = getStyle();
            getState(element).style = style;
        }

        function storeCurrentSize(element, width, height) {
            getState(element).lastWidth = width;
            getState(element).lastHeight  = height;
        }

        function getExpandChildElement(element) {
            return getExpandElement(element).childNodes[0];
        }

        function getWidthOffset() {
            return 2 * scrollbarSizes.width + 1;
        }

        function getHeightOffset() {
            return 2 * scrollbarSizes.height + 1;
        }

        function getExpandWidth(width) {
            return width + 10 + getWidthOffset();
        }

        function getExpandHeight(height) {
            return height + 10 + getHeightOffset();
        }

        function getShrinkWidth(width) {
            return width * 2 + getWidthOffset();
        }

        function getShrinkHeight(height) {
            return height * 2 + getHeightOffset();
        }

        function positionScrollbars(element, width, height) {
            var expand          = getExpandElement(element);
            var shrink          = getShrinkElement(element);
            var expandWidth     = getExpandWidth(width);
            var expandHeight    = getExpandHeight(height);
            var shrinkWidth     = getShrinkWidth(width);
            var shrinkHeight    = getShrinkHeight(height);
            expand.scrollLeft   = expandWidth;
            expand.scrollTop    = expandHeight;
            shrink.scrollLeft   = shrinkWidth;
            shrink.scrollTop    = shrinkHeight;
        }

        function injectContainerElement() {
            var container = getState(element).container;

            if (!container) {
                container                   = document.createElement("div");
                container.className         = detectionContainerClass;
                container.style.cssText     = buildCssTextString(["visibility: hidden", "display: inline", "width: 0px", "height: 0px", "z-index: -1", "overflow: hidden", "margin: 0", "padding: 0"]);
                getState(element).container = container;
                addAnimationClass(container);
                element.appendChild(container);

                var onAnimationStart = function () {
                    getState(element).onRendered && getState(element).onRendered();
                };

                addEvent(container, "animationstart", onAnimationStart);

                // Store the event handler here so that they may be removed when uninstall is called.
                // See uninstall function for an explanation why it is needed.
                getState(element).onAnimationStart = onAnimationStart;
            }

            return container;
        }

        function injectScrollElements() {
            function alterPositionStyles() {
                var style = getState(element).style;

                if(style.position === "static") {
                    element.style.setProperty("position", "relative",options.important ? "important" : "");

                    var removeRelativeStyles = function(reporter, element, style, property) {
                        function getNumericalValue(value) {
                            return value.replace(/[^-\d\.]/g, "");
                        }

                        var value = style[property];

                        if(value !== "auto" && getNumericalValue(value) !== "0") {
                            reporter.warn("An element that is positioned static has style." + property + "=" + value + " which is ignored due to the static positioning. The element will need to be positioned relative, so the style." + property + " will be set to 0. Element: ", element);
                            element.style[property] = 0;
                        }
                    };

                    //Check so that there are no accidental styles that will make the element styled differently now that is is relative.
                    //If there are any, set them to 0 (this should be okay with the user since the style properties did nothing before [since the element was positioned static] anyway).
                    removeRelativeStyles(reporter, element, style, "top");
                    removeRelativeStyles(reporter, element, style, "right");
                    removeRelativeStyles(reporter, element, style, "bottom");
                    removeRelativeStyles(reporter, element, style, "left");
                }
            }

            function getLeftTopBottomRightCssText(left, top, bottom, right) {
                left = (!left ? "0" : (left + "px"));
                top = (!top ? "0" : (top + "px"));
                bottom = (!bottom ? "0" : (bottom + "px"));
                right = (!right ? "0" : (right + "px"));

                return ["left: " + left, "top: " + top, "right: " + right, "bottom: " + bottom];
            }

            debug("Injecting elements");

            if (!getState(element)) {
                debug("Aborting because element has been uninstalled");
                return;
            }

            alterPositionStyles();

            var rootContainer = getState(element).container;

            if (!rootContainer) {
                rootContainer = injectContainerElement();
            }

            // Due to this WebKit bug https://bugs.webkit.org/show_bug.cgi?id=80808 (currently fixed in Blink, but still present in WebKit browsers such as Safari),
            // we need to inject two containers, one that is width/height 100% and another that is left/top -1px so that the final container always is 1x1 pixels bigger than
            // the targeted element.
            // When the bug is resolved, "containerContainer" may be removed.

            // The outer container can occasionally be less wide than the targeted when inside inline elements element in WebKit (see https://bugs.webkit.org/show_bug.cgi?id=152980).
            // This should be no problem since the inner container either way makes sure the injected scroll elements are at least 1x1 px.

            var scrollbarWidth          = scrollbarSizes.width;
            var scrollbarHeight         = scrollbarSizes.height;
            var containerContainerStyle = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%", "left: 0px", "top: 0px"]);
            var containerStyle          = buildCssTextString(["position: absolute", "flex: none", "overflow: hidden", "z-index: -1", "visibility: hidden"].concat(getLeftTopBottomRightCssText(-(1 + scrollbarWidth), -(1 + scrollbarHeight), -scrollbarHeight, -scrollbarWidth)));
            var expandStyle             = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
            var shrinkStyle             = buildCssTextString(["position: absolute", "flex: none", "overflow: scroll", "z-index: -1", "visibility: hidden", "width: 100%", "height: 100%"]);
            var expandChildStyle        = buildCssTextString(["position: absolute", "left: 0", "top: 0"]);
            var shrinkChildStyle        = buildCssTextString(["position: absolute", "width: 200%", "height: 200%"]);

            var containerContainer      = document.createElement("div");
            var container               = document.createElement("div");
            var expand                  = document.createElement("div");
            var expandChild             = document.createElement("div");
            var shrink                  = document.createElement("div");
            var shrinkChild             = document.createElement("div");

            // Some browsers choke on the resize system being rtl, so force it to ltr. https://github.com/wnr/element-resize-detector/issues/56
            // However, dir should not be set on the top level container as it alters the dimensions of the target element in some browsers.
            containerContainer.dir              = "ltr";

            containerContainer.style.cssText    = containerContainerStyle;
            containerContainer.className        = detectionContainerClass;
            container.className                 = detectionContainerClass;
            container.style.cssText             = containerStyle;
            expand.style.cssText                = expandStyle;
            expandChild.style.cssText           = expandChildStyle;
            shrink.style.cssText                = shrinkStyle;
            shrinkChild.style.cssText           = shrinkChildStyle;

            expand.appendChild(expandChild);
            shrink.appendChild(shrinkChild);
            container.appendChild(expand);
            container.appendChild(shrink);
            containerContainer.appendChild(container);
            rootContainer.appendChild(containerContainer);

            function onExpandScroll() {
                getState(element).onExpand && getState(element).onExpand();
            }

            function onShrinkScroll() {
                getState(element).onShrink && getState(element).onShrink();
            }

            addEvent(expand, "scroll", onExpandScroll);
            addEvent(shrink, "scroll", onShrinkScroll);

            // Store the event handlers here so that they may be removed when uninstall is called.
            // See uninstall function for an explanation why it is needed.
            getState(element).onExpandScroll = onExpandScroll;
            getState(element).onShrinkScroll = onShrinkScroll;
        }

        function registerListenersAndPositionElements() {
            function updateChildSizes(element, width, height) {
                var expandChild             = getExpandChildElement(element);
                var expandWidth             = getExpandWidth(width);
                var expandHeight            = getExpandHeight(height);
                expandChild.style.setProperty("width", expandWidth + "px", options.important ? "important" : "");
                expandChild.style.setProperty("height", expandHeight + "px", options.important ? "important" : "");
            }

            function updateDetectorElements(done) {
                var width           = element.offsetWidth;
                var height          = element.offsetHeight;

                // Check whether the size has actually changed since last time the algorithm ran. If not, some steps may be skipped.
                var sizeChanged = width !== getState(element).lastWidth || height !== getState(element).lastHeight;

                debug("Storing current size", width, height);

                // Store the size of the element sync here, so that multiple scroll events may be ignored in the event listeners.
                // Otherwise the if-check in handleScroll is useless.
                storeCurrentSize(element, width, height);

                // Since we delay the processing of the batch, there is a risk that uninstall has been called before the batch gets to execute.
                // Since there is no way to cancel the fn executions, we need to add an uninstall guard to all fns of the batch.

                batchProcessor.add(0, function performUpdateChildSizes() {
                    if (!sizeChanged) {
                        return;
                    }

                    if (!getState(element)) {
                        debug("Aborting because element has been uninstalled");
                        return;
                    }

                    if (!areElementsInjected()) {
                        debug("Aborting because element container has not been initialized");
                        return;
                    }

                    if (options.debug) {
                        var w = element.offsetWidth;
                        var h = element.offsetHeight;

                        if (w !== width || h !== height) {
                            reporter.warn(idHandler.get(element), "Scroll: Size changed before updating detector elements.");
                        }
                    }

                    updateChildSizes(element, width, height);
                });

                batchProcessor.add(1, function updateScrollbars() {
                    // This function needs to be invoked event though the size is unchanged. The element could have been resized very quickly and then
                    // been restored to the original size, which will have changed the scrollbar positions.

                    if (!getState(element)) {
                        debug("Aborting because element has been uninstalled");
                        return;
                    }

                    if (!areElementsInjected()) {
                        debug("Aborting because element container has not been initialized");
                        return;
                    }

                    positionScrollbars(element, width, height);
                });

                if (sizeChanged && done) {
                    batchProcessor.add(2, function () {
                        if (!getState(element)) {
                            debug("Aborting because element has been uninstalled");
                            return;
                        }

                        if (!areElementsInjected()) {
                          debug("Aborting because element container has not been initialized");
                          return;
                        }

                        done();
                    });
                }
            }

            function areElementsInjected() {
                return !!getState(element).container;
            }

            function notifyListenersIfNeeded() {
                function isFirstNotify() {
                    return getState(element).lastNotifiedWidth === undefined;
                }

                debug("notifyListenersIfNeeded invoked");

                var state = getState(element);

                // Don't notify if the current size is the start size, and this is the first notification.
                if (isFirstNotify() && state.lastWidth === state.startSize.width && state.lastHeight === state.startSize.height) {
                    return debug("Not notifying: Size is the same as the start size, and there has been no notification yet.");
                }

                // Don't notify if the size already has been notified.
                if (state.lastWidth === state.lastNotifiedWidth && state.lastHeight === state.lastNotifiedHeight) {
                    return debug("Not notifying: Size already notified");
                }


                debug("Current size not notified, notifying...");
                state.lastNotifiedWidth = state.lastWidth;
                state.lastNotifiedHeight = state.lastHeight;
                forEach$1(getState(element).listeners, function (listener) {
                    listener(element);
                });
            }

            function handleRender() {
                debug("startanimation triggered.");

                if (isUnrendered(element)) {
                    debug("Ignoring since element is still unrendered...");
                    return;
                }

                debug("Element rendered.");
                var expand = getExpandElement(element);
                var shrink = getShrinkElement(element);
                if (expand.scrollLeft === 0 || expand.scrollTop === 0 || shrink.scrollLeft === 0 || shrink.scrollTop === 0) {
                    debug("Scrollbars out of sync. Updating detector elements...");
                    updateDetectorElements(notifyListenersIfNeeded);
                }
            }

            function handleScroll() {
                debug("Scroll detected.");

                if (isUnrendered(element)) {
                    // Element is still unrendered. Skip this scroll event.
                    debug("Scroll event fired while unrendered. Ignoring...");
                    return;
                }

                updateDetectorElements(notifyListenersIfNeeded);
            }

            debug("registerListenersAndPositionElements invoked.");

            if (!getState(element)) {
                debug("Aborting because element has been uninstalled");
                return;
            }

            getState(element).onRendered = handleRender;
            getState(element).onExpand = handleScroll;
            getState(element).onShrink = handleScroll;

            var style = getState(element).style;
            updateChildSizes(element, style.width, style.height);
        }

        function finalizeDomMutation() {
            debug("finalizeDomMutation invoked.");

            if (!getState(element)) {
                debug("Aborting because element has been uninstalled");
                return;
            }

            var style = getState(element).style;
            storeCurrentSize(element, style.width, style.height);
            positionScrollbars(element, style.width, style.height);
        }

        function ready() {
            callback(element);
        }

        function install() {
            debug("Installing...");
            initListeners();
            storeStartSize();

            batchProcessor.add(0, storeStyle);
            batchProcessor.add(1, injectScrollElements);
            batchProcessor.add(2, registerListenersAndPositionElements);
            batchProcessor.add(3, finalizeDomMutation);
            batchProcessor.add(4, ready);
        }

        debug("Making detectable...");

        if (isDetached(element)) {
            debug("Element is detached");

            injectContainerElement();

            debug("Waiting until element is attached...");

            getState(element).onRendered = function () {
                debug("Element is now attached");
                install();
            };
        } else {
            install();
        }
    }

    function uninstall(element) {
        var state = getState(element);

        if (!state) {
            // Uninstall has been called on a non-erd element.
            return;
        }

        // Uninstall may have been called in the following scenarios:
        // (1) Right between the sync code and async batch (here state.busy = true, but nothing have been registered or injected).
        // (2) In the ready callback of the last level of the batch by another element (here, state.busy = true, but all the stuff has been injected).
        // (3) After the installation process (here, state.busy = false and all the stuff has been injected).
        // So to be on the safe side, let's check for each thing before removing.

        // We need to remove the event listeners, because otherwise the event might fire on an uninstall element which results in an error when trying to get the state of the element.
        state.onExpandScroll && removeEvent(getExpandElement(element), "scroll", state.onExpandScroll);
        state.onShrinkScroll && removeEvent(getShrinkElement(element), "scroll", state.onShrinkScroll);
        state.onAnimationStart && removeEvent(state.container, "animationstart", state.onAnimationStart);

        state.container && element.removeChild(state.container);
    }

    return {
        makeDetectable: makeDetectable,
        addListener: addListener,
        uninstall: uninstall,
        initDocument: initDocument
    };
};

var forEach                 = collectionUtils.forEach;









//Detection strategies.



function isCollection(obj) {
    return Array.isArray(obj) || obj.length !== undefined;
}

function toArray(collection) {
    if (!Array.isArray(collection)) {
        var array = [];
        forEach(collection, function (obj) {
            array.push(obj);
        });
        return array;
    } else {
        return collection;
    }
}

function isElement(obj) {
    return obj && obj.nodeType === 1;
}

/**
 * @typedef idHandler
 * @type {object}
 * @property {function} get Gets the resize detector id of the element.
 * @property {function} set Generate and sets the resize detector id of the element.
 */

/**
 * @typedef Options
 * @type {object}
 * @property {boolean} callOnAdd    Determines if listeners should be called when they are getting added.
                                    Default is true. If true, the listener is guaranteed to be called when it has been added.
                                    If false, the listener will not be guarenteed to be called when it has been added (does not prevent it from being called).
 * @property {idHandler} idHandler  A custom id handler that is responsible for generating, setting and retrieving id's for elements.
                                    If not provided, a default id handler will be used.
 * @property {reporter} reporter    A custom reporter that handles reporting logs, warnings and errors.
                                    If not provided, a default id handler will be used.
                                    If set to false, then nothing will be reported.
 * @property {boolean} debug        If set to true, the the system will report debug messages as default for the listenTo method.
 */

/**
 * Creates an element resize detector instance.
 * @public
 * @param {Options?} options Optional global options object that will decide how this instance will work.
 */
var elementResizeDetector = function(options) {
    options = options || {};

    //idHandler is currently not an option to the listenTo function, so it should not be added to globalOptions.
    var idHandler$1;

    if (options.idHandler) {
        // To maintain compatability with idHandler.get(element, readonly), make sure to wrap the given idHandler
        // so that readonly flag always is true when it's used here. This may be removed next major version bump.
        idHandler$1 = {
            get: function (element) { return options.idHandler.get(element, true); },
            set: options.idHandler.set
        };
    } else {
        var idGenerator$1 = idGenerator();
        var defaultIdHandler = idHandler({
            idGenerator: idGenerator$1,
            stateHandler: stateHandler
        });
        idHandler$1 = defaultIdHandler;
    }

    //reporter is currently not an option to the listenTo function, so it should not be added to globalOptions.
    var reporter$1 = options.reporter;

    if(!reporter$1) {
        //If options.reporter is false, then the reporter should be quiet.
        var quiet = reporter$1 === false;
        reporter$1 = reporter(quiet);
    }

    //batchProcessor is currently not an option to the listenTo function, so it should not be added to globalOptions.
    var batchProcessor$1 = getOption(options, "batchProcessor", batchProcessor({ reporter: reporter$1 }));

    //Options to be used as default for the listenTo function.
    var globalOptions = {};
    globalOptions.callOnAdd     = !!getOption(options, "callOnAdd", true);
    globalOptions.debug         = !!getOption(options, "debug", false);

    var eventListenerHandler    = listenerHandler(idHandler$1);
    var elementUtils$1            = elementUtils({
        stateHandler: stateHandler
    });

    //The detection strategy to be used.
    var detectionStrategy;
    var desiredStrategy = getOption(options, "strategy", "object");
    var importantCssRules = getOption(options, "important", false);
    var strategyOptions = {
        reporter: reporter$1,
        batchProcessor: batchProcessor$1,
        stateHandler: stateHandler,
        idHandler: idHandler$1,
        important: importantCssRules
    };

    if(desiredStrategy === "scroll") {
        if (browserDetector.isLegacyOpera()) {
            reporter$1.warn("Scroll strategy is not supported on legacy Opera. Changing to object strategy.");
            desiredStrategy = "object";
        } else if (browserDetector.isIE(9)) {
            reporter$1.warn("Scroll strategy is not supported on IE9. Changing to object strategy.");
            desiredStrategy = "object";
        }
    }

    if(desiredStrategy === "scroll") {
        detectionStrategy = scroll(strategyOptions);
    } else if(desiredStrategy === "object") {
        detectionStrategy = object(strategyOptions);
    } else {
        throw new Error("Invalid strategy name: " + desiredStrategy);
    }

    //Calls can be made to listenTo with elements that are still being installed.
    //Also, same elements can occur in the elements list in the listenTo function.
    //With this map, the ready callbacks can be synchronized between the calls
    //so that the ready callback can always be called when an element is ready - even if
    //it wasn't installed from the function itself.
    var onReadyCallbacks = {};

    /**
     * Makes the given elements resize-detectable and starts listening to resize events on the elements. Calls the event callback for each event for each element.
     * @public
     * @param {Options?} options Optional options object. These options will override the global options. Some options may not be overriden, such as idHandler.
     * @param {element[]|element} elements The given array of elements to detect resize events of. Single element is also valid.
     * @param {function} listener The callback to be executed for each resize event for each element.
     */
    function listenTo(options, elements, listener) {
        function onResizeCallback(element) {
            var listeners = eventListenerHandler.get(element);
            forEach(listeners, function callListenerProxy(listener) {
                listener(element);
            });
        }

        function addListener(callOnAdd, element, listener) {
            eventListenerHandler.add(element, listener);

            if(callOnAdd) {
                listener(element);
            }
        }

        //Options object may be omitted.
        if(!listener) {
            listener = elements;
            elements = options;
            options = {};
        }

        if(!elements) {
            throw new Error("At least one element required.");
        }

        if(!listener) {
            throw new Error("Listener required.");
        }

        if (isElement(elements)) {
            // A single element has been passed in.
            elements = [elements];
        } else if (isCollection(elements)) {
            // Convert collection to array for plugins.
            // TODO: May want to check so that all the elements in the collection are valid elements.
            elements = toArray(elements);
        } else {
            return reporter$1.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
        }

        var elementsReady = 0;

        var callOnAdd = getOption(options, "callOnAdd", globalOptions.callOnAdd);
        var onReadyCallback = getOption(options, "onReady", function noop() {});
        var debug = getOption(options, "debug", globalOptions.debug);

        forEach(elements, function attachListenerToElement(element) {
            if (!stateHandler.getState(element)) {
                stateHandler.initState(element);
                idHandler$1.set(element);
            }

            var id = idHandler$1.get(element);

            debug && reporter$1.log("Attaching listener to element", id, element);

            if(!elementUtils$1.isDetectable(element)) {
                debug && reporter$1.log(id, "Not detectable.");
                if(elementUtils$1.isBusy(element)) {
                    debug && reporter$1.log(id, "System busy making it detectable");

                    //The element is being prepared to be detectable. Do not make it detectable.
                    //Just add the listener, because the element will soon be detectable.
                    addListener(callOnAdd, element, listener);
                    onReadyCallbacks[id] = onReadyCallbacks[id] || [];
                    onReadyCallbacks[id].push(function onReady() {
                        elementsReady++;

                        if(elementsReady === elements.length) {
                            onReadyCallback();
                        }
                    });
                    return;
                }

                debug && reporter$1.log(id, "Making detectable...");
                //The element is not prepared to be detectable, so do prepare it and add a listener to it.
                elementUtils$1.markBusy(element, true);
                return detectionStrategy.makeDetectable({ debug: debug, important: importantCssRules }, element, function onElementDetectable(element) {
                    debug && reporter$1.log(id, "onElementDetectable");

                    if (stateHandler.getState(element)) {
                        elementUtils$1.markAsDetectable(element);
                        elementUtils$1.markBusy(element, false);
                        detectionStrategy.addListener(element, onResizeCallback);
                        addListener(callOnAdd, element, listener);

                        // Since the element size might have changed since the call to "listenTo", we need to check for this change,
                        // so that a resize event may be emitted.
                        // Having the startSize object is optional (since it does not make sense in some cases such as unrendered elements), so check for its existance before.
                        // Also, check the state existance before since the element may have been uninstalled in the installation process.
                        var state = stateHandler.getState(element);
                        if (state && state.startSize) {
                            var width = element.offsetWidth;
                            var height = element.offsetHeight;
                            if (state.startSize.width !== width || state.startSize.height !== height) {
                                onResizeCallback(element);
                            }
                        }

                        if(onReadyCallbacks[id]) {
                            forEach(onReadyCallbacks[id], function(callback) {
                                callback();
                            });
                        }
                    } else {
                        // The element has been unisntalled before being detectable.
                        debug && reporter$1.log(id, "Element uninstalled before being detectable.");
                    }

                    delete onReadyCallbacks[id];

                    elementsReady++;
                    if(elementsReady === elements.length) {
                        onReadyCallback();
                    }
                });
            }

            debug && reporter$1.log(id, "Already detecable, adding listener.");

            //The element has been prepared to be detectable and is ready to be listened to.
            addListener(callOnAdd, element, listener);
            elementsReady++;
        });

        if(elementsReady === elements.length) {
            onReadyCallback();
        }
    }

    function uninstall(elements) {
        if(!elements) {
            return reporter$1.error("At least one element is required.");
        }

        if (isElement(elements)) {
            // A single element has been passed in.
            elements = [elements];
        } else if (isCollection(elements)) {
            // Convert collection to array for plugins.
            // TODO: May want to check so that all the elements in the collection are valid elements.
            elements = toArray(elements);
        } else {
            return reporter$1.error("Invalid arguments. Must be a DOM element or a collection of DOM elements.");
        }

        forEach(elements, function (element) {
            eventListenerHandler.removeAllListeners(element);
            detectionStrategy.uninstall(element);
            stateHandler.cleanState(element);
        });
    }

    function initDocument(targetDocument) {
        detectionStrategy.initDocument && detectionStrategy.initDocument(targetDocument);
    }

    return {
        listenTo: listenTo,
        removeListener: eventListenerHandler.removeListener,
        removeAllListeners: eventListenerHandler.removeAllListeners,
        uninstall: uninstall,
        initDocument: initDocument
    };
};

function getOption(options, name, defaultValue) {
    var value = options[name];

    if((value === undefined || value === null) && defaultValue !== undefined) {
        return defaultValue;
    }

    return value;
}

var erd = elementResizeDetector({ strategy: "scroll" });
function watchResize(element, handler) {
    erd.listenTo(element, handler);
    var currentHandler = handler;
    return {
        update: function (newHandler) {
            erd.removeListener(element, currentHandler);
            erd.listenTo(element, newHandler);
            currentHandler = newHandler;
        },
        destroy: function () {
            erd.removeListener(element, currentHandler);
        },
    };
}

/* src\Components\KeyboardLayout.svelte generated by Svelte v3.44.2 */

function add_css$1(target) {
	append_styles(target, "svelte-1ynk3qo", ".keyboard.svelte-1ynk3qo{width:100%;height:100%;padding:50px;text-align:center;background:white;position:relative;left:50%;top:50%;transform:translate(-50%, -50%);transform-origin:center center}.scaleable-wrapper.svelte-1ynk3qo{resize:both;position:relative;height:38.2%}.kb-layout-row.svelte-1ynk3qo{width:100%;height:auto;display:flex}");
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	child_ctx[17] = i;
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	child_ctx[19] = list;
	child_ctx[20] = i;
	return child_ctx;
}

// (106:26) 
function create_if_block_2$1(ctx) {
	return {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};
}

// (96:10) {#if typeof key === 'string'}
function create_if_block$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*key*/ ctx[18].length == 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (101:12) {:else}
function create_else_block$1(ctx) {
	let keyboardkey;
	let updating_label;
	let current;

	function keyboardkey_label_binding_1(value) {
		/*keyboardkey_label_binding_1*/ ctx[9](value, /*key*/ ctx[18], /*each_value_1*/ ctx[19], /*key_index*/ ctx[20]);
	}

	let keyboardkey_props = {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*key*/ ctx[18] !== void 0) {
		keyboardkey_props.label = /*key*/ ctx[18];
	}

	keyboardkey = new KeyboardKey({ props: keyboardkey_props });
	binding_callbacks.push(() => bind(keyboardkey, 'label', keyboardkey_label_binding_1));
	keyboardkey.$on("keyClick", KeyClick);

	return {
		c() {
			create_component(keyboardkey.$$.fragment);
		},
		m(target, anchor) {
			mount_component(keyboardkey, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const keyboardkey_changes = {};

			if (dirty & /*$$scope, keyboardKeys*/ 2097280) {
				keyboardkey_changes.$$scope = { dirty, ctx };
			}

			if (!updating_label && dirty & /*keyboardKeys*/ 128) {
				updating_label = true;
				keyboardkey_changes.label = /*key*/ ctx[18];
				add_flush_callback(() => updating_label = false);
			}

			keyboardkey.$set(keyboardkey_changes);
		},
		i(local) {
			if (current) return;
			transition_in(keyboardkey.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(keyboardkey.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(keyboardkey, detaching);
		}
	};
}

// (97:12) {#if key.length == 0}
function create_if_block_1$1(ctx) {
	let keyboardkey;
	let updating_label;
	let current;

	function keyboardkey_label_binding(value) {
		/*keyboardkey_label_binding*/ ctx[8](value, /*key*/ ctx[18], /*each_value_1*/ ctx[19], /*key_index*/ ctx[20]);
	}

	let keyboardkey_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*key*/ ctx[18] !== void 0) {
		keyboardkey_props.label = /*key*/ ctx[18];
	}

	keyboardkey = new KeyboardKey({ props: keyboardkey_props });
	binding_callbacks.push(() => bind(keyboardkey, 'label', keyboardkey_label_binding));
	keyboardkey.$on("keyClick", KeyClick);

	return {
		c() {
			create_component(keyboardkey.$$.fragment);
		},
		m(target, anchor) {
			mount_component(keyboardkey, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const keyboardkey_changes = {};

			if (dirty & /*$$scope, keyboardKeys*/ 2097280) {
				keyboardkey_changes.$$scope = { dirty, ctx };
			}

			if (!updating_label && dirty & /*keyboardKeys*/ 128) {
				updating_label = true;
				keyboardkey_changes.label = /*key*/ ctx[18];
				add_flush_callback(() => updating_label = false);
			}

			keyboardkey.$set(keyboardkey_changes);
		},
		i(local) {
			if (current) return;
			transition_in(keyboardkey.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(keyboardkey.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(keyboardkey, detaching);
		}
	};
}

// (102:14) <KeyboardKey bind:label={key} on:keyClick={KeyClick}                  >
function create_default_slot_1(ctx) {
	let t_value = /*key*/ ctx[18] + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*keyboardKeys*/ 128 && t_value !== (t_value = /*key*/ ctx[18] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (98:14) <KeyboardKey bind:label={key} on:keyClick={KeyClick}                  >
function create_default_slot(ctx) {
	let t0;
	let t1_value = /*key*/ ctx[18] + "";
	let t1;

	return {
		c() {
			t0 = text("Zero");
			t1 = text(t1_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*keyboardKeys*/ 128 && t1_value !== (t1_value = /*key*/ ctx[18] + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (95:8) {#each row as key}
function create_each_block_1$1(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$1, create_if_block_2$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (typeof /*key*/ ctx[18] === 'string') return 0;
		if (/*key*/ ctx[18].w) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

// (93:4) {#each keyboardKeys as row, i}
function create_each_block$1(ctx) {
	let div;
	let t;
	let div_id_value;
	let current;
	let each_value_1 = /*row*/ ctx[15];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr(div, "class", "kb-layout-row svelte-1ynk3qo");
			attr(div, "id", div_id_value = 'Row-' + (+/*i*/ ctx[17] + 1).toString());
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*keyboardKeys, KeyClick*/ 128) {
				each_value_1 = /*row*/ ctx[15];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, t);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let br0;
	let t0;
	let t1;
	let t2;
	let br1;
	let t3;
	let t4;
	let t5;
	let br2;
	let t6;
	let t7;
	let t8;
	let br3;
	let t9;

	let t10_value = (/*keyboardWidth*/ ctx[3] < /*readableMaxWidth*/ ctx[6]
	? true
	: false) + "";

	let t10;
	let t11;
	let br4;
	let t12;
	let t13;
	let t14;
	let br5;
	let t15;
	let t16;
	let br6;
	let t17;
	let div1;
	let div0;
	let div0_resize_listener;
	let div1_resize_listener;
	let watchResize_action;
	let current;
	let mounted;
	let dispose;
	let each_value = /*keyboardKeys*/ ctx[7];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			br0 = element("br");
			t0 = text("\r\nReadableMaxWidth: ");
			t1 = text(/*readableMaxWidthPX*/ ctx[5]);
			t2 = space();
			br1 = element("br");
			t3 = text("\r\nKeyboard Widht: ");
			t4 = text(/*keyboardWidth*/ ctx[3]);
			t5 = space();
			br2 = element("br");
			t6 = text("\r\nKeyboard Height: ");
			t7 = text(/*keyboardHeight*/ ctx[4]);
			t8 = space();
			br3 = element("br");
			t9 = text("\r\nisLowerThan: ");
			t10 = text(t10_value);
			t11 = space();
			br4 = element("br");
			t12 = text("\r\n\r\nwrapperW: ");
			t13 = text(/*wrapperWidth*/ ctx[1]);
			t14 = space();
			br5 = element("br");
			t15 = text("\r\nwrapperH: ");
			t16 = text(/*wrapperHeight*/ ctx[2]);
			br6 = element("br");
			t17 = space();
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "keyboard svelte-1ynk3qo");
			set_style(div0, "transform", "translate(-50%, -50%) scale(" + /*scaleFactor*/ ctx[0] + ")");
			add_render_callback(() => /*div0_elementresize_handler*/ ctx[10].call(div0));
			attr(div1, "class", "scaleable-wrapper svelte-1ynk3qo");
			attr(div1, "id", "scaleable-wrapper");
			add_render_callback(() => /*div1_elementresize_handler*/ ctx[11].call(div1));
		},
		m(target, anchor) {
			insert(target, br0, anchor);
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
			insert(target, br1, anchor);
			insert(target, t3, anchor);
			insert(target, t4, anchor);
			insert(target, t5, anchor);
			insert(target, br2, anchor);
			insert(target, t6, anchor);
			insert(target, t7, anchor);
			insert(target, t8, anchor);
			insert(target, br3, anchor);
			insert(target, t9, anchor);
			insert(target, t10, anchor);
			insert(target, t11, anchor);
			insert(target, br4, anchor);
			insert(target, t12, anchor);
			insert(target, t13, anchor);
			insert(target, t14, anchor);
			insert(target, br5, anchor);
			insert(target, t15, anchor);
			insert(target, t16, anchor);
			insert(target, br6, anchor);
			insert(target, t17, anchor);
			insert(target, div1, anchor);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			div0_resize_listener = add_resize_listener(div0, /*div0_elementresize_handler*/ ctx[10].bind(div0));
			div1_resize_listener = add_resize_listener(div1, /*div1_elementresize_handler*/ ctx[11].bind(div1));
			current = true;

			if (!mounted) {
				dispose = action_destroyer(watchResize_action = watchResize.call(null, div1, /*watchResize_function*/ ctx[12]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*readableMaxWidthPX*/ 32) set_data(t1, /*readableMaxWidthPX*/ ctx[5]);
			if (!current || dirty & /*keyboardWidth*/ 8) set_data(t4, /*keyboardWidth*/ ctx[3]);
			if (!current || dirty & /*keyboardHeight*/ 16) set_data(t7, /*keyboardHeight*/ ctx[4]);

			if ((!current || dirty & /*keyboardWidth, readableMaxWidth*/ 72) && t10_value !== (t10_value = (/*keyboardWidth*/ ctx[3] < /*readableMaxWidth*/ ctx[6]
			? true
			: false) + "")) set_data(t10, t10_value);

			if (!current || dirty & /*wrapperWidth*/ 2) set_data(t13, /*wrapperWidth*/ ctx[1]);
			if (!current || dirty & /*wrapperHeight*/ 4) set_data(t16, /*wrapperHeight*/ ctx[2]);

			if (dirty & /*keyboardKeys, KeyClick*/ 128) {
				each_value = /*keyboardKeys*/ ctx[7];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*scaleFactor*/ 1) {
				set_style(div0, "transform", "translate(-50%, -50%) scale(" + /*scaleFactor*/ ctx[0] + ")");
			}

			if (watchResize_action && is_function(watchResize_action.update) && dirty & /*scaleFactor, wrapperWidth, keyboardWidth, wrapperHeight, keyboardHeight*/ 31) watchResize_action.update.call(null, /*watchResize_function*/ ctx[12]);
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(br0);
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
			if (detaching) detach(br1);
			if (detaching) detach(t3);
			if (detaching) detach(t4);
			if (detaching) detach(t5);
			if (detaching) detach(br2);
			if (detaching) detach(t6);
			if (detaching) detach(t7);
			if (detaching) detach(t8);
			if (detaching) detach(br3);
			if (detaching) detach(t9);
			if (detaching) detach(t10);
			if (detaching) detach(t11);
			if (detaching) detach(br4);
			if (detaching) detach(t12);
			if (detaching) detach(t13);
			if (detaching) detach(t14);
			if (detaching) detach(br5);
			if (detaching) detach(t15);
			if (detaching) detach(t16);
			if (detaching) detach(br6);
			if (detaching) detach(t17);
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
			div0_resize_listener();
			div1_resize_listener();
			mounted = false;
			dispose();
		}
	};
}

function KeyClick(e) {
	console.log(e.detail);
}

function instance$1($$self, $$props, $$invalidate) {
	let wrapperWidth;
	let wrapperHeight;
	let keyboardWidth;
	let keyboardHeight;
	let readableMaxWidthPX;
	let readableMaxWidth;
	let scaleFactor = 1;

	// Keyboard
	let keyboardKeys = kb_layout_ansi104eng;

	// onMount(() => {
	// function getKbViewDom(dom: HTMLCollection) {
	//   for (let i = 0; i < dom.length; i++) {
	//     console.log(dom[i].children.item)
	//   }
	// }
	// getKbViewDom(view)
	// const view = document.getElementsByClassName(
	//   'view-content KB-view markdown-preview-view is-readable-line-width'
	// )[0].firstChild
	//   console.log(view)
	//   const style = getComputedStyle(view)
	//   // const readableWidth = style.maxWidth
	//   // const readableWidth = style
	//   // console.log(readableWidth)
	// })
	onMount(() => {
		$$invalidate(5, readableMaxWidthPX = getComputedStyle(document.querySelector('.markdown-preview-view.is-readable-line-width .markdown-preview-sizer')).getPropertyValue('max-width'));
		$$invalidate(6, readableMaxWidth = parseInt(readableMaxWidthPX, 10));
	});

	function keyboardkey_label_binding(value, key, each_value_1, key_index) {
		each_value_1[key_index] = value;
		$$invalidate(7, keyboardKeys);
	}

	function keyboardkey_label_binding_1(value, key, each_value_1, key_index) {
		each_value_1[key_index] = value;
		$$invalidate(7, keyboardKeys);
	}

	function div0_elementresize_handler() {
		keyboardWidth = this.offsetWidth;
		keyboardHeight = this.offsetHeight;
		$$invalidate(3, keyboardWidth);
		$$invalidate(4, keyboardHeight);
	}

	function div1_elementresize_handler() {
		wrapperWidth = this.offsetWidth;
		wrapperHeight = this.offsetHeight;
		$$invalidate(1, wrapperWidth);
		$$invalidate(2, wrapperHeight);
	}

	const watchResize_function = e => {
		console.log(`resize`);
		$$invalidate(0, scaleFactor = Math.min(wrapperWidth / keyboardWidth, wrapperHeight / keyboardHeight));
		console.log(scaleFactor);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*scaleFactor*/ 1) ;
	};

	return [
		scaleFactor,
		wrapperWidth,
		wrapperHeight,
		keyboardWidth,
		keyboardHeight,
		readableMaxWidthPX,
		readableMaxWidth,
		keyboardKeys,
		keyboardkey_label_binding,
		keyboardkey_label_binding_1,
		div0_elementresize_handler,
		div1_elementresize_handler,
		watchResize_function
	];
}

class KeyboardLayout extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {}, add_css$1);
	}
}

/* src\Components\KeyboardComponent.svelte generated by Svelte v3.44.2 */

function add_css(target) {
	append_styles(target, "svelte-1sdbhav", ".search-results.svelte-1sdbhav{color:var(--text-muted);padding:0px 20px 20px 0px}.kbanalizer-setting-item.svelte-1sdbhav{display:flex;align-items:center;border-top:1px solid var(--background-modifier-border);padding:18px 0px 18px 0px}.kbanalizer-setting-item-control.svelte-1sdbhav{flex:1 0 auto !important;flex-shrink:0 !important}.kbanalizer-setting-hotkey.svelte-1sdbhav{min-height:24px !important;position:relative;font-size:12px;background-color:var(--background-secondary-alt);border-radius:4px;padding:4px 10px;min-height:24px;align-self:flex-end;position:relative}.kb-analizer-hotkey-list-container.svelte-1sdbhav{padding-right:0px !important}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

// (41:8) {#if command.hotkeys != undefined && command.hotkeys.length > 0}
function create_if_block(ctx) {
	let div4;
	let div1;
	let div0;
	let t0;
	let t1;
	let t2_value = /*command*/ ctx[7].name + "";
	let t2;
	let t3;
	let div3;
	let div2;
	let t4;
	let each_value_1 = /*command*/ ctx[7].hotkeys;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			div4 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text(/*i*/ ctx[9]);
			t1 = text(". ");
			t2 = text(t2_value);
			t3 = space();
			div3 = element("div");
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			attr(div0, "class", "setting-item-name");
			attr(div1, "class", "setting-item-info");
			attr(div2, "class", "setting-command-hotkeys");
			attr(div3, "class", "kbanalizer-setting-item-control svelte-1sdbhav");
			attr(div4, "class", "kbanalizer-setting-item svelte-1sdbhav");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div1);
			append(div1, div0);
			append(div0, t0);
			append(div0, t1);
			append(div0, t2);
			append(div4, t3);
			append(div4, div3);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append(div4, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*cmds*/ 1) {
				each_value_1 = /*command*/ ctx[7].hotkeys;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (68:18) {:else}
function create_else_block_2(ctx) {
	let t_value = /*hotkey*/ ctx[10].key.toUpperCase() + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (66:50) 
function create_if_block_4(ctx) {
	let t_value = /*hotkey*/ ctx[10].key + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (51:18) {#if hotkey.modifiers}
function create_if_block_1(ctx) {
	let span;
	let t0;
	let t1;
	let each_value_2 = /*hotkey*/ ctx[10].modifiers;
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	function select_block_type_2(ctx, dirty) {
		if (/*hotkey*/ ctx[10].key.length > 1) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			if_block.c();
			t1 = space();
			attr(span, "class", "kbanalizer-setting-hotkey svelte-1sdbhav");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}

			append(span, t0);
			if_block.m(span, null);
			append(span, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*cmds*/ 1) {
				each_value_2 = /*hotkey*/ ctx[10].modifiers;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}

			if_block.p(ctx, dirty);
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_each(each_blocks, detaching);
			if_block.d();
		}
	};
}

// (56:24) {:else}
function create_else_block_1(ctx) {
	let t0_value = /*modifier*/ ctx[13] + "";
	let t0;
	let t1;
	let t2_value = ' ' + "";
	let t2;

	return {
		c() {
			t0 = text(t0_value);
			t1 = text(" + ");
			t2 = text(t2_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
		}
	};
}

// (54:24) {#if modifier == 'Mod'}
function create_if_block_3(ctx) {
	let t0_value = 'Ctrl' + "";
	let t0;
	let t1;
	let t2_value = ' ' + "";
	let t2;

	return {
		c() {
			t0 = text(t0_value);
			t1 = text(" + ");
			t2 = text(t2_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
		}
	};
}

// (53:22) {#each hotkey.modifiers as modifier}
function create_each_block_2(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*modifier*/ ctx[13] == 'Mod') return create_if_block_3;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (62:22) {:else}
function create_else_block(ctx) {
	let t_value = /*hotkey*/ ctx[10].key.toUpperCase() + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (60:22) {#if hotkey.key.length > 1}
function create_if_block_2(ctx) {
	let t_value = /*hotkey*/ ctx[10].key + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (50:16) {#each command.hotkeys as hotkey}
function create_each_block_1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*hotkey*/ ctx[10].modifiers) return create_if_block_1;
		if (/*hotkey*/ ctx[10].key.length > 1) return create_if_block_4;
		return create_else_block_2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (40:6) {#each cmds as command, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let if_block = /*command*/ ctx[7].hotkeys != undefined && /*command*/ ctx[7].hotkeys.length > 0 && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*command*/ ctx[7].hotkeys != undefined && /*command*/ ctx[7].hotkeys.length > 0) if_block.p(ctx, dirty);
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div4;
	let h1;
	let t1;
	let button;
	let t3;
	let keyboardlayout;
	let t4;
	let div3;
	let div0;
	let t5;
	let div1;
	let t9;
	let div2;
	let current;
	let mounted;
	let dispose;
	keyboardlayout = new KeyboardLayout({});
	let each_value = /*cmds*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div4 = element("div");
			h1 = element("h1");
			h1.textContent = "Hello Maaaan 123!";
			t1 = space();
			button = element("button");
			button.textContent = "test me";
			t3 = space();
			create_component(keyboardlayout.$$.fragment);
			t4 = space();
			div3 = element("div");
			div0 = element("div");
			div0.innerHTML = `<input type="text" placeholder="Filter..."/>`;
			t5 = space();
			div1 = element("div");
			div1.textContent = `Found ${/*cmds*/ ctx[0].length} assigned hotkeys`;
			t9 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "hotkey-search-container");
			attr(div1, "class", "search-results svelte-1sdbhav");
			attr(div2, "class", "kb-analizer-hotkey-list-container svelte-1sdbhav");
			attr(div3, "class", "hotkey-settings-container");
			attr(div4, "class", "markdown-preview-sizer markdown-preview-section");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, h1);
			append(div4, t1);
			append(div4, button);
			append(div4, t3);
			mount_component(keyboardlayout, div4, null);
			append(div4, t4);
			append(div4, div3);
			append(div3, div0);
			append(div3, t5);
			append(div3, div1);
			append(div3, t9);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*handlePickKey*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*cmds, undefined*/ 1) {
				each_value = /*cmds*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(keyboardlayout.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(keyboardlayout.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_component(keyboardlayout);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { app } = $$props;
	let { plugin } = $$props;
	let { settings } = $$props;
	let { view } = $$props;
	let cmds = getCommands(app);

	const handlePickKey = value => {
		console.log(value);
	};

	console.log(app.hotkeyManager);

	$$self.$$set = $$props => {
		if ('app' in $$props) $$invalidate(2, app = $$props.app);
		if ('plugin' in $$props) $$invalidate(3, plugin = $$props.plugin);
		if ('settings' in $$props) $$invalidate(4, settings = $$props.settings);
		if ('view' in $$props) $$invalidate(5, view = $$props.view);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*app, plugin, settings, view*/ 60) ;
	};

	return [cmds, handlePickKey, app, plugin, settings, view];
}

class KeyboardComponent extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { app: 2, plugin: 3, settings: 4, view: 5 }, add_css);
	}
}

class ShortcutsView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.icon = 'keyboard-glyph';
        this.plugin = plugin;
    }
    onload() {
        const _super = Object.create(null, {
            onload: { get: () => super.onload }
        });
        return __awaiter(this, void 0, void 0, function* () {
            _super.onload.call(this);
        });
    }
    getViewType() {
        return VIEW_TYPE_SHORTCUTS_ANALYZER;
    }
    getDisplayText() {
        return 'Keyboard Shortcuts';
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.draw();
        });
    }
    onClose() {
        return Promise.resolve();
    }
    draw() {
        return __awaiter(this, void 0, void 0, function* () {
            const { app, contentEl } = this;
            const { settings } = this.plugin;
            contentEl.empty();
            contentEl.addClass('KB-view');
            contentEl.addClass('markdown-preview-view');
            contentEl.addClass('is-readable-line-width');
            // this.component?.$destroy()
            this.component = new KeyboardComponent({
                target: contentEl,
                props: {
                    app,
                    plugin: this.plugin,
                    settings,
                    view: this,
                },
            });
        });
    }
}

// Remember to rename these classes and interfaces!
const DEFAULT_SETTINGS = {
    showStatusBarItem: 'true',
};
class KeyboardAnalizerPlugin extends obsidian.Plugin {
    get full() {
        const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_SHORTCUTS_ANALYZER);
        const leaf = leaves.length ? leaves[0] : null;
        if (leaf && leaf.view && leaf.view instanceof ShortcutsView)
            console.log('Already opened');
        return leaf.view;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading keyboard analizer plugin');
            yield this.loadSettings();
            this.registerPluginHotkeys();
            // this.setWorkspaceAttribute();
            this.addStatusBarIndicator.apply(this);
            // this.addCommand({
            //   id: 'show-shortcuts-analyzer-view',
            //   name: 'Open Keyboard Shorcuts Analizer View',
            //   checkCallback: (checking: boolean) => {
            //     let checkResult =
            //       this.app.workspace.getLeavesOfType(VIEW_TYPE_SHORTCUTS_ANALYZER)
            //         .length === 0
            //     if (checkResult) {
            //       // Only perform work when checking is false
            //       if (!checking) {
            //         openView(this.app, VIEW_TYPE_SHORTCUTS_ANALYZER, ShortcutsView)
            //       }
            //       return true
            //     }
            //   },
            // })
            // This creates an icon in the left ribbon.
            // const ribbonIconEl = this.addRibbonIcon(
            //   'dice',
            //   'Sample Plugin',
            //   (evt: MouseEvent) => {
            //     // Called when the user clicks the icon.
            //     new Notice('Hello World, Madafaka!')
            //   }
            // )
            // Perform additional things with the ribbon
            // ribbonIconEl.addClass('my-plugin-ribbon-class')
            this.registerView(VIEW_TYPE_SHORTCUTS_ANALYZER, (leaf) => new ShortcutsView(leaf, this));
            // let checkResult =
            //   this.app.workspace.getLeavesOfType(VIEW_TYPE_GRAPH_ANALYSIS)
            //     .length === 0
            //   if (checkResult) {
            //     // Only perform work when checking is false
            //     if (!checking) {
            //       openView(this.app, VIEW_TYPE_GRAPH_ANALYSIS, AnalysisView)
            //     }
            //     return true
            //   }
            // }
            //     await this.disconnectDiscord();
            //   }
            // });
            this.addRibbonIcon('dice', 'Print leaf types', () => {
                this.app.workspace.iterateAllLeaves((leaf) => {
                    console.log(leaf.getViewState().type);
                });
            });
            // This adds a settings tab so the user can configure various aspects of the plugin
            this.addSettingTab(new KeyboardAnalyzerSettingTab(this.app, this));
        });
    }
    onunload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.app.workspace.detachLeavesOfType(VIEW_TYPE_SHORTCUTS_ANALYZER);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    addStatusBarIndicator() {
        // This adds a status bar item to the bottom of the app. Does not work on mobile apps.
        const statusBarEl = this.addStatusBarItem();
        // statusBarEl.setText('Shortcuts')
        statusBarEl.addClass('mod-clickable');
        // statusBarEl.setAttribute("aria-label", "Shortcuts");
        // create the status bar icon
        const icon = statusBarEl.createSpan('status-bar-item-segment icon');
        obsidian.setIcon(icon, 'keyboard-glyph'); // inject svg icon
        // create the status bar text
        // register click handler
        statusBarEl.addEventListener('click', (evt) => this.onStatusBarClick(evt));
    }
    onStatusBarClick(evt) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('click');
            if (evt.ctrlKey == true) {
                let checkResult = this.app.workspace.getLeavesOfType(VIEW_TYPE_SHORTCUTS_ANALYZER)
                    .length === 0;
                if (checkResult) {
                    this.app.workspace
                        .getLeaf(true)
                        .setViewState({ type: VIEW_TYPE_SHORTCUTS_ANALYZER });
                }
            }
            else {
                this.addShortcutsView();
            }
        });
    }
    addShortcutsView(startup = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let checkResult = this.app.workspace.getLeavesOfType(VIEW_TYPE_SHORTCUTS_ANALYZER)
                .length === 0;
            if (checkResult) {
                this.app.workspace
                    .getLeaf()
                    .setViewState({ type: VIEW_TYPE_SHORTCUTS_ANALYZER });
                // if (
                //   startup &&
                //   this.app.workspace.getLeavesOfType(VIEW_TYPE_SHORTCUTS_ANALYZER).length
                // )
                //   return this.app.workspace.getLeaf(false)
                // if (this.full) {
                //   this.app.workspace.revealLeaf(this.full.leaf)
                // }
            }
        });
    }
    registerPluginHotkeys() {
        this.addCommand({
            id: 'show-shortcuts-analyzer-view',
            name: 'Open Keyboard Shorcuts Analizer View',
            checkCallback: (checking) => {
                let checkResult = this.app.workspace.getLeavesOfType(VIEW_TYPE_SHORTCUTS_ANALYZER)
                    .length === 0;
                if (checkResult) {
                    // Only perform work when checking is false
                    if (!checking) {
                        this.addShortcutsView();
                        // openView(this.app, VIEW_TYPE_SHORTCUTS_ANALYZER, ShortcutsView)
                    }
                    return true;
                }
                // let checkResult =
                //   this.app.workspace.getLeavesOfType(VIEW_TYPE_SHORTCUTS_ANALYZER)
                //     .length === 0
                // if (checkResult) {
                //   // Only perform work when checking is false
                //   if (!checking) {
                //     openView(this.app, VIEW_TYPE_SHORTCUTS_ANALYZER, ShortcutsView)
                //   }
                //   return true
            },
        });
    }
}
// onOpen() {
//   const { contentEl } = this
//   contentEl.setText('Woah!')
// }
// onClose() {
//   const { contentEl } = this
//   contentEl.empty()
// }
class KeyboardAnalyzerSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for my awesome plugin.' });
        // todo: change for switcher
        new obsidian.Setting(containerEl)
            .setName('Setting #1')
            .setDesc("It's a secret")
            .addText((text) => text
            .setPlaceholder('Enter your secret')
            .setValue(this.plugin.settings.showStatusBarItem)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log('Secret: ' + value);
            this.plugin.settings.showStatusBarItem = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = KeyboardAnalizerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
